<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LNMP环境工作原理</title>
      <link href="/2024/06/23/LNMP%E7%8E%AF%E5%A2%83%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2024/06/23/LNMP%E7%8E%AF%E5%A2%83%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="二、LNMP环境原理"><a href="#二、LNMP环境原理" class="headerlink" title="二、LNMP环境原理"></a>二、LNMP环境原理</h2><h3 id="1-组成"><a href="#1-组成" class="headerlink" title="1.组成"></a>1.组成</h3><p>LNMP环境【Linux、Nginx(80)、PHP(9000)、Mysql(3306)】每个都是独立的软件。</p><h3 id="2-LNPM原理图"><a href="#2-LNPM原理图" class="headerlink" title="2.LNPM原理图"></a>2.LNPM原理图</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-16-53-image-20240623131653531-e18c07.png" alt="image-20240623131653531"></p><h2 id="三、LNMP环境部署"><a href="#三、LNMP环境部署" class="headerlink" title="三、LNMP环境部署"></a>三、LNMP环境部署</h2><h3 id="1-Msql软件"><a href="#1-Msql软件" class="headerlink" title="1.Msql软件"></a>1.Msql软件</h3>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> LNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket套接字</title>
      <link href="/2024/06/23/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
      <url>/2024/06/23/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="Socket概览："><a href="#Socket概览：" class="headerlink" title="Socket概览："></a>Socket概览：</h2><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-44-39-image-20240623134438949-6a933f.png" alt="image-20240623134438949"></p><h2 id="什么是-Socket？"><a href="#什么是-Socket？" class="headerlink" title="什么是 Socket？"></a>什么是 Socket？</h2><p>Socket（套接字）是网络通信中的一种机制，可以将其类比为电话插座，负责连接通信双方。Socket 就像电话插座上的孔，端口负责连接，而创建连接就像把插头插在插座上。Socket 实例创建后会监听消息，当有消息传入时会自动接通。</p><p>实际上，Socket 是应用层和传输层之间的抽象层，它将 TCP&#x2F;IP 层复杂的操作封装成简单接口，供应用层调用，从而实现进程间的网络通信。Socket 起源于 UNIX，在 UNIX 的“一切皆文件”思想下，进程间通信通过文件描述符（file descriptor）进行，Socket 就是这种“打开-读&#x2F;写-关闭”模式的实现。服务器和客户端各自维护一个“文件”，通过文件读写来传输数据，通讯结束时关闭文件。</p><h2 id="Socket-的位置"><a href="#Socket-的位置" class="headerlink" title="Socket 的位置"></a>Socket 的位置</h2><p>Socket 位于应用层和传输层之间。它将复杂的网络协议封装成简洁的接口，便于程序进行网络通信。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-30-40-660329-20201010094027768-397452978-727485.png" alt="img"></p><hr><h2 id="Socket-的类型"><a href="#Socket-的类型" class="headerlink" title="Socket 的类型"></a>Socket 的类型</h2><p>Socket 主要分为两种类型：流格式套接字（SOCK_STREAM）和数据报格式套接字（SOCK_DGRAM）。</p><h3 id="流格式套接字（SOCK-STREAM）"><a href="#流格式套接字（SOCK-STREAM）" class="headerlink" title="流格式套接字（SOCK_STREAM）"></a>流格式套接字（SOCK_STREAM）</h3><p>流格式套接字也叫<strong>“面向连接的套接字”</strong>，是一种可靠、双向的通信数据流，可以确保数据准确无误地到达另一台计算机。如果数据损坏或丢失，可以重新发送。</p><p><strong>特点：</strong></p><ul><li>数据不会在传输过程中丢失。</li><li>数据按照顺序传输。</li><li>数据发送和接收不同步。</li></ul><p>可以将 SOCK_STREAM 比作一条传送带，数据按顺序传输，不会丢失。数据传输时，无需接收端和发送端同步，接收端可以根据自己的节奏读取数据。</p><p><strong>应用场景：</strong></p><ul><li><strong>浏览器使用的 HTTP 协议</strong>：基于面向连接的套接字，确保数据准确无误。</li></ul><p>流格式套接字使用 <strong>TCP 协议</strong>（Transmission Control Protocol，传输控制协议），TCP 确保数据按照顺序到达且无错误。</p><h3 id="数据报格式套接字（SOCK-DGRAM）"><a href="#数据报格式套接字（SOCK-DGRAM）" class="headerlink" title="数据报格式套接字（SOCK_DGRAM）"></a>数据报格式套接字（SOCK_DGRAM）</h3><p>数据报格式套接字也叫<strong>“无连接的套接字”</strong>，它传输数据时不进行数据校验。如果数据在传输中损坏或丢失，无法补救。这种套接字传输效率高，但数据传输顺序不保证，可能丢失或损坏。</p><p><strong>特点：</strong></p><ul><li>强调快速传输而非传输顺序。</li><li>数据可能丢失或损毁。</li><li>每次传输的数据大小有限。</li><li>数据的发送和接收同步。</li></ul><p>可以将 SOCK_DGRAM 比作快递，一些包裹可能丢失或损坏，但传输效率高。</p><p><strong>应用场景：</strong></p><ul><li><strong>QQ 视频聊天和语音聊天</strong>：使用 SOCK_DGRAM 来传输数据，保证通信效率，即使丢失少量数据，也不会影响整体通信质量。</li></ul><p>数据报格式套接字使用 <strong>UDP 协议</strong>（User Datagram Protocol，用户数据报协议），它注重快速传输，而非可靠性。</p><hr><h2 id="Socket-通信过程"><a href="#Socket-通信过程" class="headerlink" title="Socket 通信过程"></a>Socket 通信过程</h2><p>Socket 保证了不同计算机之间的通信，也就是网络通信。对于网站，通信模型是服务器与客户端之间的通信。两端都建立了一个 Socket 对象，然后通过 Socket 对象对数据进行传输。通常服务器处于一个无限循环，等待客户端的连接。</p><p>下面是面向连接的 TCP 时序图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-31-41-660329-20201010094439156-1397820811-febe00.png" alt="img"></p><h3 id="客户端过程"><a href="#客户端过程" class="headerlink" title="客户端过程"></a>客户端过程</h3><p>客户端的通信过程较为简单，创建 Socket 后连接服务器，然后发送数据、接收响应数据，最后关闭连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 创建 Socket 连接</span></span><br><span class="line">    sock.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8001</span>))  <span class="comment"># 连接服务器</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="built_in">input</span>(<span class="string">&#x27;Please input data:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sock.sendall(data)</span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Send Failed...&#x27;</span>, e)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Send Successfully&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        res = sock.recv(<span class="number">4096</span>)  <span class="comment"># 获取服务器返回的数据</span></span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">    sock.close()</span><br></pre></td></tr></table></figure><p><code>sendall()</code> 方法会尝试发送所有数据，成功时返回 <code>None</code>，失败时抛出异常。<code>recv()</code> 方法用于接收服务器返回的数据。</p><h3 id="服务端过程"><a href="#服务端过程" class="headerlink" title="服务端过程"></a>服务端过程</h3><p>服务端先初始化 Socket，与本机地址及端口绑定，准备接收连接。调用 <code>accept()</code> 阻塞等待客户端连接，连接建立后，接收并处理请求，发送响应数据，最后关闭连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 创建 Socket 连接（TCP）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Socket Created&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sock.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8001</span>))  <span class="comment"># 配置 Socket，绑定 IP 地址和端口号</span></span><br><span class="line">    <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Bind Failed...&#x27;</span>, e)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    sock.listen(<span class="number">5</span>)  <span class="comment"># 设置最大允许连接数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = sock.accept()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn.settimeout(<span class="number">10</span>)  <span class="comment"># 设置超时时间</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Get value &#x27;</span> + data.decode(), end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;Exit Server&#x27;</span>, end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                conn.sendall(<span class="string">b&#x27;OK&#x27;</span>)  <span class="comment"># 返回数据</span></span><br><span class="line">        <span class="keyword">except</span> socket.timeout:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Time out&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        conn.close()  <span class="comment"># 关闭连接</span></span><br><span class="line">    sock.close()</span><br></pre></td></tr></table></figure><p><code>accept()</code> 方法阻塞等待客户端连接，返回新的 Socket 对象 <code>conn</code>，通过 <code>conn</code> 与客户端通信。</p><hr><h2 id="从-TCP-连接的视角看-Socket-过程"><a href="#从-TCP-连接的视角看-Socket-过程" class="headerlink" title="从 TCP 连接的视角看 Socket 过程"></a>从 TCP 连接的视角看 Socket 过程</h2><h3 id="TCP-三次握手的-Socket-过程"><a href="#TCP-三次握手的-Socket-过程" class="headerlink" title="TCP 三次握手的 Socket 过程"></a>TCP 三次握手的 Socket 过程</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-32-08-660329-20201010111311841-1023720840-c00951.png" alt="img"></p><ol><li>服务器初始化 Socket，调用 <code>socket()</code>、<code>bind()</code>、<code>listen()</code>，调用 <code>accept()</code> 阻塞等待。</li><li>客户端调用 <code>connect()</code> 向服务器发送 SYN 请求。</li><li>服务器发送 SYN 和 ACK 应答，完成第一次握手。</li><li>客户端收到应答后返回，再发送一个 ACK。</li><li>服务器接收 ACK 确认，<code>accept()</code> 返回，建立连接。</li></ol><h3 id="TCP-四次挥手的-Socket-过程"><a href="#TCP-四次挥手的-Socket-过程" class="headerlink" title="TCP 四次挥手的 Socket 过程"></a>TCP 四次挥手的 Socket 过程</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-32-15-660329-20201010111352844-514391838-7cca07.png" alt="img"></p><ol><li>某个应用进程调用 <code>close()</code> 主动关闭，发送一个 FIN。</li><li>另一端接收到 FIN 后被动关闭，发送 ACK。</li><li>被动关闭的一端调用 <code>close()</code> 关闭 Socket，发送 FIN。</li><li>接收端发送 ACK 确认，连接关闭。</li></ol><p><strong>注意：</strong> 服务端代码在实际应用中需要并发处理，服务器通常会 fork 新的进程或线程来处理请求，以提高处理能力。</p><hr><p>Socket 是网络通信的基础，通过理解 Socket，可以更好地进行网络编程和应用开发。希望这篇文章能帮助你理解 Socket 的概念及其应用场景。如果有疑问，欢迎在评论区讨论！</p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux运维 </tag>
            
            <tag> Socket </tag>
            
            <tag> 套接字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LNMP环境准备</title>
      <link href="/2024/06/23/LNMP%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
      <url>/2024/06/23/LNMP%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h3 id="1、系统环境"><a href="#1、系统环境" class="headerlink" title="1、系统环境"></a>1、系统环境</h3><p>centos7.6</p><h3 id="2、部署规划"><a href="#2、部署规划" class="headerlink" title="2、部署规划"></a>2、部署规划</h3><table><thead><tr><th>编号</th><th>主机名称</th><th>IP地址</th><th>角色</th></tr></thead><tbody><tr><td>1</td><td>Web01.itcast.cn</td><td>10.1.1.11</td><td>Web01服务器</td></tr></tbody></table><h3 id="3、LNMP环境准备"><a href="#3、LNMP环境准备" class="headerlink" title="3、LNMP环境准备"></a>3、LNMP环境准备</h3><p>第一步：克隆母鸡或模板及，生产Wbe01服务器</p><p>第二步：更改主机名称，采用FQDN格式，如web01.itcast.cn</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hostnamectl set-hostname web01.itcast.cn</span></span><br><span class="line"><span class="comment"># su</span></span><br></pre></td></tr></table></figure><p>第三步：更改服务器的IP地址（使用静态模式）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line">...</span><br><span class="line">IPADDR=<span class="string">&quot;192.168.31.141&quot;</span></span><br><span class="line">NETMASK=<span class="string">&quot;255.255.255.0&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.31.2&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;114.114.114.114&quot;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>第四步：绑定主机名称以及IP地址到&#x2F;etc&#x2F;hosts文件中，然后重启网络</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/hosts</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">31.141</span> web01 web01.itcast.cn</span><br><span class="line"><span class="comment">#sysctmctl restart network</span></span><br></pre></td></tr></table></figure><p>第五步：关闭防火墙、NetworkManager、SELinux</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl stop firewalld</span></span><br><span class="line"><span class="comment"># systemctl disable firewalld</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#setenforence 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#systemctl stop NetworkManger</span></span><br><span class="line"><span class="comment">#systemctl disable NetworkManager</span></span><br></pre></td></tr></table></figure><p>第六步：配置yum源</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.cloud.tencent.com/repo/centos7_base.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#yum clean all</span></span><br><span class="line"><span class="comment">#yum makecache</span></span><br></pre></td></tr></table></figure><p>第七步：时间同步</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#yum install ntpdate</span></span><br><span class="line"><span class="comment">#ntpdate ntp.aliyun.com</span></span><br><span class="line"><span class="comment">#yum install ntpd </span></span><br><span class="line"><span class="comment">#systemctl start ntpd</span></span><br><span class="line"><span class="comment">#systemctl enable ntpd</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/02-13-07-262-hei_se_de-long-hei_bai_she_ying-dan_se_mo_shi-hong_she_ying-x750-c02fd7.jpeg" alt="龙, 黑色的, 黑色和白色的, 黑白摄影, 单色模式 壁纸 1920x1200 允许"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> LNMP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
