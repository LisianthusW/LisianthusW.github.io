<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一键部署Redis主从集群</title>
      <link href="/2024/07/18/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Redis%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4/"/>
      <url>/2024/07/18/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Redis%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-脚本如下"><a href="#1-脚本如下" class="headerlink" title="1.脚本如下"></a>1.脚本如下</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">YELLOW=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">NC=<span class="string">&#x27;\033[0m&#x27;</span> <span class="comment"># No Color</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义总步骤数</span></span><br><span class="line">TOTAL_STEPS=<span class="number">18</span></span><br><span class="line">current_step=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示进度的函数</span></span><br><span class="line">show_progress() &#123;</span><br><span class="line">    current_step=<span class="variable">$</span>((current_step + <span class="number">1</span>))</span><br><span class="line">    percentage=<span class="variable">$</span>((current_step * <span class="number">100</span> / TOTAL_STEPS))</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;[%3d%%] <span class="variable">$</span>&#123;GREEN&#125;步骤 %2d: %s<span class="variable">$</span>&#123;NC&#125;\n&quot;</span> <span class="variable">$percentage</span> <span class="variable">$current_step</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;开始安装和配置Redis主从集群<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 安装依赖</span></span><br><span class="line">show_progress <span class="string">&quot;安装Redis依赖&quot;</span></span><br><span class="line">yum install <span class="literal">-y</span> gcc tcl</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;第一部分: 安装单机Redis<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 下载Redis</span></span><br><span class="line">show_progress <span class="string">&quot;下载Redis&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> redis<span class="literal">-6</span>.<span class="number">2.4</span>.tar.gz <span class="string">&quot;https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJnUmJLS3hIc1hRZjlYLUdFP2U9cWk0bGlt.tar.gz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 解压Redis</span></span><br><span class="line">show_progress <span class="string">&quot;解压Redis&quot;</span></span><br><span class="line">tar <span class="literal">-xvf</span> redis<span class="literal">-6</span>.<span class="number">2.4</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 进入Redis目录</span></span><br><span class="line">show_progress <span class="string">&quot;进入Redis目录&quot;</span></span><br><span class="line"><span class="built_in">cd</span> redis<span class="literal">-6</span>.<span class="number">2.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 编译和安装Redis</span></span><br><span class="line">show_progress <span class="string">&quot;编译和安装Redis&quot;</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 修改Redis配置</span></span><br><span class="line">show_progress <span class="string">&quot;修改Redis配置&quot;</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;s/bind 127.0.0.1/bind 0.0.0.0/&#x27;</span> redis.conf</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;s/databases 16/databases 1/&#x27;</span> redis.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;第二部分: 配置Redis主从集群<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 创建目录</span></span><br><span class="line">show_progress <span class="string">&quot;创建目录&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">mkdir <span class="literal">-p</span> <span class="number">7001</span> <span class="number">7002</span> <span class="number">7003</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 拷贝配置文件</span></span><br><span class="line">show_progress <span class="string">&quot;拷贝配置文件&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="number">7001</span> <span class="number">7002</span> <span class="number">7003</span> | xargs <span class="literal">-t</span> <span class="literal">-n</span> <span class="number">1</span> <span class="built_in">cp</span> redis<span class="literal">-6</span>.<span class="number">2.4</span>/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. 修改配置文件</span></span><br><span class="line">show_progress <span class="string">&quot;修改配置文件&quot;</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="literal">-e</span> <span class="string">&#x27;s/6379/7001/g&#x27;</span> <span class="literal">-e</span> <span class="string">&#x27;s/dir .\//dir \/tmp\/7001\//g&#x27;</span> <span class="number">7001</span>/redis.conf</span><br><span class="line">sed <span class="literal">-i</span> <span class="literal">-e</span> <span class="string">&#x27;s/6379/7002/g&#x27;</span> <span class="literal">-e</span> <span class="string">&#x27;s/dir .\//dir \/tmp\/7002\//g&#x27;</span> <span class="number">7002</span>/redis.conf</span><br><span class="line">sed <span class="literal">-i</span> <span class="literal">-e</span> <span class="string">&#x27;s/6379/7003/g&#x27;</span> <span class="literal">-e</span> <span class="string">&#x27;s/dir .\//dir \/tmp\/7003\//g&#x27;</span> <span class="number">7003</span>/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10. 修改IP配置</span></span><br><span class="line">show_progress <span class="string">&quot;修改IP配置&quot;</span></span><br><span class="line">REDIS_IP=<span class="variable">$</span>(hostname <span class="literal">-I</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">printf <span class="string">&#x27;%s\n&#x27;</span> <span class="number">7001</span> <span class="number">7002</span> <span class="number">7003</span> | xargs <span class="literal">-I</span>&#123;&#125; <span class="literal">-t</span> sed <span class="literal">-i</span> <span class="string">&quot;1a replica-announce-ip <span class="variable">$REDIS_IP</span>&quot;</span> &#123;&#125;/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11. 启动Redis实例</span></span><br><span class="line">show_progress <span class="string">&quot;启动Redis实例&quot;</span></span><br><span class="line">redis<span class="literal">-server</span> <span class="number">7001</span>/redis.conf &amp;</span><br><span class="line">redis<span class="literal">-server</span> <span class="number">7002</span>/redis.conf &amp;</span><br><span class="line">redis<span class="literal">-server</span> <span class="number">7003</span>/redis.conf &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待Redis启动</span></span><br><span class="line"><span class="built_in">sleep</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 12. 配置主从关系</span></span><br><span class="line">show_progress <span class="string">&quot;配置主从关系&quot;</span></span><br><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7002</span> slaveof <span class="variable">$REDIS_IP</span> <span class="number">7001</span></span><br><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7003</span> slaveof <span class="variable">$REDIS_IP</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 13. 检查主从状态</span></span><br><span class="line">show_progress <span class="string">&quot;检查主从状态&quot;</span></span><br><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7001</span> info replication</span><br><span class="line"></span><br><span class="line"><span class="comment"># 14. 测试主节点写入</span></span><br><span class="line">show_progress <span class="string">&quot;测试主节点写入&quot;</span></span><br><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7001</span> <span class="built_in">set</span> num <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 15. 测试从节点读取</span></span><br><span class="line">show_progress <span class="string">&quot;测试从节点读取&quot;</span></span><br><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7002</span> get num</span><br><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7003</span> get num</span><br><span class="line"></span><br><span class="line"><span class="comment"># 16. 测试从节点写入(应该失败)</span></span><br><span class="line">show_progress <span class="string">&quot;测试从节点写入(应该失败)&quot;</span></span><br><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7002</span> <span class="built_in">set</span> num <span class="number">666</span></span><br><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7003</span> <span class="built_in">set</span> num <span class="number">888</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 17. 显示集群信息</span></span><br><span class="line">show_progress <span class="string">&quot;显示集群信息&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;Redis集群信息:<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;主节点: <span class="variable">$REDIS_IP:7001</span><span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;从节点1: <span class="variable">$REDIS_IP:7002</span><span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;从节点2: <span class="variable">$REDIS_IP:7003</span><span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 18. 完成</span></span><br><span class="line">show_progress <span class="string">&quot;安装和配置完成&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;Redis主从集群安装和配置完成!<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;要停止Redis,请运行: <span class="variable">$</span>&#123;NC&#125;redis-cli -p 7001 shutdown &amp;&amp; redis-cli -p 7002 shutdown &amp;&amp; redis-cli -p 7003 shutdown&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 7001</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>执行下列操作以测试：</p><ul><li><p>利用redis-cli连接7001，执行<code>set num 123</code></p></li><li><p>利用redis-cli连接7002，执行<code>get num</code>，再执行<code>set num 666</code></p></li><li><p>利用redis-cli连接7003，执行<code>get num</code>，再执行<code>set num 888</code></p></li></ul><p>可以发现，只有在7001这个master节点上可以执行写操作，7002和7003这两个slave节点只能执行读操作。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> ⭐一键脚本⭐ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群多种方法搭建</title>
      <link href="/2024/07/18/Redis%E9%9B%86%E7%BE%A4/"/>
      <url>/2024/07/18/Redis%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="本篇主要讲以下三种Redis集群方式"><a href="#本篇主要讲以下三种Redis集群方式" class="headerlink" title="本篇主要讲以下三种Redis集群方式"></a>本篇主要讲以下三种Redis集群方式</h1><ul><li>单机安装Redis</li><li>Redis主从</li><li>Redis分片集群</li></ul><h1 id="1-单机安装Redis"><a href="#1-单机安装Redis" class="headerlink" title="1.单机安装Redis"></a>1.单机安装Redis</h1><p>首先需要安装Redis所需要的依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure><blockquote><p>redis-6.2.4下载地址：<a href="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJnUmJLS3hIc1hRZjlYLUdFP2U9cWk0bGlt.tar.gz">https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJnUmJLS3hIc1hRZjlYLUdFP2U9cWk0bGlt.tar.gz</a></p></blockquote><p>然后将Redis安装包上传到虚拟机的任意目录：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-34-43-image-20210629114325516-67acef.png" alt="image-20210629114325516"></p><p>例如，我放到了&#x2F;tmp目录：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-34-45-image-20210629114830642-0823f3.png" alt="image-20210629114830642"></p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf redis-6.2.4.tar.gz</span><br></pre></td></tr></table></figure><p>解压后：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-34-47-image-20210629114941810-c66049.png" alt="image-20210629114941810"></p><p>进入redis目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.2.4</span><br></pre></td></tr></table></figure><p>在上述目录下运行编译命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绑定地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 数据库数量，设置为1</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><p>停止redis服务（ctrl + c也可停止）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure><h1 id="2-Redis主从集群"><a href="#2-Redis主从集群" class="headerlink" title="2.Redis主从集群"></a>2.Redis主从集群</h1><h2 id="2-1-集群结构"><a href="#2-1-集群结构" class="headerlink" title="2.1.集群结构"></a>2.1.集群结构</h2><p>我们搭建的主从集群结构如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-34-50-image-20210630111505799-ad5106.png" alt="image-20210630111505799"></p><p>共包含三个节点，一个主节点，两个从节点。</p><p>这里我们会在同一台虚拟机中开启3个redis实例，模拟主从集群，信息如下：</p><table><thead><tr><th align="center">IP</th><th align="center">PORT</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">192.168.206.129</td><td align="center">7001</td><td align="center">master</td></tr><tr><td align="center">192.168.206.129</td><td align="center">7002</td><td align="center">slave</td></tr><tr><td align="center">192.168.206.129</td><td align="center">7003</td><td align="center">slave</td></tr></tbody></table><h2 id="2-2-准备实例和配置"><a href="#2-2-准备实例和配置" class="headerlink" title="2.2.准备实例和配置"></a>2.2.准备实例和配置</h2><p>要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。</p><h3 id="1）创建目录"><a href="#1）创建目录" class="headerlink" title="1）创建目录"></a>1）创建目录</h3><p>我们创建三个文件夹，名字分别叫7001、7002、7003：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入/tmp目录</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> 7001 7002 7003</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-34-55-image-20210630113929868-bdf553.png" alt="image-20210630113929868"></p><h3 id="2）恢复原始配置"><a href="#2）恢复原始配置" class="headerlink" title="2）恢复原始配置"></a>2）恢复原始配置</h3><p>修改redis-6.2.4&#x2F;redis.conf文件，将其中的持久化模式改为默认的RDB模式，AOF保持关闭状态。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启RDB</span></span><br><span class="line"><span class="comment"># save &quot;&quot;</span></span><br><span class="line"><span class="attr">save</span> <span class="string">3600 1</span></span><br><span class="line"><span class="attr">save</span> <span class="string">300 100</span></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 关闭AOF</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">no</span></span><br></pre></td></tr></table></figure><h3 id="3）拷贝配置文件到每个实例目录"><a href="#3）拷贝配置文件到每个实例目录" class="headerlink" title="3）拷贝配置文件到每个实例目录"></a>3）拷贝配置文件到每个实例目录</h3><p>然后将redis-6.2.4&#x2F;redis.conf文件拷贝到三个目录中（在&#x2F;tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：逐个拷贝</span></span><br><span class="line"><span class="built_in">cp</span> redis-6.2.4/redis.conf 7001</span><br><span class="line"><span class="built_in">cp</span> redis-6.2.4/redis.conf 7002</span><br><span class="line"><span class="built_in">cp</span> redis-6.2.4/redis.conf 7003</span><br><span class="line"><span class="comment"># 方式二：管道组合命令，一键拷贝</span></span><br><span class="line"><span class="built_in">echo</span> 7001 7002 7003 | xargs -t -n 1 <span class="built_in">cp</span> redis-6.2.4/redis.conf</span><br></pre></td></tr></table></figure><h3 id="4）修改每个实例的端口、工作目录"><a href="#4）修改每个实例的端口、工作目录" class="headerlink" title="4）修改每个实例的端口、工作目录"></a>4）修改每个实例的端口、工作目录</h3><p>修改每个文件夹内的配置文件，将端口分别修改为7001、7002、7003，将rdb文件保存位置都修改为自己所在目录（在&#x2F;tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s/6379/7001/g&#x27;</span> -e <span class="string">&#x27;s/dir .\//dir \/tmp\/7001\//g&#x27;</span> 7001/redis.conf</span><br><span class="line">sed -i -e <span class="string">&#x27;s/6379/7002/g&#x27;</span> -e <span class="string">&#x27;s/dir .\//dir \/tmp\/7002\//g&#x27;</span> 7002/redis.conf</span><br><span class="line">sed -i -e <span class="string">&#x27;s/6379/7003/g&#x27;</span> -e <span class="string">&#x27;s/dir .\//dir \/tmp\/7003\//g&#x27;</span> 7003/redis.conf</span><br></pre></td></tr></table></figure><h3 id="5）修改每个实例的声明IP（注意IP需要修改）"><a href="#5）修改每个实例的声明IP（注意IP需要修改）" class="headerlink" title="5）修改每个实例的声明IP（注意IP需要修改）"></a>5）修改每个实例的声明IP（<strong>注意IP需要修改</strong>）</h3><p>虚拟机本身有多个IP，为了避免将来混乱，我们需要在redis.conf文件中指定每一个实例的绑定ip信息，格式如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis实例的声明 IP</span></span><br><span class="line"><span class="attr">replica-announce-ip</span> <span class="string">192.168.150.101</span></span><br></pre></td></tr></table></figure><p>每个目录都要改，我们一键完成修改（在&#x2F;tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐一执行</span></span><br><span class="line">sed -i <span class="string">&#x27;1a replica-announce-ip 192.168.206.129&#x27;</span> 7001/redis.conf</span><br><span class="line">sed -i <span class="string">&#x27;1a replica-announce-ip 192.168.206.129&#x27;</span> 7002/redis.conf</span><br><span class="line">sed -i <span class="string">&#x27;1a replica-announce-ip 192.168.206.129&#x27;</span> 7003/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者一键修改</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> 7001 7002 7003 | xargs -I&#123;&#125; -t sed -i <span class="string">&#x27;1a replica-announce-ip 192.168.206.129&#x27;</span> &#123;&#125;/redis.conf</span><br></pre></td></tr></table></figure><h2 id="2-3-启动"><a href="#2-3-启动" class="headerlink" title="2.3.启动"></a>2.3.启动</h2><p>为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令（在&#x2F;tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1个</span></span><br><span class="line">redis-server 7001/redis.conf</span><br><span class="line"><span class="comment"># 第2个</span></span><br><span class="line">redis-server 7002/redis.conf</span><br><span class="line"><span class="comment"># 第3个</span></span><br><span class="line">redis-server 7003/redis.conf</span><br></pre></td></tr></table></figure><p>启动后：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-00-image-20210630183914491-f14b40.png" alt="image-20210630183914491"></p><p>如果要一键停止，可以运行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> 7001 7002 7003 | xargs -I&#123;&#125; -t redis-cli -p &#123;&#125; shutdown</span><br></pre></td></tr></table></figure><h2 id="2-4-开启主从关系"><a href="#2-4-开启主从关系" class="headerlink" title="2.4.开启主从关系"></a>2.4.开启主从关系</h2><p>现在三个实例还没有任何关系，要配置主从可以使用replicaof 或者slaveof（5.0以前）命令。</p><p><strong>新开窗口执行下述命令，一旦ctrl +c退出后，redis服务将中断</strong></p><p>有临时和永久两种模式：</p><ul><li><p>修改配置文件（永久生效）</p><ul><li>在redis.conf中添加一行配置：<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li></ul></li><li><p>使用redis-cli客户端连接到redis服务，执行slaveof命令（重启后失效）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong><font color='red'>注意</font></strong>：在5.0以后新增命令replicaof，与salveof效果一致。（<strong>注意IP需要修改</strong>）</p><p>这里我们为了演示方便，使用方式二（在&#x2F;tmp目录执行下列命令）。</p><p>通过redis-cli命令连接7002，执行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接 7002</span></span><br><span class="line">redis-cli -p 7002</span><br><span class="line"><span class="comment"># 执行slaveof</span></span><br><span class="line">slaveof 192.168.206.129 7001</span><br></pre></td></tr></table></figure><p>执行完：exit，退出可继续执行后续命令。</p><p>通过redis-cli命令连接7003，执行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接 7003</span></span><br><span class="line">redis-cli -p 7003</span><br><span class="line"><span class="comment"># 执行slaveof</span></span><br><span class="line">slaveof 192.168.206.129 7001</span><br></pre></td></tr></table></figure><p>然后连接 7001节点，查看集群状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接 7001</span></span><br><span class="line">redis-cli -p 7001</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-03-image-20210630201258802-8d2759.png" alt="image-20210630201258802"></p><h2 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5.测试"></a>2.5.测试</h2><p>执行下列操作以测试：</p><ul><li><p>利用redis-cli连接7001，执行<code>set num 123</code></p></li><li><p>利用redis-cli连接7002，执行<code>get num</code>，再执行<code>set num 666</code></p></li><li><p>利用redis-cli连接7003，执行<code>get num</code>，再执行<code>set num 888</code></p></li></ul><p>可以发现，只有在7001这个master节点上可以执行写操作，7002和7003这两个slave节点只能执行读操作。</p><h1 id="3-搭建哨兵集群"><a href="#3-搭建哨兵集群" class="headerlink" title="3.搭建哨兵集群"></a>3.搭建哨兵集群</h1><h2 id="3-1-集群结构"><a href="#3-1-集群结构" class="headerlink" title="3.1.集群结构"></a>3.1.集群结构</h2><p>这里我们搭建一个三节点形成的Sentinel集群，来监管之前的Redis主从集群。如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-07-image-20210701215227018-18fdcf.png" alt="image-20210701215227018"></p><p>三个sentinel实例信息如下：</p><table><thead><tr><th align="center">节点</th><th align="center">IP</th><th align="center">PORT</th></tr></thead><tbody><tr><td align="center">s1</td><td align="center">192.168.206.129</td><td align="center">27001</td></tr><tr><td align="center">s2</td><td align="center">192.168.206.129</td><td align="center">27002</td></tr><tr><td align="center">s3</td><td align="center">192.168.206.129</td><td align="center">27003</td></tr></tbody></table><h2 id="3-2-准备实例和配置"><a href="#3-2-准备实例和配置" class="headerlink" title="3.2.准备实例和配置"></a>3.2.准备实例和配置</h2><p>要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。</p><p>我们创建三个文件夹，名字分别叫s1、s2、s3：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入/tmp目录</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> s1 s2 s3</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-10-image-20210701215534714-e7404c.png" alt="image-20210701215534714"></p><p>然后我们在s1目录创建一个sentinel.conf文件，添加下面的内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">port 27001</span><br><span class="line">sentinel announce-ip 192.168.206.129</span><br><span class="line">sentinel monitor mymaster 192.168.206.129 7001 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line">sentinel failover-timeout mymaster 60000</span><br><span class="line">dir &quot;/tmp/s1&quot;</span><br></pre></td></tr></table></figure><p>解读：</p><ul><li><code>port 27001</code>：是当前sentinel实例的端口</li><li><code>sentinel monitor mymaster 192.168.206.129 7001 2</code>：指定主节点信息<ul><li><code>mymaster</code>：主节点名称，自定义，任意写</li><li><code>192.168.206.129 7001</code>：主节点的ip和端口</li><li><code>2</code>：选举master时的quorum值</li></ul></li></ul><p>然后将s1&#x2F;sentinel.conf文件拷贝到s2、s3两个目录中（在&#x2F;tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：逐个拷贝</span></span><br><span class="line"><span class="built_in">cp</span> s1/sentinel.conf s2</span><br><span class="line"><span class="built_in">cp</span> s1/sentinel.conf s3</span><br><span class="line"><span class="comment"># 方式二：管道组合命令，一键拷贝</span></span><br><span class="line"><span class="built_in">echo</span> s2 s3 | xargs -t -n 1 <span class="built_in">cp</span> s1/sentinel.conf</span><br></pre></td></tr></table></figure><p>修改s2、s3两个文件夹内的配置文件，将端口分别修改为27002、27003：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s/27001/27002/g&#x27;</span> -e <span class="string">&#x27;s/s1/s2/g&#x27;</span> s2/sentinel.conf</span><br><span class="line">sed -i -e <span class="string">&#x27;s/27001/27003/g&#x27;</span> -e <span class="string">&#x27;s/s1/s3/g&#x27;</span> s3/sentinel.conf</span><br></pre></td></tr></table></figure><h2 id="3-3-启动"><a href="#3-3-启动" class="headerlink" title="3.3.启动"></a>3.3.启动</h2><p>为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1个</span></span><br><span class="line">redis-sentinel s1/sentinel.conf</span><br><span class="line"><span class="comment"># 第2个</span></span><br><span class="line">redis-sentinel s2/sentinel.conf</span><br><span class="line"><span class="comment"># 第3个</span></span><br><span class="line">redis-sentinel s3/sentinel.conf</span><br></pre></td></tr></table></figure><p>启动后：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-15-image-20210701220714104-56a1cb.png" alt="image-20210701220714104"></p><h2 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4.测试"></a>3.4.测试</h2><p>尝试让master节点7001宕机，查看sentinel日志：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-22-image-20210701222857997-97b3de.png" alt="image-20210701222857997"></p><p>查看7003的日志：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-24-image-20210701223025709-faefb1.png" alt="image-20210701223025709"></p><p>查看7002的日志：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-29-image-20210701223131264-e775a7.png" alt="image-20210701223131264"></p><h1 id="4-搭建分片集群"><a href="#4-搭建分片集群" class="headerlink" title="4.搭建分片集群"></a>4.搭建分片集群</h1><h2 id="4-1-集群结构"><a href="#4-1-集群结构" class="headerlink" title="4.1.集群结构"></a>4.1.集群结构</h2><p>分片集群需要的节点数量较多，这里我们搭建一个最小的分片集群，包含3个master节点，每个master包含一个slave节点，结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-30-image-20210702164116027-17f540.png" alt="image-20210702164116027"></p><p>这里我们会在同一台虚拟机中开启6个redis实例，模拟分片集群，信息如下：</p><table><thead><tr><th align="center">IP</th><th align="center">PORT</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">192.168.206.129</td><td align="center">7001</td><td align="center">master</td></tr><tr><td align="center">192.168.206.129</td><td align="center">7002</td><td align="center">master</td></tr><tr><td align="center">192.168.206.129</td><td align="center">7003</td><td align="center">master</td></tr><tr><td align="center">192.168.206.129</td><td align="center">8001</td><td align="center">slave</td></tr><tr><td align="center">192.168.206.129</td><td align="center">8002</td><td align="center">slave</td></tr><tr><td align="center">192.168.206.129</td><td align="center">8003</td><td align="center">slave</td></tr></tbody></table><h2 id="4-2-准备实例和配置"><a href="#4-2-准备实例和配置" class="headerlink" title="4.2.准备实例和配置"></a>4.2.准备实例和配置</h2><p>删除之前的7001、7002、7003这几个目录，重新创建出7001、7002、7003、8001、8002、8003目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入/tmp目录</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 删除旧的，避免配置干扰</span></span><br><span class="line"><span class="built_in">rm</span> -rf 7001 7002 7003</span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> 7001 7002 7003 8001 8002 8003</span><br></pre></td></tr></table></figure><p>在&#x2F;tmp下准备一个新的redis.conf文件，内容如下：</p><ul><li>touch redis.conf</li><li>vi redis.conf</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">port 6379</span><br><span class="line"><span class="comment"># 开启集群功能</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line"><span class="comment"># 集群的配置文件名称，不需要我们创建，由redis自己维护</span></span><br><span class="line">cluster-config-file /tmp/6379/nodes.conf</span><br><span class="line"><span class="comment"># 节点心跳失败的超时时间</span></span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"><span class="comment"># 持久化文件存放目录</span></span><br><span class="line">dir /tmp/6379</span><br><span class="line"><span class="comment"># 绑定地址</span></span><br><span class="line">bind 0.0.0.0</span><br><span class="line"><span class="comment"># 让redis后台运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment"># 注册的实例ip</span></span><br><span class="line">replica-announce-ip 192.168.206.129</span><br><span class="line"><span class="comment"># 保护模式</span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="comment"># 数据库数量</span></span><br><span class="line">databases 1</span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line">logfile /tmp/6379/run.log</span><br></pre></td></tr></table></figure><p>将这个文件拷贝到每个目录下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入/tmp目录</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 执行拷贝</span></span><br><span class="line"><span class="built_in">echo</span> 7001 7002 7003 8001 8002 8003 | xargs -t -n 1 <span class="built_in">cp</span> redis.conf</span><br></pre></td></tr></table></figure><p>修改每个目录下的redis.conf，将其中的6379修改为与所在目录一致：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入/tmp目录</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t sed -i <span class="string">&#x27;s/6379/&#123;&#125;/g&#x27;</span> &#123;&#125;/redis.conf</span><br></pre></td></tr></table></figure><h2 id="4-3-启动"><a href="#4-3-启动" class="headerlink" title="4.3.启动"></a>4.3.启动</h2><p>因为已经配置了后台启动模式，所以可以直接启动服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入/tmp目录</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 一键启动所有服务</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-server &#123;&#125;/redis.conf</span><br></pre></td></tr></table></figure><p>通过ps查看状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><p>发现服务都已经正常启动：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-36-image-20210702174255799-bad909.png" alt="image-20210702174255799"></p><p>如果要关闭所有进程，可以执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span></span><br></pre></td></tr></table></figure><p>或者（推荐这种方式）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-cli -p &#123;&#125; shutdown</span><br></pre></td></tr></table></figure><h2 id="4-4-创建集群"><a href="#4-4-创建集群" class="headerlink" title="4.4.创建集群"></a>4.4.创建集群</h2><p>虽然服务启动了，但是目前每个服务之间都是独立的，没有任何关联。</p><p>我们需要执行命令来创建集群，在Redis5.0之前创建集群比较麻烦，5.0之后集群管理命令都集成到了redis-cli中。</p><p>1）Redis5.0之前（<strong>我们版本是之后，不适用这个</strong>）</p><p>Redis5.0之前集群命令都是用redis安装包下的src&#x2F;redis-trib.rb来实现的。因为redis-trib.rb是有ruby语言编写的所以需要安装ruby环境。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum -y install zlib ruby rubygems</span><br><span class="line">gem install redis</span><br></pre></td></tr></table></figure><p>然后通过命令来管理集群：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入redis的src目录</span></span><br><span class="line"><span class="built_in">cd</span> /tmp/redis-6.2.4/src</span><br><span class="line"><span class="comment"># 创建集群</span></span><br><span class="line">./redis-trib.rb create --replicas 1 192.168.150.101:7001 192.168.150.101:7002 192.168.150.101:7003 192.168.150.101:8001 192.168.150.101:8002 192.168.150.101:8003</span><br></pre></td></tr></table></figure><p>2）Redis5.0以后</p><p>我们使用的是Redis6.2.4版本，集群管理以及集成到了redis-cli中，格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 192.168.206.129:7001 192.168.206.129:7002 192.168.206.129:7003 192.168.206.129:8001 192.168.206.129:8002 192.168.206.129:8003</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li><code>redis-cli --cluster</code>或者<code>./redis-trib.rb</code>：代表集群操作命令</li><li><code>create</code>：代表是创建集群</li><li><code>--replicas 1</code>或者<code>--cluster-replicas 1</code> ：指定集群中每个master的副本个数为1，此时<code>节点总数 ÷ (replicas + 1)</code> 得到的就是master的数量。因此节点列表中的前n个就是master，其它节点都是slave节点，随机分配到不同master</li></ul><p>运行后的样子：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-40-image-20210702181101969-29f2d7.png" alt="image-20210702181101969"></p><p>这里输入yes，则集群开始创建：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-44-image-20210702181215705-067231.png" alt="image-20210702181215705"></p><p>通过命令可以查看集群状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 7001 cluster nodes</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-47-image-20210702181922809-dc8cc9.png" alt="image-20210702181922809"></p><h2 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5.测试"></a>4.5.测试</h2><p>尝试连接7001节点，存储一个数据：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接</span></span><br><span class="line">redis-cli -p 7001</span><br><span class="line"><span class="comment"># 存储数据</span></span><br><span class="line"><span class="built_in">set</span> num 123</span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">get num</span><br><span class="line"><span class="comment"># 再次存储</span></span><br><span class="line"><span class="built_in">set</span> a 1</span><br></pre></td></tr></table></figure><p>结果悲剧了：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-49-image-20210702182343979-81a880.png" alt="image-20210702182343979"></p><p>集群操作时，需要给<code>redis-cli</code>加上<code>-c</code>参数才可以：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -c -p 7001</span><br></pre></td></tr></table></figure><p>这次可以了：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-35-50-image-20210702182602145-a768cd.png" alt="image-20210702182602145"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> Redis </tag>
            
            <tag> Redis集群 </tag>
            
            <tag> 单机安装Redis </tag>
            
            <tag> Redis主从集群 </tag>
            
            <tag> 搭建哨兵集群 </tag>
            
            <tag> 搭建分片集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="/2024/07/18/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2024/07/18/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis有两种持久化方案："><a href="#Redis有两种持久化方案：" class="headerlink" title="Redis有两种持久化方案："></a>Redis有两种持久化方案：</h2><blockquote><ul><li>RDB持久化–(Redis数据备份文件)</li><li>AOF持久化–(追加文件)</li></ul></blockquote><h2 id="1-1-RDB持久化"><a href="#1-1-RDB持久化" class="headerlink" title="1.1.RDB持久化"></a>1.1.RDB持久化</h2><p>RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是保存在当前运行目录。</p><h3 id="1-1-1-执行时机"><a href="#1-1-1-执行时机" class="headerlink" title="1.1.1.执行时机"></a>1.1.1.执行时机</h3><p>RDB持久化在四种情况下会执行：</p><ul><li>执行save命令</li><li>执行bgsave命令</li><li>Redis停机时</li><li>触发RDB条件时</li></ul><p><strong>1）save命令</strong></p><p>执行下面的命令，可以立即执行一次RDB：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-17-45-image-20210725144536958-d07f78.png" alt="image-20210725144536958"></p><p>save命令会导致<strong>主进程</strong>执行RDB，这个过程中<strong>其它所有命令都会被阻塞</strong>。只有在数据迁移时可能用到。</p><p><strong>2）bgsave命令</strong></p><p>下面的命令可以异步执行RDB：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-17-46-image-20210725144725943-891581.png" alt="image-20210725144725943"></p><p>这个命令执行后会开启<strong>独立进程完成</strong>RDB，主进程可以持续处理用户请求，不受影响。</p><p><strong>3）停机时</strong></p><p>Redis停机时会执行一次save命令，实现RDB持久化。</p><p><strong>4）触发RDB条件</strong></p><p>Redis内部有触发RDB的机制，可以在redis.conf文件中找到，格式如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 900秒内，如果至少有1个key被修改，则执行bgsave ， 如果是save &quot;&quot; 则表示禁用RDB</span></span><br><span class="line"><span class="attr">save</span> <span class="string">900 1  </span></span><br><span class="line"><span class="attr">save</span> <span class="string">300 10  </span></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000 </span></span><br></pre></td></tr></table></figure><p>RDB的其它配置也可以在redis.conf文件中设置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否压缩 ,建议不开启，压缩也会消耗cpu，磁盘的话不值钱</span></span><br><span class="line"><span class="attr">rdbcompression</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># RDB文件名称</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump.rdb  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 文件保存的路径目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">./ </span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-RDB原理"><a href="#1-1-2-RDB原理" class="headerlink" title="1.1.2.RDB原理"></a>1.1.2.RDB原理</h3><p>bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件。</p><p>fork采用的是copy-on-write技术：</p><ul><li>当主进程执行读操作时，访问共享内存；</li><li>当主进程执行写操作时，则会拷贝一份数据，执行写操作。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-17-49-image-20210725151319695-ea5706.png" alt="image-20210725151319695"></p><h3 id="1-1-3-小结"><a href="#1-1-3-小结" class="headerlink" title="1.1.3.小结"></a>1.1.3.小结</h3><p>RDB方式bgsave的基本流程？</p><ul><li>fork主进程得到一个子进程，共享内存空间</li><li>子进程读取内存数据并写入新的RDB文件</li><li>用新RDB文件替换旧的RDB文件</li></ul><p>RDB会在什么时候执行？save 60 1000代表什么含义？</p><ul><li>默认是服务停止时</li><li>代表60秒内至少执行1000次修改则触发RDB</li></ul><p>RDB的缺点？</p><ul><li>RDB执行间隔时间长，两次RDB之间写入数据有丢失的风险</li><li>fork子进程、压缩、写出RDB文件都比较耗时</li></ul><h2 id="1-2-AOF持久化"><a href="#1-2-AOF持久化" class="headerlink" title="1.2.AOF持久化"></a>1.2.AOF持久化</h2><h3 id="1-2-1-AOF原理"><a href="#1-2-1-AOF原理" class="headerlink" title="1.2.1.AOF原理"></a>1.2.1.AOF原理</h3><p>AOF全称为Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-17-51-image-20210725151543640-871b04.png" alt="image-20210725151543640"></p><h3 id="1-2-2-AOF配置"><a href="#1-2-2-AOF配置" class="headerlink" title="1.2.2.AOF配置"></a>1.2.2.AOF配置</h3><p>AOF默认是关闭的，需要修改redis.conf配置文件来开启AOF：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启AOF功能，默认是no</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># AOF文件的名称</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">&quot;appendonly.aof&quot;</span></span><br></pre></td></tr></table></figure><p>AOF的命令记录的频率也可以通过redis.conf文件来配：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示每执行一次写命令，立即记录到AOF文件</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">always </span></span><br><span class="line"><span class="comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">everysec </span></span><br><span class="line"><span class="comment"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">no</span></span><br></pre></td></tr></table></figure><p>三种策略对比：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-18-32-image-20210725151654046-47973f.png" alt="image-20210725151654046"></p><h3 id="1-2-3-AOF文件重写"><a href="#1-2-3-AOF文件重写" class="headerlink" title="1.2.3.AOF文件重写"></a>1.2.3.AOF文件重写</h3><p>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-18-34-image-20210725151729118-b8a839.png" alt="image-20210725151729118"></p><p>如图，AOF原本有三个命令，但是<code>set num 123 和 set num 666</code>都是对num的操作，第二次会覆盖第一次的值，因此第一个命令记录下来没有意义。</p><p>所以重写命令后，AOF文件内容就是：<code>mset name jack num 666</code></p><p>Redis也会在触发阈值时自动去重写AOF文件。阈值也可以在redis.conf中配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AOF文件比上次文件 增长超过多少百分比则触发重写</span></span><br><span class="line"><span class="attr">auto-aof-rewrite-percentage</span> <span class="string">100</span></span><br><span class="line"><span class="comment"># AOF文件体积最小多大以上才触发重写 </span></span><br><span class="line"><span class="attr">auto-aof-rewrite-min-size</span> <span class="string">64mb </span></span><br></pre></td></tr></table></figure><h2 id="1-3-RDB与AOF对比"><a href="#1-3-RDB与AOF对比" class="headerlink" title="1.3.RDB与AOF对比"></a>1.3.RDB与AOF对比</h2><p>RDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会<strong>结合</strong>两者来使用。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/18/16-21-35-image-20210725151940515-bd9657.png" alt="image-20210725151940515"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> Redis </tag>
            
            <tag> 数据持久化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAMQP</title>
      <link href="/2024/07/17/SpringAMQP/"/>
      <url>/2024/07/17/SpringAMQP/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h2><p>SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p><p>SpringAmqp的官方地址：<a href="https://spring.io/projects/spring-amqp">https://spring.io/projects/spring-amqp</a></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-58-53-image-20210717164024967-f20fae.png" alt="image-20210717164024967"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-58-55-image-20210717164038678-fbe674.png" alt="image-20210717164038678"></p><p>SpringAMQP提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息</li></ul><h2 id="3-1-Basic-Queue-简单队列模型"><a href="#3-1-Basic-Queue-简单队列模型" class="headerlink" title="3.1.Basic Queue 简单队列模型"></a>3.1.Basic Queue 简单队列模型</h2><p>在父工程mq-demo中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-1-消息发送"><a href="#3-1-1-消息发送" class="headerlink" title="3.1.1.消息发送"></a>3.1.1.消息发送</h3><p>首先配置MQ地址，在publisher服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-消息接收"><a href="#3-1-2-消息接收" class="headerlink" title="3.1.2.消息接收"></a>3.1.2.消息接收</h3><p>首先配置MQ地址，在consumer服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在consumer服务的<code>cn.itcast.mq.listener</code>包中新建一个类SpringRabbitListener，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-测试"><a href="#3-1-3-测试" class="headerlink" title="3.1.3.测试"></a>3.1.3.测试</h3><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息</p><h2 id="3-2-WorkQueue"><a href="#3-2-WorkQueue" class="headerlink" title="3.2.WorkQueue"></a>3.2.WorkQueue</h2><p>Work queues，也被称为（Task queues），任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-03-image-20210717164238910-4b9c9c.png" alt="image-20210717164238910"></p><p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p><p>此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。</p><h3 id="3-2-1-消息发送"><a href="#3-2-1-消息发送" class="headerlink" title="3.2.1.消息发送"></a>3.2.1.消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。</p><p>在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * workQueue</span></span><br><span class="line"><span class="comment">     * 向队列中不停发送消息，模拟消息堆积。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, message_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-消息接收"><a href="#3-2-2-消息接收" class="headerlink" title="3.2.2.消息接收"></a>3.2.2.消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这个消费者sleep了1000秒，模拟任务耗时。</p><h3 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3.测试"></a>3.2.3.测试</h3><p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。</p><p>可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。</p><p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。这样显然是有问题的。</p><h3 id="3-2-4-能者多劳"><a href="#3-2-4-能者多劳" class="headerlink" title="3.2.4.能者多劳"></a>3.2.4.能者多劳</h3><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure><h3 id="3-2-5-总结"><a href="#3-2-5-总结" class="headerlink" title="3.2.5.总结"></a>3.2.5.总结</h3><p>Work模型的使用：</p><ul><li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li><li>通过设置prefetch来控制消费者预取的消息数量</li></ul><h2 id="3-3-发布-订阅"><a href="#3-3-发布-订阅" class="headerlink" title="3.3.发布&#x2F;订阅"></a>3.3.发布&#x2F;订阅</h2><p>发布订阅的模型如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-10-image-20210717165309625-7c61c3.png" alt="image-20210717165309625"></p><p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li><li>Consumer：消费者，与以前一样，订阅队列，没有变化</li><li>Queue：消息队列也与以前一样，接收消息、缓存消息。</li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="3-4-Fanout"><a href="#3-4-Fanout" class="headerlink" title="3.4.Fanout"></a>3.4.Fanout</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-13-image-20210717165438225-6d9e2e.png" alt="image-20210717165438225"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个队列</li><li>2）  每个队列都要绑定到Exchange（交换机）</li><li>3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li><li>4）  交换机把消息发送给绑定过的所有队列</li><li>5）  订阅队列的消费者都能拿到消息</li></ul><p>我们的计划是这样的：</p><ul><li>创建一个交换机 itcast.fanout，类型是Fanout</li><li>创建两个队列fanout.queue1和fanout.queue2，绑定到交换机itcast.fanout</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-15-image-20210717165509466-437c09.png" alt="image-20210717165509466"></p><h3 id="3-4-1-声明队列和交换机"><a href="#3-4-1-声明队列和交换机" class="headerlink" title="3.4.1.声明队列和交换机"></a>3.4.1.声明队列和交换机</h3><p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-18-image-20210717165552676-a6c3b0.png" alt="image-20210717165552676"></p><p>在consumer中创建一个类，声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;itcast.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-消息发送"><a href="#3-4-2-消息发送" class="headerlink" title="3.4.2.消息发送"></a>3.4.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, everyone!&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-消息接收"><a href="#3-4-3-消息接收" class="headerlink" title="3.4.3.消息接收"></a>3.4.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-总结"><a href="#3-4-4-总结" class="headerlink" title="3.4.4.总结"></a>3.4.4.总结</h3><p>交换机的作用是什么？</p><ul><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><p>声明队列、交换机、绑定关系的Bean是什么？</p><ul><li>Queue</li><li>FanoutExchange</li><li>Binding</li></ul><h2 id="3-5-Direct"><a href="#3-5-Direct" class="headerlink" title="3.5.Direct"></a>3.5.Direct</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-22-image-20210717170041447-378128.png" alt="image-20210717170041447"></p><p> 在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p><strong>案例需求如下</strong>：</p><ol><li><p>利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</p></li><li><p>在publisher中编写测试方法，向itcast. direct发送消息</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-25-image-20210717170223317-ee3213.png" alt="image-20210717170223317"></p><h3 id="3-5-1-基于注解声明队列和交换机"><a href="#3-5-1-基于注解声明队列和交换机" class="headerlink" title="3.5.1.基于注解声明队列和交换机"></a>3.5.1.基于注解声明队列和交换机</h3><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p><p>在consumer的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-消息发送"><a href="#3-5-2-消息发送" class="headerlink" title="3.5.2.消息发送"></a>3.5.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改发送消息中的：“red” 为 blue、yellow再试试</li></ul><h3 id="3-5-3-总结"><a href="#3-5-3-总结" class="headerlink" title="3.5.3.总结"></a>3.5.3.总结</h3><p>描述下Direct交换机与Fanout交换机的差异？</p><ul><li>Fanout交换机将消息路由给每一个与之绑定的队列</li><li>Direct交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li></ul><p>基于@RabbitListener注解声明队列和交换机有哪些常见注解？</p><ul><li>@Queue</li><li>@Exchange</li></ul><h2 id="3-6-Topic"><a href="#3-6-Topic" class="headerlink" title="3.6.Topic"></a>3.6.Topic</h2><h3 id="3-6-1-说明"><a href="#3-6-1-说明" class="headerlink" title="3.6.1.说明"></a>3.6.1.说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p><p><code>item.*</code>：只能匹配<code>item.spu</code></p><p>​     </p><p>图示：</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-36-image-20210717170705380-b23e7d.png" alt="image-20210717170705380"></p><p>解释：</p><ul><li>Queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到。包括china.news和china.weather</li><li>Queue2：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括china.news和japan.news</li></ul><p>案例需求：</p><p>实现思路如下：</p><ol><li><p>并利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2</p></li><li><p>在publisher中编写测试方法，向itcast. topic发送消息</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-41-image-20210717170829229-d35599.png" alt="image-20210717170829229"></p><h3 id="3-6-2-消息发送"><a href="#3-6-2-消息发送" class="headerlink" title="3.6.2.消息发送"></a>3.6.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * topicExchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-3-消息接收"><a href="#3-6-3-消息接收" class="headerlink" title="3.6.3.消息接收"></a>3.6.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改发送的routingKey再试试呢</li></ul><h3 id="3-6-4-总结"><a href="#3-6-4-总结" class="headerlink" title="3.6.4.总结"></a>3.6.4.总结</h3><p>描述下Direct交换机与Topic交换机的差异？</p><ul><li>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</li><li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li><li><code>#</code>：代表0个或多个词</li><li><code>*</code>：代表1个词</li></ul><h2 id="3-7-消息转换器"><a href="#3-7-消息转换器" class="headerlink" title="3.7.消息转换器"></a>3.7.消息转换器</h2><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-45-image-20200525170410401-005312.png" alt="image-20200525170410401"></p><p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>我们来测试一下。</p><h3 id="3-7-1-测试默认转换器"><a href="#3-7-1-测试默认转换器" class="headerlink" title="3.7.1.测试默认转换器"></a>3.7.1.测试默认转换器</h3><p>我们修改消息发送的代码，发送一个Map对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;simple.queue&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>停止consumer服务</p><p>发送消息后查看控制台：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-48-image-20210422232835363-2395a9.png" alt="image-20210422232835363"></p><h3 id="3-7-2-配置JSON转换器"><a href="#3-7-2-配置JSON转换器" class="headerlink" title="3.7.2.配置JSON转换器"></a>3.7.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p><p>在publisher和consumer两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置消息转换器。</p><p>在启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>每个工程启动类均增加</p></li><li><p>创建一个新的queue：object.queue</p><ul><li>消息发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenObjectQueueMessage</span><span class="params">(Map&lt;String, Object&gt; obj)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者.......接收到对象消息：【&quot;</span> + obj + <span class="string">&quot;】&quot;</span> + LocalDateTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消息接收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenObjectQueueMessage</span><span class="params">(Map&lt;String, Object&gt; obj)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;消费者.......接收到对象消息：【&quot;</span> + obj + <span class="string">&quot;】&quot;</span> + LocalDateTime.now());</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> SpringAMQP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2024/07/17/RabbitMQ/"/>
      <url>/2024/07/17/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="1-初识MQ"><a href="#1-初识MQ" class="headerlink" title="1.初识MQ"></a>1.初识MQ</h1><h2 id="1-1-同步和异步通讯"><a href="#1-1-同步和异步通讯" class="headerlink" title="1.1.同步和异步通讯"></a>1.1.同步和异步通讯</h2><p>微服务间通讯有同步和异步两种方式：</p><p>同步通讯：就像打电话，需要实时响应。</p><p>异步通讯：就像发邮件，不需要马上回复。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-26-58-image-20210717161939695-d014ab.png" alt="image-20210717161939695"></p><p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。</p><h3 id="1-1-1-同步通讯"><a href="#1-1-1-同步通讯" class="headerlink" title="1.1.1.同步通讯"></a>1.1.1.同步通讯</h3><p>我们之前学习的Feign调用就属于同步方式，虽然调用可以实时得到结果，但存在下面的问题：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-27-10-image-20210717162004285-c96323.png" alt="image-20210717162004285"></p><p>总结：</p><p>同步调用的优点：</p><ul><li>时效性较强，可以立即得到结果</li></ul><p>同步调用的问题：</p><ul><li>耦合度高</li><li>性能和吞吐能力下降</li><li>有额外的资源消耗</li><li>有级联失败问题</li></ul><h3 id="1-1-2-异步通讯"><a href="#1-1-2-异步通讯" class="headerlink" title="1.1.2.异步通讯"></a>1.1.2.异步通讯</h3><p>异步调用则可以避免上述问题：</p><p>我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。</p><p>在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。</p><p>订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p><p>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-33-56-image-20210422095356088-542006.png" alt="image-20210422095356088"></p><p>Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p><p>好处：</p><ul><li><p>吞吐量提升：无需等待订阅者处理完成，响应更快速</p></li><li><p>故障隔离：服务没有直接调用，不存在级联失败问题</p></li><li><p>调用间没有阻塞，不会造成无效的资源占用</p></li><li><p>耦合度极低，每个服务都可以灵活插拔，可替换</p></li><li><p>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</p></li></ul><p>缺点：</p><ul><li>架构复杂了，业务没有明显的流程线，不好管理</li><li>需要依赖于Broker的可靠、安全、性能</li></ul><p>好在现在开源软件或云平台上 Broker 的软件是非常成熟的，比较常见的一种就是我们今天要学习的MQ技术。</p><h2 id="1-2-技术对比："><a href="#1-2-技术对比：" class="headerlink" title="1.2.技术对比："></a>1.2.技术对比：</h2><p>MQ，中文是消息队列（MessageQueue），字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。</p><p>比较常见的MQ实现：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>几种常见MQ的对比：</p><table><thead><tr><th></th><th><strong>RabbitMQ</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>公司&#x2F;社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP，XMPP，SMTP，STOMP</td><td>OpenWire,STOMP，REST,XMPP,AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p><p>追求可靠性：RabbitMQ、RocketMQ</p><p>追求吞吐能力：RocketMQ、Kafka</p><p>追求消息低延迟：RabbitMQ、Kafka</p><h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h1><h2 id="2-1-安装RabbitMQ"><a href="#2-1-安装RabbitMQ" class="headerlink" title="2.1.安装RabbitMQ"></a>2.1.安装RabbitMQ</h2><blockquote><h1 id="RabbitMQ部署指南"><a href="#RabbitMQ部署指南" class="headerlink" title="RabbitMQ部署指南"></a>RabbitMQ部署指南</h1><h1 id="1-单机部署"><a href="#1-单机部署" class="headerlink" title="1.单机部署"></a>1.单机部署</h1><p>我们在Centos7虚拟机中使用Docker来安装。</p><h2 id="1-1-下载镜像"><a href="#1-1-下载镜像" class="headerlink" title="1.1.下载镜像"></a>1.1.下载镜像</h2><p>方式一：在线拉取</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:3.8-management</span><br></pre></td></tr></table></figure><p>方式二：从本地加载（x）</p><p>在课前资料已经提供了镜像包：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-26-08-image-20210423191210349-8a68a5.png" alt="image-20210423191210349"> </p><p>上传到虚拟机中后，使用命令加载镜像即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i mq.tar</span><br></pre></td></tr></table></figure><h2 id="1-2-安装MQ"><a href="#1-2-安装MQ" class="headerlink" title="1.2.安装MQ"></a>1.2.安装MQ</h2><p>执行下面的命令来运行MQ容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=itcast \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123321 \</span><br><span class="line"> -v mq-plugins:/plugins \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure></blockquote><p>MQ的基本结构：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-54-55-image-20210717162752376-fb7887.png" alt="image-20210717162752376"></p><p>RabbitMQ中的一些角色：</p><ul><li>publisher：生产者</li><li>consumer：消费者</li><li>exchange个：交换机，负责消息路由</li><li>queue：队列，存储消息</li><li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离</li></ul><h2 id="2-2-RabbitMQ消息模型"><a href="#2-2-RabbitMQ消息模型" class="headerlink" title="2.2.RabbitMQ消息模型"></a>2.2.RabbitMQ消息模型</h2><p>RabbitMQ官方提供了5个不同的Demo示例，对应了不同的消息模型：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/18-00-01-image-20210717163332646-6a2607.png" alt="image-20210717163332646"></p><h2 id="2-3-导入Demo工程"><a href="#2-3-导入Demo工程" class="headerlink" title="2.3.导入Demo工程"></a>2.3.导入Demo工程</h2><blockquote><p>demo下载地址：<a href="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJnUktxRjNPZTAzSl9fbGhjP2U9WWpRdkp6.zip">https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJnUktxRjNPZTAzSl9fbGhjP2U9WWpRdkp6.zip</a></p></blockquote><p>课前资料提供了一个Demo工程，mq-demo:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-58-25-image-20210717163253264-6d641c.png" alt="image-20210717163253264"></p><p>导入后可以看到结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-58-28-image-20210717163604330-e46ee8.png" alt="image-20210717163604330"></p><p>包括三部分：</p><ul><li>mq-demo：父工程，管理项目依赖</li><li>publisher：消息的发送者</li><li>consumer：消息的消费者</li></ul><h2 id="2-4-入门案例"><a href="#2-4-入门案例" class="headerlink" title="2.4.入门案例"></a>2.4.入门案例</h2><p>简单队列模式的模型图：</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-58-35-image-20210717163434647-8697dc.png" alt="image-20210717163434647"></p><p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><h3 id="2-4-1-publisher实现"><a href="#2-4-1-publisher实现" class="headerlink" title="2.4.1.publisher实现"></a>2.4.1.publisher实现</h3><p>思路：</p><ul><li>建立连接</li><li>创建Channel</li><li>声明队列</li><li>发送消息</li><li>关闭连接和channel</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, rabbitmq!&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息成功：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-consumer实现"><a href="#2-4-2-consumer实现" class="headerlink" title="2.4.2.consumer实现"></a>2.4.2.consumer实现</h3><p>代码思路：</p><ul><li>建立连接</li><li>创建Channel</li><li>声明队列</li><li>订阅消息</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.订阅消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span><br><span class="line"><span class="params">                                       AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">// 5.处理消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5.总结"></a>2.5.总结</h2><p>基本消息队列的消息发送流程：</p><ol><li><p>建立connection</p></li><li><p>创建channel</p></li><li><p>利用channel声明队列</p></li><li><p>利用channel向队列发送消息</p></li></ol><p>基本消息队列的消息接收流程：</p><ol><li><p>建立connection</p></li><li><p>创建channel</p></li><li><p>利用channel声明队列</p></li><li><p>定义consumer的消费行为handleDelivery()</p></li><li><p>利用channel将消费者与队列绑定</p></li></ol><h1 id="3-SpringAMQP"><a href="#3-SpringAMQP" class="headerlink" title="3.SpringAMQP"></a>3.SpringAMQP</h1><p>SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p><p>SpringAmqp的官方地址：<a href="https://spring.io/projects/spring-amqp">https://spring.io/projects/spring-amqp</a></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-58-53-image-20210717164024967-f20fae.png" alt="image-20210717164024967"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-58-55-image-20210717164038678-fbe674.png" alt="image-20210717164038678"></p><p>SpringAMQP提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息</li></ul><h2 id="3-1-Basic-Queue-简单队列模型"><a href="#3-1-Basic-Queue-简单队列模型" class="headerlink" title="3.1.Basic Queue 简单队列模型"></a>3.1.Basic Queue 简单队列模型</h2><p>在父工程mq-demo中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-1-消息发送"><a href="#3-1-1-消息发送" class="headerlink" title="3.1.1.消息发送"></a>3.1.1.消息发送</h3><p>首先配置MQ地址，在publisher服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-消息接收"><a href="#3-1-2-消息接收" class="headerlink" title="3.1.2.消息接收"></a>3.1.2.消息接收</h3><p>首先配置MQ地址，在consumer服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在consumer服务的<code>cn.itcast.mq.listener</code>包中新建一个类SpringRabbitListener，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-测试"><a href="#3-1-3-测试" class="headerlink" title="3.1.3.测试"></a>3.1.3.测试</h3><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息</p><h2 id="3-2-WorkQueue"><a href="#3-2-WorkQueue" class="headerlink" title="3.2.WorkQueue"></a>3.2.WorkQueue</h2><p>Work queues，也被称为（Task queues），任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-03-image-20210717164238910-4b9c9c.png" alt="image-20210717164238910"></p><p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p><p>此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。</p><h3 id="3-2-1-消息发送"><a href="#3-2-1-消息发送" class="headerlink" title="3.2.1.消息发送"></a>3.2.1.消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。</p><p>在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * workQueue</span></span><br><span class="line"><span class="comment">     * 向队列中不停发送消息，模拟消息堆积。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, message_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-消息接收"><a href="#3-2-2-消息接收" class="headerlink" title="3.2.2.消息接收"></a>3.2.2.消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这个消费者sleep了1000秒，模拟任务耗时。</p><h3 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3.测试"></a>3.2.3.测试</h3><p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。</p><p>可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。</p><p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。这样显然是有问题的。</p><h3 id="3-2-4-能者多劳"><a href="#3-2-4-能者多劳" class="headerlink" title="3.2.4.能者多劳"></a>3.2.4.能者多劳</h3><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure><h3 id="3-2-5-总结"><a href="#3-2-5-总结" class="headerlink" title="3.2.5.总结"></a>3.2.5.总结</h3><p>Work模型的使用：</p><ul><li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li><li>通过设置prefetch来控制消费者预取的消息数量</li></ul><h2 id="3-3-发布-订阅"><a href="#3-3-发布-订阅" class="headerlink" title="3.3.发布&#x2F;订阅"></a>3.3.发布&#x2F;订阅</h2><p>发布订阅的模型如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-10-image-20210717165309625-7c61c3.png" alt="image-20210717165309625"></p><p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li><li>Consumer：消费者，与以前一样，订阅队列，没有变化</li><li>Queue：消息队列也与以前一样，接收消息、缓存消息。</li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="3-4-Fanout"><a href="#3-4-Fanout" class="headerlink" title="3.4.Fanout"></a>3.4.Fanout</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-13-image-20210717165438225-6d9e2e.png" alt="image-20210717165438225"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个队列</li><li>2）  每个队列都要绑定到Exchange（交换机）</li><li>3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li><li>4）  交换机把消息发送给绑定过的所有队列</li><li>5）  订阅队列的消费者都能拿到消息</li></ul><p>我们的计划是这样的：</p><ul><li>创建一个交换机 itcast.fanout，类型是Fanout</li><li>创建两个队列fanout.queue1和fanout.queue2，绑定到交换机itcast.fanout</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-15-image-20210717165509466-437c09.png" alt="image-20210717165509466"></p><h3 id="3-4-1-声明队列和交换机"><a href="#3-4-1-声明队列和交换机" class="headerlink" title="3.4.1.声明队列和交换机"></a>3.4.1.声明队列和交换机</h3><p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-18-image-20210717165552676-a6c3b0.png" alt="image-20210717165552676"></p><p>在consumer中创建一个类，声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;itcast.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-消息发送"><a href="#3-4-2-消息发送" class="headerlink" title="3.4.2.消息发送"></a>3.4.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, everyone!&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-消息接收"><a href="#3-4-3-消息接收" class="headerlink" title="3.4.3.消息接收"></a>3.4.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-总结"><a href="#3-4-4-总结" class="headerlink" title="3.4.4.总结"></a>3.4.4.总结</h3><p>交换机的作用是什么？</p><ul><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><p>声明队列、交换机、绑定关系的Bean是什么？</p><ul><li>Queue</li><li>FanoutExchange</li><li>Binding</li></ul><h2 id="3-5-Direct"><a href="#3-5-Direct" class="headerlink" title="3.5.Direct"></a>3.5.Direct</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-22-image-20210717170041447-378128.png" alt="image-20210717170041447"></p><p> 在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p><strong>案例需求如下</strong>：</p><ol><li><p>利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</p></li><li><p>在publisher中编写测试方法，向itcast. direct发送消息</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-25-image-20210717170223317-ee3213.png" alt="image-20210717170223317"></p><h3 id="3-5-1-基于注解声明队列和交换机"><a href="#3-5-1-基于注解声明队列和交换机" class="headerlink" title="3.5.1.基于注解声明队列和交换机"></a>3.5.1.基于注解声明队列和交换机</h3><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p><p>在consumer的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-消息发送"><a href="#3-5-2-消息发送" class="headerlink" title="3.5.2.消息发送"></a>3.5.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改发送消息中的：“red” 为 blue、yellow再试试</li></ul><h3 id="3-5-3-总结"><a href="#3-5-3-总结" class="headerlink" title="3.5.3.总结"></a>3.5.3.总结</h3><p>描述下Direct交换机与Fanout交换机的差异？</p><ul><li>Fanout交换机将消息路由给每一个与之绑定的队列</li><li>Direct交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li></ul><p>基于@RabbitListener注解声明队列和交换机有哪些常见注解？</p><ul><li>@Queue</li><li>@Exchange</li></ul><h2 id="3-6-Topic"><a href="#3-6-Topic" class="headerlink" title="3.6.Topic"></a>3.6.Topic</h2><h3 id="3-6-1-说明"><a href="#3-6-1-说明" class="headerlink" title="3.6.1.说明"></a>3.6.1.说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p><p><code>item.*</code>：只能匹配<code>item.spu</code></p><p>​     </p><p>图示：</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-36-image-20210717170705380-b23e7d.png" alt="image-20210717170705380"></p><p>解释：</p><ul><li>Queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到。包括china.news和china.weather</li><li>Queue2：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括china.news和japan.news</li></ul><p>案例需求：</p><p>实现思路如下：</p><ol><li><p>并利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2</p></li><li><p>在publisher中编写测试方法，向itcast. topic发送消息</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-41-image-20210717170829229-d35599.png" alt="image-20210717170829229"></p><h3 id="3-6-2-消息发送"><a href="#3-6-2-消息发送" class="headerlink" title="3.6.2.消息发送"></a>3.6.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * topicExchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-3-消息接收"><a href="#3-6-3-消息接收" class="headerlink" title="3.6.3.消息接收"></a>3.6.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改发送的routingKey再试试呢</li></ul><h3 id="3-6-4-总结"><a href="#3-6-4-总结" class="headerlink" title="3.6.4.总结"></a>3.6.4.总结</h3><p>描述下Direct交换机与Topic交换机的差异？</p><ul><li>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</li><li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li><li><code>#</code>：代表0个或多个词</li><li><code>*</code>：代表1个词</li></ul><h2 id="3-7-消息转换器"><a href="#3-7-消息转换器" class="headerlink" title="3.7.消息转换器"></a>3.7.消息转换器</h2><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-45-image-20200525170410401-005312.png" alt="image-20200525170410401"></p><p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>我们来测试一下。</p><h3 id="3-7-1-测试默认转换器"><a href="#3-7-1-测试默认转换器" class="headerlink" title="3.7.1.测试默认转换器"></a>3.7.1.测试默认转换器</h3><p>我们修改消息发送的代码，发送一个Map对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;simple.queue&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>停止consumer服务</p><p>发送消息后查看控制台：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-59-48-image-20210422232835363-2395a9.png" alt="image-20210422232835363"></p><h3 id="3-7-2-配置JSON转换器"><a href="#3-7-2-配置JSON转换器" class="headerlink" title="3.7.2.配置JSON转换器"></a>3.7.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p><p>在publisher和consumer两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置消息转换器。</p><p>在启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>每个工程启动类均增加</p></li><li><p>创建一个新的queue：object.queue</p><ul><li>消息发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenObjectQueueMessage</span><span class="params">(Map&lt;String, Object&gt; obj)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者.......接收到对象消息：【&quot;</span> + obj + <span class="string">&quot;】&quot;</span> + LocalDateTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消息接收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenObjectQueueMessage</span><span class="params">(Map&lt;String, Object&gt; obj)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;消费者.......接收到对象消息：【&quot;</span> + obj + <span class="string">&quot;】&quot;</span> + LocalDateTime.now());</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign远程调用原理</title>
      <link href="/2024/07/17/Feign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8E%9F%E7%90%86/"/>
      <url>/2024/07/17/Feign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Feign远程调用原理-同步"><a href="#Feign远程调用原理-同步" class="headerlink" title="Feign远程调用原理(同步)"></a>Feign远程调用原理(同步)</h1><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-44-53-6271376-285b0cf66bc1b24c-4410bc.webp" alt="img"></p><h2 id="1、Feign介绍"><a href="#1、Feign介绍" class="headerlink" title="1、Feign介绍"></a>1、Feign介绍</h2><p>Feign是一个http请求调用的轻量级框架，可以以Java接口注解的方式调用Http请求。Spring Cloud引入 Feign并且集成了Ribbon实现客户端负载均衡调用。</p><h4 id="Feign解决了什么问题？"><a href="#Feign解决了什么问题？" class="headerlink" title="Feign解决了什么问题？"></a>Feign解决了什么问题？</h4><p>封装了Http调用流程，更适合面向接口化的变成习惯</p><h2 id="2、Feign工作原理"><a href="#2、Feign工作原理" class="headerlink" title="2、Feign工作原理"></a>2、Feign工作原理</h2><h4 id="Feign远程调用流程图"><a href="#Feign远程调用流程图" class="headerlink" title="Feign远程调用流程图"></a>Feign远程调用流程图</h4><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-47-43-image-20240717174743907-1606ad.png" alt="image-20240717174743907"></p><h4 id="1-基于面向接口的动态代理方式生成实现类"><a href="#1-基于面向接口的动态代理方式生成实现类" class="headerlink" title="(1) 基于面向接口的动态代理方式生成实现类"></a>(1) 基于面向接口的动态代理方式生成实现类</h4><p>在使用feign 时，会定义对应的接口类，在接口类上使用Http相关的注解，标识HTTP请求参数信息</p><p>在Feign 底层，通过基于面向接口的动态代理方式生成实现类，将请求调用委托到动态代理实现类，基本原理如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-47-59-image-20240717174759623-c872b4.png" alt="image-20240717174759623"></p><h4 id="2-根据Contract协议规则，解析接口类的注解信息，解析成内部表现："><a href="#2-根据Contract协议规则，解析接口类的注解信息，解析成内部表现：" class="headerlink" title="(2) 根据Contract协议规则，解析接口类的注解信息，解析成内部表现："></a>(2) 根据Contract协议规则，解析接口类的注解信息，解析成内部表现：</h4><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-48-13-image-20240717174813421-295d43.png" alt="image-20240717174813421"></p><h4 id="3-基于-RequestBean，动态生成Request"><a href="#3-基于-RequestBean，动态生成Request" class="headerlink" title="(3) 基于 RequestBean，动态生成Request"></a>(3) 基于 RequestBean，动态生成Request</h4><p>根据传入的Bean对象和注解信息，从中提取出相应的值，来构造Http Request 对象</p><h4 id="4-使用Encoder-将Bean转换成-Http报文正文（消息解析和转码逻辑）"><a href="#4-使用Encoder-将Bean转换成-Http报文正文（消息解析和转码逻辑）" class="headerlink" title="(4) 使用Encoder 将Bean转换成 Http报文正文（消息解析和转码逻辑）"></a>(4) 使用Encoder 将Bean转换成 Http报文正文（消息解析和转码逻辑）</h4><p>Feign 最终会将请求转换成Http 消息发送出去，传入的请求对象最终会解析成消息体，如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-48-26-17-48-13-image-20240717174813421-295d43-ac7c01.png"></p><h4 id="5-拦截器负责对请求和返回进行装饰处理"><a href="#5-拦截器负责对请求和返回进行装饰处理" class="headerlink" title="(5) 拦截器负责对请求和返回进行装饰处理"></a>(5) 拦截器负责对请求和返回进行装饰处理</h4><p>在请求转换的过程中，Feign 抽象出来了拦截器接口，用于用户自定义对请求的操作，比如，如果希望Http消息传递过程中被压缩，可以定义一个请求拦截器。</p><h4 id="6-日志记录"><a href="#6-日志记录" class="headerlink" title="(6) 日志记录"></a>(6) 日志记录</h4><h4 id="7-基于重试器发送HTTP请求"><a href="#7-基于重试器发送HTTP请求" class="headerlink" title="(7) 基于重试器发送HTTP请求"></a>(7) 基于重试器发送HTTP请求</h4><p>Feign 内置了一个重试器，当HTTP请求出现IO异常时，Feign会有一个最大尝试次数发送请求</p><h4 id="8-发送Http请求"><a href="#8-发送Http请求" class="headerlink" title="(8) 发送Http请求"></a>(8) 发送Http请求</h4><p>Feign 真正发送HTTP请求是委托给 feign.Client 来做的。</p><p>Feign 默认底层通过JDK 的 java.net.HttpURLConnection 实现了feign.Client接口类,<strong>在每次发送请求的时候，都会创建新的HttpURLConnection 链接</strong>，这也就是为什么默认情况下Feign的性能很差的原因。可以通过拓展该接口，使用Apache HttpClient 或者OkHttp3等基于连接池的高性能Http客户端。</p><p><strong>Feign 整体框架非常小巧，在处理请求转换和消息解析的过程中，基本上没什么时间消耗。真正影响性能的，是处理Http请求的环节。</strong></p><h2 id="3、Feign优化"><a href="#3、Feign优化" class="headerlink" title="3、Feign优化"></a>3、Feign优化</h2><h3 id="（1）GZIP压缩"><a href="#（1）GZIP压缩" class="headerlink" title="（1）GZIP压缩"></a>（1）GZIP压缩</h3><p>gzip是一种数据格式，采用deflate算法压缩数据。当Gzip压缩到一个纯文本数据时，可以减少70％以上的数据大小。</p><p>gzip作用：网络数据经过压缩后实际上降低了网络传输的字节数，最明显的好处就是可以加快网页加载的速度。</p><p>只配置Feign请求-应答的GZIP压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># feign gzip</span></span><br><span class="line"><span class="comment"># 局部配置。只配置feign技术相关的http请求-应答中的gzip压缩。</span></span><br><span class="line"><span class="comment"># 配置的是application client和application service之间通讯是否使用gzip做数据压缩。</span></span><br><span class="line"><span class="comment"># 和浏览器到application client之间的通讯无关。</span></span><br><span class="line"><span class="comment"># 开启feign请求时的压缩， application client -&gt; application service</span></span><br><span class="line">feign.compression.request.enabled=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 开启feign技术响应时的压缩，  application service -&gt; application client</span></span><br><span class="line">feign.compression.response.enabled=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置可以压缩的请求/响应的类型。</span></span><br><span class="line">feign.compression.request.mime-types=text/xml,application/xml,application/json</span><br><span class="line"><span class="comment"># 当请求的数据容量达到多少的时候，使用压缩。默认是2048字节。</span></span><br><span class="line">feign.compression.request.min-request-size=512</span><br></pre></td></tr></table></figure><p>配置全局的GZIP压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spring boot gzip</span></span><br><span class="line"><span class="comment"># 开启spring boot中的gzip压缩。就是针对和当前应用所有相关的http请求-应答的gzip压缩。</span></span><br><span class="line">server.compression.enabled=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 哪些客户端发出的请求不压缩，默认是不限制</span></span><br><span class="line">server.compression.excluded-user-agents=gozilla,traviata</span><br><span class="line"><span class="comment"># 配置想压缩的请求/应答数据类型，默认是 text/html,text/xml,text/plain</span></span><br><span class="line">server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain</span><br><span class="line"><span class="comment"># 执行压缩的阈值，默认为2048</span></span><br><span class="line">server.compression.min-response-size=512</span><br></pre></td></tr></table></figure><h3 id="（2）替换为HttpClient客户端（使用HTTP连接池提供性能）"><a href="#（2）替换为HttpClient客户端（使用HTTP连接池提供性能）" class="headerlink" title="（2）替换为HttpClient客户端（使用HTTP连接池提供性能）"></a>（2）替换为HttpClient客户端（使用HTTP连接池提供性能）</h3><p>Feign的HTTP客户端支持3种框架，分别是；HttpURLConnection、HttpClient、OKHttp。Feign中默认使用HttpURLConnection。</p><ul><li>HttpURLConnection是JDK自带的HTTP客户端技术，并不支持连接池，如果要实现连接池的机制，还需要自己来管理连接对象。对于网络请求这种底层相对复杂的操作，如果有可用的其他方案，也没有必要自己去管理连接对象。</li><li>Apache提供的<strong>HttpClient</strong>框架相比传统JDK自带的HttpURLConnection，它封装了访问http的请求头，参数，内容体，响应等等；它不仅使客户端发送HTTP请求变得容易，而且也方便了开发人员测试接口（基于Http协议的），即提高了开发的效率，也方便提高代码的健壮性；另外高并发大量的请求网络的时候，<strong>还是用“HTTP连接池”提升吞吐量</strong>。</li><li>OKHttp是一个处理网络请求的开源项目,是安卓端最火热的轻量级框架。<strong>OKHttp拥有共享Socket,减少对服务器的请求次数，通过连接池,减少了请求延迟等技术特点</strong>。</li></ul><p>本案例中，通过替换Feign底层的HTTP客户端实现为HttpClient，来提升Feign的通讯性能。</p><p>修改全局配置文件：开启feign技术对底层httpclient的依赖。 切换底层实现技术。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feign.httpclient.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入门篇</title>
      <link href="/2024/07/17/Redis%E5%85%A5%E9%97%A8%E7%AF%87/"/>
      <url>/2024/07/17/Redis%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇Redis"><a href="#基础篇Redis" class="headerlink" title="基础篇Redis"></a>基础篇Redis</h1><h2 id="1-Redis简单介绍"><a href="#1-Redis简单介绍" class="headerlink" title="1.Redis简单介绍"></a>1.Redis简单介绍</h2><p>Redis是一种键值型的NoSql数据库，这里有两个关键字：</p><ul><li>键值型</li><li>NoSql</li></ul><p>其中<strong>键值型</strong>，是指Redis中存储的数据都是以key.value对的形式存储，而value的形式多种多样，可以是字符串.数值.甚至json：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-10-41-1652882668159-c47418.png" alt="1652882668159"></p><p>而NoSql则是相对于传统关系型数据库而言，有很大差异的一种数据库。</p><p>对于存储的数据，没有类似Mysql那么严格的约束，比如唯一性，是否可以为null等等，所以我们把这种松散结构的数据库，称之为NoSQL数据库。</p><h2 id="2-课程目录"><a href="#2-课程目录" class="headerlink" title="2.课程目录"></a>2.课程目录</h2><blockquote><ul><li>初始Redis</li><li>认识NoSQL</li><li>认识Redis</li><li>安装Redis</li><li>Redis常见命令</li><li>5种常见数据结构</li><li>通用命令</li><li>不同数据结构的操作命令</li><li>Redis的Java客户端</li><li>Jedis客户端</li><li>SpringDataRedis客户端</li></ul></blockquote><h2 id="3-初始Redis"><a href="#3-初始Redis" class="headerlink" title="3.初始Redis"></a>3.初始Redis</h2><h3 id="3-1-认识NoSQL"><a href="#3-1-认识NoSQL" class="headerlink" title="3.1.认识NoSQL"></a>3.1.认识NoSQL</h3><p><strong>NoSql</strong>可以翻译做Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是相对于传统关系型数据库而言，有很大差异的一种特殊的数据库，因此也称之为<strong>非关系型数据库</strong>。</p><h4 id="3-1-1-结构化与非结构化"><a href="#3-1-1-结构化与非结构化" class="headerlink" title="3.1.1.结构化与非结构化"></a>3.1.1.结构化与非结构化</h4><p>传统关系型数据库是结构化数据，每一张表都有严格的约束信息：字段名.字段数据类型.字段约束等等信息，插入的数据必须遵守这些约束：</p><p><img src="https://i.imgur.com/4tUgFo6.png"></p><p>而NoSql则对数据库格式没有严格约束，往往形式松散，自由。</p><p>可以是键值型：</p><p><img src="https://i.imgur.com/GdqOSsj.png"></p><p>也可以是文档型：</p><p><img src="https://i.imgur.com/zBBQfcc.png"></p><p>甚至可以是图格式：</p><p><img src="https://i.imgur.com/zBnKxWf.png"></p><h4 id="3-1-2-关联和非关联"><a href="#3-1-2-关联和非关联" class="headerlink" title="3.1.2.关联和非关联"></a>3.1.2.关联和非关联</h4><p>传统数据库的表与表之间往往存在关联，例如外键：</p><p><img src="https://i.imgur.com/tXYSl5x.png"></p><p>而非关系型数据库不存在关联关系，要维护关系要么靠代码中的业务逻辑，要么靠数据之间的耦合：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  id<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  name<span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  orders<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">       id<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       item<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"> id<span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> title<span class="punctuation">:</span> <span class="string">&quot;荣耀6&quot;</span><span class="punctuation">,</span> price<span class="punctuation">:</span> <span class="number">4999</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">       id<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       item<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"> id<span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> title<span class="punctuation">:</span> <span class="string">&quot;小米11&quot;</span><span class="punctuation">,</span> price<span class="punctuation">:</span> <span class="number">3999</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>此处要维护“张三”的订单与商品“荣耀”和“小米11”的关系，不得不冗余的将这两个商品保存在张三的订单文档中，不够优雅。还是建议用业务来维护关联关系。</p><h4 id="3-1-3-查询方式"><a href="#3-1-3-查询方式" class="headerlink" title="3.1.3.查询方式"></a>3.1.3.查询方式</h4><p>传统关系型数据库会基于Sql语句做查询，语法有统一标准；</p><p>而不同的非关系数据库查询语法差异极大，五花八门各种各样。</p><p><img src="https://i.imgur.com/AzaHOTF.png"></p><h4 id="3-1-4-事务"><a href="#3-1-4-事务" class="headerlink" title="3.1.4.事务"></a>3.1.4.事务</h4><p>传统关系型数据库能满足事务ACID的原则。</p><p><img src="https://i.imgur.com/J1MqOJM.png"></p><p>而非关系型数据库往往不支持事务，或者不能严格保证ACID的特性，只能实现基本的一致性。</p><h4 id="3-1-5-总结"><a href="#3-1-5-总结" class="headerlink" title="3.1.5.总结"></a>3.1.5.总结</h4><p>除了上述四点以外，在存储方式.扩展性.查询性能上关系型与非关系型也都有着显著差异，总结如下：</p><p><img src="https://i.imgur.com/kZP40dQ.png"></p><ul><li>存储方式<ul><li>关系型数据库基于磁盘进行存储，会有大量的磁盘IO，对性能有一定影响</li><li>非关系型数据库，他们的操作更多的是依赖于内存来操作，内存的读写速度会非常快，性能自然会好一些</li></ul></li></ul><ul><li>扩展性<ul><li>关系型数据库集群模式一般是主从，主从数据一致，起到数据备份的作用，称为垂直扩展。</li><li>非关系型数据库可以将数据拆分，存储在不同机器上，可以保存海量数据，解决内存大小有限的问题。称为水平扩展。</li><li>关系型数据库因为表之间存在关联关系，如果做水平扩展会给数据查询带来很多麻烦</li></ul></li></ul><h3 id="3-2-认识Redis"><a href="#3-2-认识Redis" class="headerlink" title="3.2.认识Redis"></a>3.2.认识Redis</h3><p>Redis诞生于2009年全称是<strong>Re</strong>mote  <strong>D</strong>ictionary <strong>S</strong>erver 远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p><p><strong>特征</strong>：</p><ul><li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存.IO多路复用.良好的编码）。</li><li>支持数据持久化</li><li>支持主从集群.分片集群</li><li>支持多语言客户端</li></ul><p><strong>作者</strong>：Antirez</p><p>Redis的官方网站地址：<a href="https://redis.io/">https://redis.io/</a></p><h3 id="3-3-安装Redis"><a href="#3-3-安装Redis" class="headerlink" title="3.3.安装Redis"></a>3.3.安装Redis</h3><p>大多数企业都是基于Linux服务器来部署项目，而且Redis官方也没有提供Windows版本的安装包。因此课程中我们会基于Linux系统来安装Redis.</p><p>此处选择的Linux版本为CentOS 7.</p><h4 id="3-3-1-依赖库"><a href="#3-3-1-依赖库" class="headerlink" title="3.3.1.依赖库"></a>3.3.1.依赖库</h4><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure><h4 id="3-3-2-上传安装包并解压"><a href="#3-3-2-上传安装包并解压" class="headerlink" title="3.3.2.上传安装包并解压"></a>3.3.2.上传安装包并解压</h4><blockquote><p>redis-6.2.6.tar.gz下载地址：<a href="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJnUkg4UkNxSzVHR3VWYUVKP2U9aUpMb3p4.tar.gz">https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJnUkg4UkNxSzVHR3VWYUVKP2U9aUpMb3p4.tar.gz</a></p></blockquote><p>然后将课前资料提供的Redis安装包上传到虚拟机的任意目录：</p><p><img src="https://i.imgur.com/SyjanS5.png"></p><p>例如，我放到了&#x2F;usr&#x2F;local&#x2F;src 目录：</p><p><img src="https://i.imgur.com/01DTNCf.png"></p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure><p>解压后：</p><p><img src="https://i.imgur.com/8V6zvCD.png" alt="image-20211211080339076"></p><p>进入redis目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下：</p><p><img src="https://i.imgur.com/YSxkGm7.png"></p><p>该目录已经默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h4 id="3-3-3-启动"><a href="#3-3-3-启动" class="headerlink" title="3.3.3.启动"></a>3.3.3.启动</h4><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h4 id="3-3-4-默认启动"><a href="#3-3-4-默认启动" class="headerlink" title="3.3.4.默认启动"></a>3.3.4.默认启动</h4><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://i.imgur.com/v7xWsqC.png"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h4 id="3-3-5-指定配置启动"><a href="#3-3-5-指定配置启动" class="headerlink" title="3.3.5.指定配置启动"></a>3.3.5.指定配置启动</h4><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-18-05-image-20211211082225509-ed4eac.png" alt="image-20211211082225509"></p><p>我们先将这个配置文件备份一份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes </span></span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">123321</span></span><br></pre></td></tr></table></figure><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志.持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">.</span></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">512mb</span></span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入redis安装目录 </span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/redis-6.2.6</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class="line"><span class="comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span></span><br><span class="line">redis-cli -u 123321 shutdown</span><br></pre></td></tr></table></figure><h4 id="3-3-6-开机自启"><a href="#3-3-6-开机自启" class="headerlink" title="3.3.6.开机自启"></a>3.3.6.开机自启</h4><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure><h3 id="3-4-Redis桌面客户端"><a href="#3-4-Redis桌面客户端" class="headerlink" title="3.4.Redis桌面客户端"></a>3.4.Redis桌面客户端</h3><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h4 id="3-4-1-Redis命令行客户端"><a href="#3-4-1-Redis命令行客户端" class="headerlink" title="3.4.1.Redis命令行客户端"></a>3.4.1.Redis命令行客户端</h4><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="https://i.imgur.com/OYYWPNo.png"></p><h4 id="3-4-2-图形化桌面客户端"><a href="#3-4-2-图形化桌面客户端" class="headerlink" title="3.4.2.图形化桌面客户端"></a>3.4.2.图形化桌面客户端</h4><p>GitHub上的大神编写了Redis的图形化桌面客户端，地址：<a href="https://github.com/uglide/RedisDesktopManager">https://github.com/uglide/RedisDesktopManager</a></p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>在下面这个仓库可以找到安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p><h4 id="3-4-3-安装"><a href="#3-4-3-安装" class="headerlink" title="3.4.3.安装"></a>3.4.3.安装</h4><p>在课前资料中可以找到Redis的图形化桌面客户端：</p><p><img src="https://i.imgur.com/BZ4Agbi.png"></p><p>解压缩后，运行安装程序即可安装：</p><p><img src="https://i.imgur.com/hguGHbX.png"></p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="https://i.imgur.com/hwK5LQ8.png"></p><p>双击即可运行：</p><p><img src="https://i.imgur.com/6hUqslY.png"></p><h4 id="3-4-4-建立连接"><a href="#3-4-4-建立连接" class="headerlink" title="3.4.4.建立连接"></a>3.4.4.建立连接</h4><p>点击左上角的<code>连接到Redis服务器</code>按钮：</p><p><img src="https://i.imgur.com/9qTGyoN.png"></p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="https://i.imgur.com/DshNnKC.png"></p><p>点击确定后，在左侧菜单会出现这个链接：</p><p><img src="https://i.imgur.com/A2cOm7Q.png"></p><p>点击即可建立连接了。</p><p><img src="https://i.imgur.com/ja8Fd9s.png"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择 0号库</span></span><br><span class="line"><span class="keyword">select</span> 0</span><br></pre></td></tr></table></figure><h2 id="4-Redis常见命令"><a href="#4-Redis常见命令" class="headerlink" title="4.Redis常见命令"></a>4.Redis常见命令</h2><h3 id="4-1-Redis数据结构介绍"><a href="#4-1-Redis数据结构介绍" class="headerlink" title="4.1 Redis数据结构介绍"></a>4.1 Redis数据结构介绍</h3><p>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-16-19-1652887393157-cb06f5.png" alt="1652887393157"></p><p><strong>贴心小建议：命令不要死记，学会查询就好啦</strong></p><p>Redis为了方便我们学习，将操作不同数据类型的命令也做了分组，在官网（ <a href="https://redis.io/commands">https://redis.io/commands</a> ）可以查看到不同的命令：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-16-21-1652887648826-d1f4ee.png" alt="1652887648826"></p><p>当然我们也可以通过Help命令来帮助我们去查看命令</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-16-28-1652887748279-28c382.png" alt="1652887748279"></p><h3 id="4-2-Redis-通用命令"><a href="#4-2-Redis-通用命令" class="headerlink" title="4.2 Redis 通用命令"></a>4.2 Redis 通用命令</h3><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li>KEYS：查看符合模板的所有key</li><li>DEL：删除一个指定的key</li><li>EXISTS：判断key是否存在</li><li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li><li>TTL：查看一个KEY的剩余有效期</li></ul><p>通过help [command] 可以查看一个命令的具体用法，例如：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-16-33-1652887865189-ec30b4.png" alt="1652887865189"></p><p>课堂代码如下</p><ul><li>KEYS</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询以a开头的key</span></span><br><span class="line">127.0.0.1:6379&gt; keys a*</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p><strong>贴心小提示：在生产环境下，不推荐使用keys 命令，因为这个命令在key过多的情况下，效率不高</strong></p><ul><li>DEL</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> del</span><br><span class="line"></span><br><span class="line">  DEL key [key ...]</span><br><span class="line">  summary: Delete a key</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del name <span class="comment">#删除单个</span></span><br><span class="line">(<span class="built_in">integer</span>) 1  <span class="comment">#成功删除1个</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3 <span class="comment">#批量添加数据</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">4) <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del k1 k2 k3 k4</span><br><span class="line">(<span class="built_in">integer</span>) 3   <span class="comment">#此处返回的是成功删除的key，由于redis中只有k1,k2,k3 所以只成功删除3个，最终返回</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment">#再查询全部的key</span></span><br><span class="line">1) <span class="string">&quot;age&quot;</span><span class="comment">#只剩下一个了</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p><strong>贴心小提示：同学们在拷贝代码的时候，只需要拷贝对应的命令哦~</strong></p><ul><li>EXISTS</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> EXISTS</span><br><span class="line"></span><br><span class="line">  EXISTS key [key ...]</span><br><span class="line">  summary: Determine <span class="keyword">if</span> a key exists</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><ul><li>EXPIRE</li></ul><p><strong>贴心小提示</strong>：内存非常宝贵，对于一些数据，我们应当给他一些过期时间，当过期时间到了之后，他就会自动被删除~</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire age 10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2  <span class="comment">#当这个key过期了，那么此时查询出来就是-2 </span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 10 <span class="comment">#如果没有设置过期时间</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -1  <span class="comment"># ttl的返回值就是-1</span></span><br></pre></td></tr></table></figure><h3 id="4-3-Redis命令-String命令"><a href="#4-3-Redis命令-String命令" class="headerlink" title="4.3 Redis命令-String命令"></a>4.3 Redis命令-String命令</h3><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增.自减操作</li><li>float：浮点类型，可以做自增.自减操作</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-16-39-1652890121291-f58d61.png" alt="1652890121291"></p><p>String的常见命令有：</p><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型的键值对</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li></ul><p><strong>贴心小提示</strong>：以上命令除了INCRBYFLOAT 都是常用命令</p><ul><li>SET 和GET: 如果key不存在则是新增，如果存在则是修改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set name Rose  <span class="comment">//原来不存在</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name </span><br><span class="line"><span class="string">&quot;Rose&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set name Jack <span class="comment">//原来存在，就是修改</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;Jack&quot;</span></span><br></pre></td></tr></table></figure><ul><li>MSET和MGET</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; MSET k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; MGET name age k1 k2 k3</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Jack&quot;</span> <span class="comment">//之前存在的name</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;10&quot;</span>   <span class="comment">//之前存在的age</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;v1&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;v2&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure><ul><li>INCR和INCRBY和DECY</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get age </span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incr age <span class="comment">//增加1</span></span><br><span class="line">(integer) <span class="number">11</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get age <span class="comment">//获得age</span></span><br><span class="line"><span class="string">&quot;11&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age <span class="number">2</span> <span class="comment">//一次增加2</span></span><br><span class="line">(integer) <span class="number">13</span> <span class="comment">//返回目前的age的值</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age <span class="number">2</span></span><br><span class="line">(integer) <span class="number">15</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age -<span class="number">1</span> <span class="comment">//也可以增加负数，相当于减</span></span><br><span class="line">(integer) <span class="number">14</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age -<span class="number">2</span> <span class="comment">//一次减少2个</span></span><br><span class="line">(integer) <span class="number">12</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DECR age <span class="comment">//相当于 incr 负数，减少正常用法</span></span><br><span class="line">(integer) <span class="number">11</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get age </span><br><span class="line"><span class="string">&quot;11&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>SETNX</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help setnx</span><br><span class="line"></span><br><span class="line">  SETNX key value</span><br><span class="line">  summary: Set the value of a key, only <span class="keyword">if</span> the key does not exist</span><br><span class="line">  since: <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  group: string</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set name Jack  <span class="comment">//设置名称</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setnx name lisi <span class="comment">//如果key不存在，则添加成功</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name <span class="comment">//由于name已经存在，所以lisi的操作失败</span></span><br><span class="line"><span class="string">&quot;Jack&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setnx name2 lisi <span class="comment">//name2 不存在，所以操作成功</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name2 </span><br><span class="line"><span class="string">&quot;lisi&quot;</span></span><br></pre></td></tr></table></figure><ul><li>SETEX</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex name 10 jack</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure><h3 id="4-4-Redis命令-Key的层级结构"><a href="#4-4-Redis命令-Key的层级结构" class="headerlink" title="4.4 Redis命令-Key的层级结构"></a>4.4 Redis命令-Key的层级结构</h3><p>Redis没有类似MySQL中的Table的概念，我们该如何区分不同类型的key呢？</p><p>例如，需要存储用户.商品信息到redis，有一个用户id是1，有一个商品id恰好也是1，此时如果使用id作为key，那就会冲突了，该怎么办？</p><p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p><p>Redis的key允许有多个单词形成层级结构，多个单词之间用’:’隔开，格式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-16-45-1652941631682-021e01.png" alt="1652941631682"></p><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p><p>例如我们的项目名称叫 heima，有user和product两种不同类型的数据，我们可以这样定义key：</p><ul><li><p>user相关的key：<strong>heima:user:1</strong></p></li><li><p>product相关的key：<strong>heima:product:1</strong></p></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>heima:user:1</td><td>{“id”:1, “name”: “Jack”, “age”: 21}</td></tr><tr><td>heima:product:1</td><td>{“id”:1, “name”: “小米11”, “price”: 4999}</td></tr></tbody></table><p>一旦我们向redis采用这样的方式存储，那么在可视化界面中，redis会以层级结构来进行存储，形成类似于这样的结构，更加方便Redis获取数据</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-16-47-1652941883537-3f6eb0.png" alt="1652941883537"></p><h3 id="4-5-Redis命令-Hash命令"><a href="#4-5-Redis命令-Hash命令" class="headerlink" title="4.5 Redis命令-Hash命令"></a>4.5 Redis命令-Hash命令</h3><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-16-50-1652941995945-27ccc6.png" alt="1652941995945"></p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-16-52-1652942027719-30d9aa.png" alt="1652942027719"></p><p><strong>Hash类型的常见命令</strong></p><ul><li><p>HSET key field value：添加或者修改hash类型key的field的值</p></li><li><p>HGET key field：获取一个hash类型key的field的值</p></li><li><p>HMSET：批量添加多个hash类型key的field的值</p></li><li><p>HMGET：批量获取多个hash类型key的field的值</p></li><li><p>HGETALL：获取一个hash类型的key中的所有的field和value</p></li><li><p>HKEYS：获取一个hash类型的key中的所有的field</p></li><li><p>HINCRBY:让一个hash类型key的字段值自增并指定步长</p></li><li><p>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p></li></ul><p><strong>贴心小提示</strong>：哈希结构也是我们以后实际开发中常用的命令哟</p><ul><li>HSET和HGET</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> name Lucy<span class="comment">//大key是 heima:user:3 小key是name，小value是Lucy</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> age <span class="number">21</span><span class="comment">// 如果操作不存在的数据，则是新增</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> age <span class="number">17</span> <span class="comment">//如果操作存在的数据，则是修改</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET heima:user:<span class="number">3</span> name </span><br><span class="line"><span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET heima:user:<span class="number">3</span> age</span><br><span class="line"><span class="string">&quot;17&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HMSET和HMGET</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET heima:user:<span class="number">4</span> name HanMeiMei</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET heima:user:<span class="number">4</span> name LiLei age <span class="number">20</span> sex man</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMGET heima:user:<span class="number">4</span> name age sex</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HGETALL</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HKEYS和HVALS</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HKEYS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HVALS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HINCRBY</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HINCRBY  heima:user:<span class="number">4</span> age <span class="number">2</span></span><br><span class="line">(integer) <span class="number">22</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HVALS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;22&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HINCRBY  heima:user:<span class="number">4</span> age -<span class="number">2</span></span><br><span class="line">(integer) <span class="number">20</span></span><br></pre></td></tr></table></figure><ul><li>HSETNX</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSETNX heima:user4 sex <span class="title function_">woman</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSETNX heima:user:<span class="number">3</span> sex <span class="title function_">woman</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;woman&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-Redis命令-List命令"><a href="#4-6-Redis命令-List命令" class="headerlink" title="4.6 Redis命令-List命令"></a>4.6 Redis命令-List命令</h3><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p><strong>List的常见命令有：</strong></p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-16-57-1652943604992-7ded3f.png" alt="1652943604992"></p><ul><li>LPUSH和RPUSH</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH users <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPUSH users <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">(integer) <span class="number">6</span></span><br></pre></td></tr></table></figure><ul><li>LPOP和RPOP</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPOP users</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPOP users</span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br></pre></td></tr></table></figure><ul><li>LRANGE</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE users <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;4&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-7-Redis命令-Set命令"><a href="#4-7-Redis命令-Set命令" class="headerlink" title="4.7 Redis命令-Set命令"></a>4.7 Redis命令-Set命令</h3><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集.并集.差集等功能</li></ul><p><strong>Set类型的常见命令</strong></p><ul><li>SADD key member … ：向set中添加一个或多个元素</li><li>SREM key member … : 移除set中的指定元素</li><li>SCARD key： 返回set中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于set中</li><li>SMEMBERS：获取set中的所有元素</li><li>SINTER key1 key2 … ：求key1与key2的交集</li><li>SDIFF key1 key2 … ：求key1与key2的差集</li><li>SUNION key1 key2 ..：求key1和key2的并集</li></ul><p>例如两个集合：s1和s2:</p><p><img src="https://i.imgur.com/ha8x86R.png"></p><p>求交集：SINTER s1 s2</p><p>求s1与s2的不同：SDIFF s1 s2</p><p><img src="https://i.imgur.com/L9vTv2X.png"></p><p><strong>具体命令</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd s1 a b <span class="title function_">c</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers s1</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; srem s1 <span class="title function_">a</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER s1 <span class="title function_">a</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER s1 <span class="title function_">b</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SCARD <span class="title function_">s1</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><ul><li>将下列数据用Redis的Set集合来存储：</li><li>张三的好友有：李四.王五.赵六</li><li>李四的好友有：王五.麻子.二狗</li><li>利用Set的命令实现下列功能：</li><li>计算张三的好友有几人</li><li>计算张三和李四有哪些共同好友</li><li>查询哪些人是张三的好友却不是李四的好友</li><li>查询张三和李四的好友总共有哪些人</li><li>判断李四是否是张三的好友</li><li>判断张三是否是李四的好友</li><li>将李四从张三的好友列表中移除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD zs lisi wangwu <span class="title function_">zhaoliu</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD ls wangwu mazi <span class="title function_">ergou</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SCARD <span class="title function_">zs</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SINTER zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SDIFF zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SUNION zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;mazi&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;ergou&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER zs <span class="title function_">lisi</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER ls <span class="title function_">zhangsan</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SREM zs <span class="title function_">lisi</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SMEMBERS zs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;wangwu&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-8-Redis命令-SortedSet类型"><a href="#4-8-Redis命令-SortedSet类型" class="headerlink" title="4.8 Redis命令-SortedSet类型"></a>4.8 Redis命令-SortedSet类型</h3><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><p>SortedSet的常见命令有：</p><ul><li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member : 获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li><li>ZDIFF.ZINTER.ZUNION：求差集.交集.并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</li><li><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</li></ul><h2 id="5-Redis的Java客户端-Jedis"><a href="#5-Redis的Java客户端-Jedis" class="headerlink" title="5.Redis的Java客户端-Jedis"></a>5.Redis的Java客户端-Jedis</h2><p>在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/docs/clients/">https://redis.io/docs/clients/</a></p><p><img src="https://i.imgur.com/9f68ivq.png"></p><p>其中Java客户端也包含很多：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-17-07-image-20220609102817435-587a10.png" alt="image-20220609102817435"></p><p>标记为❤的就是推荐使用的java客户端，包括：</p><ul><li>Jedis和Lettuce：这两个主要是提供了Redis命令对应的API，方便我们操作Redis，而SpringDataRedis又对这两种做了抽象和封装，因此我们后期会直接以SpringDataRedis来学习。</li><li>Redisson：是在Redis基础上实现了分布式的可伸缩的java数据结构，例如Map.Queue等，而且支持跨进程的同步机制：Lock.Semaphore等待，比较适合用来实现特殊的功能需求。</li></ul><h3 id="5-1-Jedis快速入门"><a href="#5-1-Jedis快速入门" class="headerlink" title="5.1 Jedis快速入门"></a>5.1 Jedis快速入门</h3><p><strong>入门案例详细步骤</strong></p><p>案例分析：</p><p>0）创建工程：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-18-22-1652959239813-db6914.png" alt="1652959239813"></p><p>1）引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jedis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）建立连接</p><p>新建一个单元测试类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.建立连接</span></span><br><span class="line">    <span class="comment">// jedis = new Jedis(&quot;192.168.150.101&quot;, 6379);</span></span><br><span class="line">    jedis = JedisConnectionFactory.getJedis();</span><br><span class="line">    <span class="comment">// 2.设置密码</span></span><br><span class="line">    jedis.auth(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.选择库</span></span><br><span class="line">    jedis.select(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 存入数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;虎哥&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 插入hash数据</span></span><br><span class="line">    jedis.hset(<span class="string">&quot;user:1&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user:1&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取</span></span><br><span class="line">    Map&lt;String, String&gt; map = jedis.hgetAll(<span class="string">&quot;user:1&quot;</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (jedis != <span class="literal">null</span>) &#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-Jedis连接池"><a href="#5-2-Jedis连接池" class="headerlink" title="5.2 Jedis连接池"></a>5.2 Jedis连接池</h3><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式</p><p>有关池化思想，并不仅仅是这里会使用，很多地方都有，比如说我们的数据库连接池，比如我们tomcat中的线程池，这些都是池化思想的体现。</p><h4 id="5-2-1-创建Jedis的连接池"><a href="#5-2-1-创建Jedis的连接池" class="headerlink" title="5.2.1.创建Jedis的连接池"></a>5.2.1.创建Jedis的连接池</h4><p>- </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConnectionFacotry</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> &#123;</span><br><span class="line">         <span class="comment">//配置连接池</span></span><br><span class="line">         <span class="type">JedisPoolConfig</span> <span class="variable">poolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">         poolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">         poolConfig.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">         poolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">         poolConfig.setMaxWaitMillis(<span class="number">1000</span>);</span><br><span class="line">         <span class="comment">//创建连接池对象</span></span><br><span class="line">         jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(poolConfig,</span><br><span class="line">                 <span class="string">&quot;192.168.150.101&quot;</span>,<span class="number">6379</span>,<span class="number">1000</span>,<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码说明：</strong></p><ul><li><p>1） JedisConnectionFacotry：工厂设计模式是实际开发中非常常用的一种设计模式，我们可以使用工厂，去降低代的耦合，比如Spring中的Bean的创建，就用到了工厂设计模式</p></li><li><p>2）静态代码块：随着类的加载而加载，确保只能执行一次，我们在加载当前工厂类的时候，就可以执行static的操作完成对 连接池的初始化</p></li><li><p>3）最后提供返回连接池中连接的方法.</p></li></ul><h4 id="5-2-2-改造原始代码"><a href="#5-2-2-改造原始代码" class="headerlink" title="5.2.2.改造原始代码"></a>5.2.2.改造原始代码</h4><p><strong>代码说明:</strong></p><p>1.在我们完成了使用工厂设计模式来完成代码的编写之后，我们在获得连接时，就可以通过工厂来获得。</p><p>，而不用直接去new对象，降低耦合，并且使用的还是连接池对象。</p><p>2.当我们使用了连接池后，当我们关闭连接其实并不是关闭，而是将Jedis还回连接池的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@BeforeEach</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="comment">//建立连接</span></span><br><span class="line">     <span class="comment">/*jedis = new Jedis(&quot;127.0.0.1&quot;,6379);*/</span></span><br><span class="line">     jedis = JedisConnectionFacotry.getJedis();</span><br><span class="line">      <span class="comment">//选择库</span></span><br><span class="line">     jedis.select(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (jedis != <span class="literal">null</span>) &#123;</span><br><span class="line">         jedis.close();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="6-Redis的Java客户端-SpringDataRedis"><a href="#6-Redis的Java客户端-SpringDataRedis" class="headerlink" title="6.Redis的Java客户端-SpringDataRedis"></a>6.Redis的Java客户端-SpringDataRedis</h2><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK.JSON.字符串.Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-17-12-1652976773295-c3a05e.png" alt="1652976773295"></p><h3 id="6-1-快速入门"><a href="#6-1-快速入门" class="headerlink" title="6.1.快速入门"></a>6.1.快速入门</h3><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单：</p><h4 id="6-1-1-导入pom坐标"><a href="#6-1-1-导入pom坐标" class="headerlink" title="6.1.1.导入pom坐标"></a>6.1.1.导入pom坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redis-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>redis-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--common-pool--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Jackson依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-1-2-配置文件"><a href="#6-1-2-配置文件" class="headerlink" title="6.1.2 .配置文件"></a>6.1.2 .配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span>  <span class="comment">#最大连接</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span>   <span class="comment">#最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>   <span class="comment">#最小空闲连接</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">100ms</span> <span class="comment">#连接等待时间</span></span><br></pre></td></tr></table></figure><h4 id="6-1-3-测试代码"><a href="#6-1-3-测试代码" class="headerlink" title="6.1.3.测试代码"></a>6.1.3.测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 写入一条String数据</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;虎哥&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取string数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>贴心小提示：SpringDataJpa使用起来非常简单，记住如下几个步骤即可</strong></p><p>SpringDataRedis的使用步骤：</p><ul><li>引入spring-boot-starter-data-redis依赖</li><li>在application.yml配置Redis信息</li><li>注入RedisTemplate</li></ul><h3 id="6-2-数据序列化器"><a href="#6-2-数据序列化器" class="headerlink" title="6.2 .数据序列化器"></a>6.2 .数据序列化器</h3><p>RedisTemplate可以接收任意Object作为值写入Redis：</p><p><img src="https://i.imgur.com/OEMcbuu.png"></p><p>只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的：</p><p><img src="https://i.imgur.com/5FjtWk5.png"></p><p>缺点：</p><ul><li>可读性差</li><li>内存占用较大</li></ul><p>我们可以自定义RedisTemplate的序列化方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 创建JSON序列化工具</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// 设置Key的序列化</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置Value的序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里采用了JSON序列化来代替默认的JDK序列化方式。最终结果如图：</p><p><img src="https://i.imgur.com/XOAq3cN.png"></p><p>整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中记录了序列化时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的内存开销。</p><h3 id="6-3-StringRedisTemplate"><a href="#6-3-StringRedisTemplate" class="headerlink" title="6.3 StringRedisTemplate"></a>6.3 StringRedisTemplate</h3><p>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-17-30-1653054602930-092f72.png" alt="1653054602930"></p><p>为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。</p><p>为了减少内存的消耗，我们可以采用手动序列化的方式，换句话说，就是不借助默认的序列化器，而是我们自己来控制序列化的动作，同时，我们只采用String的序列化器，这样，在存储value时，我们就不需要在内存中就不用多存储数据，从而节约我们的内存空间</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-17-43-1653054744832-71b01e.png" alt="1653054744832"></p><p>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。</p><p><img src="https://i.imgur.com/zXH6Qn6.png"></p><p>省去了我们自定义RedisTemplate的序列化方式的步骤，而是直接使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisStringTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 写入一条String数据</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;verify:phone:13600527634&quot;</span>, <span class="string">&quot;124143&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取string数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;虎哥&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="comment">// 手动序列化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">// 写入数据</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:200&quot;</span>, json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonUser</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:200&quot;</span>);</span><br><span class="line">        <span class="comment">// 手动反序列化</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.readValue(jsonUser, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user1 = &quot;</span> + user1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们再来看一看存储的数据，小伙伴们就会发现那个class数据已经不在了，节约了我们的空间~</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/17/17-17-53-1653054945211-eebaac.png" alt="1653054945211"></p><p>最后小总结：</p><p>RedisTemplate的两种序列化实践方案：</p><ul><li><p>方案一：</p><ul><li>自定义RedisTemplate</li><li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li></ul></li><li><p>方案二：</p><ul><li>使用StringRedisTemplate</li><li>写入Redis时，手动把对象序列化为JSON</li><li>读取Redis时，手动把读取到的JSON反序列化为对象</li></ul></li></ul><h3 id="6-4-Hash结构操作"><a href="#6-4-Hash结构操作" class="headerlink" title="6.4 Hash结构操作"></a>6.4 Hash结构操作</h3><p>在基础篇的最后，咱们对Hash结构操作一下，收一个小尾巴，这个代码咱们就不再解释啦</p><p>马上就开始新的篇章~~~进入到我们的Redis实战篇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisStringTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;虎哥&quot;</span>);</span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object, Object&gt; entries = stringRedisTemplate.opsForHash().entries(<span class="string">&quot;user:400&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;entries = &quot;</span> + entries);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> Redis </tag>
            
            <tag> 数据持久化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装galances</title>
      <link href="/2024/07/16/Centos7%E5%AE%89%E8%A3%85galances/"/>
      <url>/2024/07/16/Centos7%E5%AE%89%E8%A3%85galances/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos7安装galances"><a href="#Centos7安装galances" class="headerlink" title="Centos7安装galances"></a>Centos7安装galances</h1><h3 id="安装epel源-国"><a href="#安装epel源-国" class="headerlink" title="安装epel源(国)"></a>安装epel源(国)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"><span class="comment"># 刷新缓存</span></span><br><span class="line">yum makecache fast</span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure><h3 id="安装python3-pip"><a href="#安装python3-pip" class="headerlink" title="安装python3-pip"></a>安装python3-pip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python3-pip -y</span><br></pre></td></tr></table></figure><h3 id="配置pip国内加速源"><a href="#配置pip国内加速源" class="headerlink" title="配置pip国内加速源"></a>配置pip国内加速源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建~/.pip/pip.conf</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.pip &amp;&amp; <span class="built_in">cd</span> ~/.pip &amp;&amp; <span class="built_in">touch</span> pip.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将下列内容添加到~/.pip/pip.conf文件中</span></span><br><span class="line">[global]</span><br><span class="line"><span class="built_in">timeout</span> = 6000</span><br><span class="line">index-url =  https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">trusted-host =  mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h3 id="更新pip3"><a href="#更新pip3" class="headerlink" title="更新pip3"></a>更新pip3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -U pip</span><br></pre></td></tr></table></figure><h3 id="安装galnces"><a href="#安装galnces" class="headerlink" title="安装galnces"></a>安装galnces</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install glances</span><br></pre></td></tr></table></figure><h3 id="使用glances"><a href="#使用glances" class="headerlink" title="使用glances"></a>使用glances</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glances</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/19-17-02-12842148908d4a62b4586f8bb143fedb-803bbf.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> 运维 </tag>
            
            <tag> Galances </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git新建分支与切换分支</title>
      <link href="/2024/07/16/Git%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF%E4%B8%8E%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF/"/>
      <url>/2024/07/16/Git%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF%E4%B8%8E%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a><strong>新建分支</strong></h2><h3 id="1-通过Git命令来新建分支"><a href="#1-通过Git命令来新建分支" class="headerlink" title="1.通过Git命令来新建分支"></a>1.通过Git命令来新建分支</h3><p>1、进入远程仓库所在的本地路径，并 <strong>git branch -a</strong> 查看本地分支（星号*表示当前所在分支）与远程分支（前面带有remotes的分支都是远程分支）情况。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/16-49-45-image-20240716164945716-9b5fe3.png" alt="image-20240716164945716"></p><p>2、在当前的master分支下新建一个本地分支MadA：<strong>git branch MadA</strong></p><p>3、推送本地分支MadA到远程分支：<strong>git push origin MadA:MadA</strong></p><p>（本地分支（冒号前面的分支）与远程分支同名（冒号后面的分支））</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/16-50-02-image-20240716165002535-b1da1f.png" alt="image-20240716165002535"></p><p>4、再使用 <strong>git branch -a</strong> 查看所有分支，可以看到 remotes&#x2F;origin&#x2F;MadA 这个远程分支，说明成功新建了远程</p><p>分支。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/16-50-29-image-20240716165029309-c0070a.png" alt="image-20240716165029309"></p><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a><strong>切换分支</strong></h2><p>在本地新建分支，保证和远程分支一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure><p>如果分支已存在，只需要切换的话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><p>提交前先把代码拉下来更新一下，确保不会覆盖别人的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin 远程分支</span><br></pre></td></tr></table></figure><p>提交到缓存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>提交到本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;我这次提交是为了干啥&#x27;</span><br></pre></td></tr></table></figure><p>提交到远程仓库(线上仓库)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin 分支名 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Kali给局域网内的设备限速</title>
      <link href="/2024/07/14/%E4%BD%BF%E7%94%A8Kali%E7%BB%99%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%9A%84%E8%AE%BE%E5%A4%87%E9%99%90%E9%80%9F/"/>
      <url>/2024/07/14/%E4%BD%BF%E7%94%A8Kali%E7%BB%99%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%9A%84%E8%AE%BE%E5%A4%87%E9%99%90%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Kali给局域网内的设备限速"><a href="#使用Kali给局域网内的设备限速" class="headerlink" title="使用Kali给局域网内的设备限速"></a>使用Kali给局域网内的设备限速</h1><h2 id="1-安装限速工具"><a href="#1-安装限速工具" class="headerlink" title="1.安装限速工具"></a>1.安装限速工具</h2><p>拉取远程git，并进行安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/bitbrute/evillimiter.git</span><br><span class="line"><span class="built_in">cd</span> evillimiter</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/12/23-04-08-image-20240712230401251-b831a5.png" alt="image-20240712230401251"></p><h2 id="2-输入指令进入终端并扫描当前局域网下的设备"><a href="#2-输入指令进入终端并扫描当前局域网下的设备" class="headerlink" title="2.输入指令进入终端并扫描当前局域网下的设备"></a>2.输入指令进入终端并扫描当前局域网下的设备</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/12/23-04-55-image-20240712230455560-fdebee.png" alt="image-20240712230455560"></p><h2 id="3-进行限速"><a href="#3-进行限速" class="headerlink" title="3.进行限速"></a>3.进行限速</h2><h3 id="3-1-所有设备都限速"><a href="#3-1-所有设备都限速" class="headerlink" title="3.1 所有设备都限速"></a>3.1 所有设备都限速</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit all <span class="number">1</span>bit</span><br></pre></td></tr></table></figure><h3 id="3-2-所有设备接触限速"><a href="#3-2-所有设备接触限速" class="headerlink" title="3.2 所有设备接触限速"></a>3.2 所有设备接触限速</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free all</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/12/23-05-09-image-20240712230509808-e8e45d.png" alt="image-20240712230509808"></p><h2 id="4-所有指令指南是使用案例"><a href="#4-所有指令指南是使用案例" class="headerlink" title="4.所有指令指南是使用案例"></a>4.所有指令指南是使用案例</h2><blockquote><p>以下表格包含了evillimiter的命令、使用方法、说明和示例。</p></blockquote><table><thead><tr><th>命令</th><th>使用方法</th><th>说明</th><th>示例</th><th>示例说明</th></tr></thead><tbody><tr><td>scan</td><td>scan (–range [IP Range])</td><td>扫描网络中的在线主机。这通常是启动后要做的第一件事。–range 允许您指定自定义 IP 范围。</td><td>scan –range 192.168.178.1-192.168.178.40</td><td>扫描 IP 范围从 192.168.178.1 到 192.168.178.40 的设备</td></tr><tr><td></td><td></td><td></td><td>scan</td><td>扫描整个子网</td></tr><tr><td>hosts</td><td>hosts (–force)</td><td>显示之前扫描的所有主机&#x2F;设备和基本信息。显示每个主机的 ID，用于交互。–force 强制显示表格，即使它不适合终端。</td><td>hosts –force</td><td>强制显示所有扫描到的主机信息，即使终端窗口太小</td></tr><tr><td>limit</td><td>limit [ID1,ID2,…] [Rate] (–upload) (–download)</td><td>限制与指定 ID 关联的主机的带宽。Rate 决定互联网速度。–upload 仅限制上传流量。–download 仅限制下载流量。有效速率：bit, kbit, mbit, gbit</td><td>limit 4,5,6 200kbit</td><td>将 ID 为 4、5、6 的设备的上传和下载速度限制为 200 kbit&#x2F;s</td></tr><tr><td></td><td></td><td></td><td>limit all 1gbit</td><td>将所有设备的上传和下载速度限制为 1 Gbit&#x2F;s</td></tr></tbody></table><table><thead><tr><th>命令</th><th>使用方法</th><th>说明</th><th>示例</th><th>示例说明</th></tr></thead><tbody><tr><td>block</td><td>block [ID1,ID2,…] (–upload) (–download)</td><td>阻止与指定 ID 关联的主机的互联网连接。–upload 仅阻止上传流量。–download 仅阻止下载流量。</td><td>block 4,5 –upload</td><td>阻止 ID 为 4 和 5 的设备的上传流量</td></tr><tr><td>free</td><td>free [ID1,ID2,…]</td><td>解除对与指定 ID 关联的主机的限制&#x2F;阻止。移除所有进一步的限制。</td><td>free 4,5,6</td><td>解除对 ID 为 4、5、6 的设备的所有限制</td></tr><tr><td>add</td><td>add [IP] (–mac [MAC])</td><td>将自定义主机添加到主机列表。MAC 地址将自动解析或可以手动指定。</td><td>add 192.168.178.24</td><td>添加 IP 为 192.168.178.24 的设备到主机列表</td></tr><tr><td></td><td></td><td></td><td>add 192.168.1.50 –mac 1c:fc:bc:2d:a6:37</td><td>添加 IP 为 192.168.1.50，MAC 地址为 1c:fc:bc:2d:a6:37 的设备到主机列表</td></tr></tbody></table><table><thead><tr><th>命令</th><th>使用方法</th><th>说明</th><th>示例</th><th>示例说明</th></tr></thead><tbody><tr><td>monitor</td><td>monitor (–interval [time in ms])</td><td>监控受限主机的带宽使用情况（当前使用情况，总带宽使用量等）。–interval 设置带宽信息刷新的间隔（毫秒，默认 500ms）。</td><td>monitor –interval 1000</td><td>每 1000 毫秒（1 秒）刷新一次带宽使用信息</td></tr><tr><td>analyze</td><td>analyze [ID1,ID2,…] (–duration [time in s])</td><td>在不限制的情况下分析主机的流量，以确定谁使用了多少带宽。–duration 指定分析的持续时间（秒，默认 30s）。</td><td>analyze 2,3 –duration 120</td><td>分析 ID 为 2 和 3 的设备的流量，持续 120 秒</td></tr><tr><td>watch</td><td>watch</td><td>显示当前监视状态。监视功能检测主机何时使用不同的 IP 地址重新连接。</td><td>watch</td><td>显示当前的监视状态</td></tr><tr><td>watch add</td><td>watch add [ID1,ID2,…]</td><td>将指定的主机添加到监视列表。</td><td>watch add 6,7,8</td><td>将 ID 为 6、7、8 的设备添加到监视列表</td></tr><tr><td>watch remove</td><td>watch remove [ID1,ID2,…]</td><td>从监视列表中移除指定的主机。</td><td>watch remove all</td><td>从监视列表中移除所有设备</td></tr><tr><td>watch set</td><td>watch set [Attribute] [Value]</td><td>更改当前监视设置。可以更改以下属性：range 是扫描重新连接的 IP 范围。interval 是每次网络扫描之间等待的时间（秒）。</td><td>watch set interval 120</td><td>设置监视扫描间隔为 120 秒</td></tr><tr><td>clear</td><td>clear</td><td>清除终端窗口。</td><td>clear</td><td>清除终端窗口中的所有内容</td></tr><tr><td>quit</td><td>quit</td><td>退出应用程序。</td><td>quit</td><td>退出 evillimiter 程序</td></tr><tr><td>?, help</td><td>?, help</td><td>显示类似于此表格的命令信息。</td><td>? 或 help</td><td>显示帮助信息</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 全栈渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> 渗透系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统登录前的检测</title>
      <link href="/2024/07/13/%E7%B3%BB%E7%BB%9F%E7%99%BB%E5%BD%95%E5%89%8D%E7%9A%84%E6%A3%80%E6%B5%8B/"/>
      <url>/2024/07/13/%E7%B3%BB%E7%BB%9F%E7%99%BB%E5%BD%95%E5%89%8D%E7%9A%84%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="登陆前的检查"><a href="#登陆前的检查" class="headerlink" title="登陆前的检查"></a>登陆前的检查</h2><blockquote><p>每次登录linux都想看一下系统的一些信息以及cpu和内存，但是不想手敲。整理了一份登录检查清单脚本，涵盖了系统的基础信息、内存、cpu、网络、docker等等的信息。</p><p>只需要在&#x2F;etc&#x2F;profile.d&#x2F;创建这个脚本，粘贴下面的脚本内容；</p><p>vim &#x2F;etc&#x2F;profile.d&#x2F;autosearchinfo.sh</p><p>然后赋予脚本的执行权限即可。每次登录就可以自动检查信息了。</p><p>chmod +x &#x2F;etc&#x2F;profile.d&#x2F;autosearchinfo.sh</p><p>ps：内存使用率是使用bc命令计算的，bc命令先装。</p></blockquote><h3 id="1-Centos"><a href="#1-Centos" class="headerlink" title="1.Centos"></a>1.Centos</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">clear</span></span><br><span class="line"></span><br><span class="line">LogFileName=polling.<span class="variable">$</span>(date +%F-%T)</span><br><span class="line">EchoFormat=<span class="variable">$</span>(<span class="keyword">for</span> (( i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++ ));<span class="keyword">do</span> <span class="built_in">echo</span> <span class="literal">-n</span> <span class="string">&quot;=&quot;</span>;done)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">YELLOW=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">BLUE=<span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">NC=<span class="string">&#x27;\033[0m&#x27;</span> <span class="comment"># No Color</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统信息</span></span><br><span class="line">SystemInfo()&#123;</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;<span class="variable">$</span>&#123;EchoFormat&#125; 系统信息 <span class="variable">$</span>&#123;EchoFormat&#125;<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    printf <span class="string">&quot;系统类型: %-10s\n&quot;</span> <span class="variable">$</span>(uname <span class="literal">-a</span>| awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">    printf <span class="string">&quot;系统版本: %-10s\n&quot;</span> <span class="string">&quot;<span class="variable">$</span>(cat /etc/redhat-release)&quot;</span></span><br><span class="line">    printf <span class="string">&quot;内核信息: %-10s\n&quot;</span> <span class="variable">$</span>(uname <span class="literal">-r</span>)</span><br><span class="line">    printf <span class="string">&quot;主机名: %-10s\n&quot;</span> <span class="variable">$</span>(uname <span class="literal">-n</span>)</span><br><span class="line">    printf <span class="string">&quot;编码格式: %-10s\n&quot;</span> <span class="variable">$</span>&#123;LANG&#125;</span><br><span class="line">    printf <span class="string">&quot;系统当前时间: %-10s %-10s\n&quot;</span> <span class="variable">$</span>(date +%F) <span class="variable">$</span>(date +%T)</span><br><span class="line">    printf <span class="string">&quot;系统运行负载: %-4s %-1s\n&quot;</span> <span class="variable">$</span>(uptime | awk <span class="operator">-F</span>: <span class="string">&#x27;&#123;print $5 &#125;&#x27;</span>|awk <span class="operator">-F</span>, <span class="string">&#x27;&#123;print $1,&quot;%&quot;&#125;&#x27;</span>)</span><br><span class="line">    printf <span class="string">&quot;系统运行天数: %-10s\n&quot;</span> <span class="variable">$</span>(uptime |awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br><span class="line">    printf <span class="string">&quot;在线用户人数: %-3s\n&quot;</span> <span class="variable">$</span>(w|tail <span class="literal">-n</span> +<span class="number">3</span>|wc <span class="literal">-l</span>)</span><br><span class="line">    printf <span class="string">&quot;SELinux: %-10s\n&quot;</span> <span class="variable">$</span>(grep <span class="string">&quot;SELINUX=[d|e|p]&quot;</span> /etc/selinux/config |awk <span class="operator">-F</span>= <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;最后一次修改时间: <span class="variable">$</span>(uptime -p)&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;IP地址: <span class="variable">$</span>(hostname -I | cut -d&#x27; &#x27; -f1)&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;Cpu处理器: <span class="variable">$</span>(lscpu | grep &quot;</span>Model name:<span class="string">&quot; | sed &#x27;s/Model name:\s*//&#x27;)&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;内存空间: <span class="variable">$</span>(free -h | awk &#x27;/^Mem:/ &#123; print <span class="variable">$3</span> &quot;</span>/<span class="string">&quot; <span class="variable">$2</span> &#125;&#x27;)&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;交换空间: <span class="variable">$</span>(free -h | awk &#x27;/^Swap:/ &#123; print <span class="variable">$3</span> &quot;</span>/<span class="string">&quot; <span class="variable">$2</span> &#125;&#x27;)&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU信息</span></span><br><span class="line">CpuInfo()&#123;</span><br><span class="line">    MemonyId=<span class="variable">$</span>(top <span class="literal">-b</span> <span class="literal">-n1</span>|awk <span class="string">&#x27;NR==3&#x27;</span>|awk <span class="operator">-F</span>, <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>| cut <span class="literal">-c</span> <span class="number">1</span><span class="literal">-5</span>)</span><br><span class="line">    MemonyUse=<span class="variable">$</span>(<span class="built_in">echo</span> <span class="string">&quot;100-<span class="variable">$</span>&#123;MemonyId&#125;&quot;</span> |bc)</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;RED&#125;<span class="variable">$</span>&#123;EchoFormat&#125; CPU信息 <span class="variable">$</span>&#123;EchoFormat&#125;<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    printf <span class="string">&quot;逻辑CPU核数: %-3s\n&quot;</span> <span class="variable">$</span>(grep <span class="string">&quot;processor&quot;</span> /proc/cpuinfo|<span class="built_in">sort</span> <span class="literal">-u</span>|wc <span class="literal">-l</span>)</span><br><span class="line">    printf <span class="string">&quot;物理CPU核数: %-3s\n&quot;</span> <span class="variable">$</span>(grep <span class="string">&quot;physical id&quot;</span> /proc/cpuinfo |<span class="built_in">sort</span> <span class="literal">-u</span>|wc <span class="literal">-l</span>)</span><br><span class="line">    printf <span class="string">&quot;CPU架构: %-3s\n&quot;</span> <span class="variable">$</span>(uname <span class="literal">-m</span>)</span><br><span class="line">    printf <span class="string">&quot;CPU设置型号: %-3s\n&quot;</span> <span class="string">&quot;<span class="variable">$</span>(grep &quot;</span>model name<span class="string">&quot; /proc/cpuinfo |awk -F: &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;|sort -u|cut -c 2-50)&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;CPU 1分钟负载: `awk  &#x27;&#123;printf &quot;</span>%<span class="number">15</span>s<span class="string">&quot;,<span class="variable">$1</span>&#125;&#x27; /proc/loadavg`&quot;</span></span><br><span class="line"><span class="string">    echo -e &quot;</span>CPU <span class="number">5</span>分钟负载: `awk  <span class="string">&#x27;&#123;printf &quot;%15s&quot;,$2&#125;&#x27;</span> /proc/loadavg`&quot;</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;CPU10分钟负载: `awk  &#x27;&#123;printf &quot;</span>%<span class="number">15</span>s<span class="string">&quot;,<span class="variable">$3</span>&#125;&#x27; /proc/loadavg`&quot;</span></span><br><span class="line"><span class="string">    printf &quot;</span>使用CPU占比: %<span class="literal">-1s</span> %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>&#123;MemonyUse&#125; %</span></span><br><span class="line"><span class="string">    printf &quot;</span>空闲CPU占比: %<span class="literal">-1s</span> %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>&#123;MemonyId&#125; %</span></span><br><span class="line"><span class="string">    printf &quot;</span>占用CPU Top10信息:\n\n<span class="string">&quot;</span></span><br><span class="line"><span class="string">    ps -eo user,pid,pcpu,pmem,args --sort=-pcpu  |head -n 10</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Memory信息</span></span><br><span class="line"><span class="string">MemoryInfo()&#123;</span></span><br><span class="line"><span class="string">    printf &quot;</span><span class="variable">$</span>&#123;GREEN&#125;<span class="variable">$</span>&#123;EchoFormat&#125; 内存信息 <span class="variable">$</span>&#123;EchoFormat&#125;<span class="variable">$</span>&#123;NC&#125;\n<span class="string">&quot;</span></span><br><span class="line"><span class="string">    printf &quot;</span>总共内存: %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>(free -mh|awk &quot;</span>NR==<span class="number">2</span><span class="string">&quot;|awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;</span>使用内存: %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>(free -mh|awk &quot;</span>NR==<span class="number">2</span><span class="string">&quot;|awk &#x27;&#123;print <span class="variable">$3</span>&#125;&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;</span>剩余内存: %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>(free -mh|awk &quot;</span>NR==<span class="number">2</span><span class="string">&quot;|awk &#x27;&#123;print <span class="variable">$4</span>&#125;&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;</span>内存使用占比: %<span class="literal">-1s</span> %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>(free | grep -i mem |awk &#x27;&#123;print <span class="variable">$6</span>/<span class="variable">$2</span>*100&#125;&#x27;|cut -c1-5) %</span></span><br><span class="line"><span class="string">    printf &quot;</span>占用内存排名前<span class="number">10</span>的soft:\n\n<span class="string">&quot;</span></span><br><span class="line"><span class="string">    ps -eo user,pid,pcpu,pmem,args --sort=-pmem  |head -n 10</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 磁盘使用量排序：</span></span><br><span class="line"><span class="string">Disk_Info() &#123;</span></span><br><span class="line"><span class="string">    printf &quot;</span><span class="variable">$</span>&#123;YELLOW&#125;<span class="variable">$</span>&#123;EchoFormat&#125; 各分区使用率 <span class="variable">$</span>&#123;EchoFormat&#125;<span class="variable">$</span>&#123;NC&#125;\n<span class="string">&quot;</span></span><br><span class="line"><span class="string">    df -h</span></span><br><span class="line"><span class="string">    echo</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Swap信息</span></span><br><span class="line"><span class="string">SwapInfo()&#123;</span></span><br><span class="line"><span class="string">    printf &quot;</span><span class="variable">$</span>&#123;BLUE&#125;<span class="variable">$</span>&#123;EchoFormat&#125; Swap信息 <span class="variable">$</span>&#123;EchoFormat&#125;<span class="variable">$</span>&#123;NC&#125;\n<span class="string">&quot;</span></span><br><span class="line"><span class="string">    printf &quot;</span>Swap总大小: %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>(free -mh|awk &quot;</span>NR==<span class="number">3</span><span class="string">&quot;|awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;</span>已用Swap: %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>(free -mh|awk &quot;</span>NR==<span class="number">3</span><span class="string">&quot;|awk &#x27;&#123;print <span class="variable">$3</span>&#125;&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;</span>可用Swap: %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>(free -mh|awk &quot;</span>NR==<span class="number">3</span><span class="string">&quot;|awk &#x27;&#123;print <span class="variable">$4</span>&#125;&#x27;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 网络信息</span></span><br><span class="line"><span class="string">NetworkInfo()&#123;</span></span><br><span class="line"><span class="string">    printf &quot;</span><span class="variable">$</span>&#123;RED&#125;<span class="variable">$</span>&#123;EchoFormat&#125; 网络信息 <span class="variable">$</span>&#123;EchoFormat&#125;<span class="variable">$</span>&#123;NC&#125;\n<span class="string">&quot;</span></span><br><span class="line"><span class="string">    printf &quot;</span>IP地址: %<span class="literal">-1s</span> %<span class="literal">-1s</span> %<span class="literal">-1s</span> %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;|tr -d &quot;</span>addr:<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    printf &quot;</span>网关: %<span class="literal">-1s</span> %<span class="literal">-1s</span> %<span class="literal">-1s</span> %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>(ifconfig -a|grep &quot;</span>netmask<span class="string">&quot;|grep -v 127.0.0.1|awk &#x27;&#123;print <span class="variable">$4</span>&#125;&#x27;) </span></span><br><span class="line"><span class="string">    printf &quot;</span>DNS: %<span class="literal">-1s</span> %<span class="literal">-1s</span> %<span class="literal">-1s</span> %<span class="literal">-1s</span> %<span class="literal">-1s</span>\n<span class="string">&quot; <span class="variable">$</span>(grep &quot;</span>nameserver<span class="string">&quot; /etc/resolv.conf | awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;)</span></span><br><span class="line"><span class="string">    if (ping -c2 -w2 www.baidu.com &amp;&gt;/dev/null);then</span></span><br><span class="line"><span class="string">        printf &quot;</span>网络是否连通: %s\n<span class="string">&quot; 是</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">        printf &quot;</span>网络是否连通: %s\n<span class="string">&quot; 否</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># docker检查</span></span><br><span class="line"><span class="string">DockerInfo()&#123;</span></span><br><span class="line"><span class="string">    printf &quot;</span><span class="variable">$</span>&#123;GREEN&#125;<span class="variable">$</span>&#123;EchoFormat&#125; docker运行情况 <span class="variable">$</span>&#123;EchoFormat&#125;<span class="variable">$</span>&#123;NC&#125;\n<span class="string">&quot;</span></span><br><span class="line"><span class="string">    printf &quot;</span>当前正在运行的容器：\n <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">--format</span> <span class="string">&quot;&#123;&#123;.Names&#125;&#125;&quot;</span>)\n<span class="string">&quot;</span></span><br><span class="line"><span class="string">    printf &quot;</span>当前没有运行的容器：\n <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">--format</span> <span class="string">&quot;&#123;&#123;.Names&#125;&#125;&quot;</span>|grep Exited)\n<span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 直接登录后打印</span></span><br><span class="line"><span class="string">SystemInfo </span></span><br><span class="line"><span class="string">CpuInfo</span></span><br><span class="line"><span class="string">MemoryInfo</span></span><br><span class="line"><span class="string">Disk_Info</span></span><br><span class="line"><span class="string">SwapInfo</span></span><br><span class="line"><span class="string">NetworkInfo</span></span><br><span class="line"><span class="string">DockerInfo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 登录后进入查看模式</span></span><br><span class="line"><span class="string"># All()&#123;</span></span><br><span class="line"><span class="string"># SystemInfo </span></span><br><span class="line"><span class="string"># CpuInfo</span></span><br><span class="line"><span class="string"># MemoryInfo</span></span><br><span class="line"><span class="string"># Disk_Info</span></span><br><span class="line"><span class="string"># SwapInfo</span></span><br><span class="line"><span class="string"># NetworkInfo</span></span><br><span class="line"><span class="string"># &#125;</span></span><br><span class="line"><span class="string"># All &gt;<span class="variable">$</span>&#123;LogFileName&#125;;less <span class="variable">$</span>&#123;LogFileName&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="2-Debian"><a href="#2-Debian" class="headerlink" title="2.Debian"></a>2.Debian</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">clear</span></span><br><span class="line"></span><br><span class="line">LogFileName=polling.<span class="variable">$</span>(date +%F-%T)</span><br><span class="line">EchoFormat=<span class="variable">$</span>(<span class="keyword">for</span> (( i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++ ));<span class="keyword">do</span> <span class="built_in">echo</span> <span class="literal">-n</span> <span class="string">&quot;=&quot;</span>;done)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">YELLOW=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">BLUE=<span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">NC=<span class="string">&#x27;\033[0m&#x27;</span> <span class="comment"># No Color</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统信息</span></span><br><span class="line">SystemInfo()&#123;</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;<span class="variable">$</span>&#123;EchoFormat&#125; 系统信息 <span class="variable">$</span>&#123;EchoFormat&#125;<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    printf <span class="string">&quot;系统类型: %-10s\n&quot;</span> <span class="variable">$</span>(uname <span class="literal">-o</span>)</span><br><span class="line">    printf <span class="string">&quot;系统版本: %-10s\n&quot;</span> <span class="string">&quot;<span class="variable">$</span>(cat /etc/os-release | grep &#x27;PRETTY_NAME&#x27; | cut -d &#x27;&quot;</span><span class="string">&#x27; -f 2)&quot;</span></span><br><span class="line"><span class="string">    printf &quot;内核信息: %-10s\n&quot; $(uname -r)</span></span><br><span class="line"><span class="string">    printf &quot;主机名: %-10s\n&quot; $(hostname)</span></span><br><span class="line"><span class="string">    printf &quot;编码格式: %-10s\n&quot; $&#123;LANG&#125;</span></span><br><span class="line"><span class="string">    printf &quot;系统当前时间: %-10s %-10s\n&quot; $(date +%F) $(date +%T)</span></span><br><span class="line"><span class="string">    printf &quot;系统运行负载: %-4s %-1s\n&quot; $(uptime | awk -F: &#x27;</span>&#123;print <span class="variable">$NF</span>&#125;<span class="string">&#x27; | awk -F, &#x27;</span>&#123;print <span class="variable">$1</span>,<span class="string">&quot;%&quot;</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;系统运行天数: %-10s\n&quot; $(uptime | awk -F, &#x27;</span>&#123;print <span class="variable">$1</span>&#125;<span class="string">&#x27; | awk &#x27;</span>&#123;print <span class="variable">$3</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;在线用户人数: %-3s\n&quot; $(who | wc -l)</span></span><br><span class="line"><span class="string">    printf &quot;SELinux: %-10s\n&quot; $(getenforce 2&gt;/dev/null || echo &quot;Disabled&quot;)</span></span><br><span class="line"><span class="string">    echo -e &quot;最后一次修改时间: $(uptime -s)&quot;</span></span><br><span class="line"><span class="string">    echo -e &quot;IP地址: $(hostname -I | cut -d&#x27;</span> <span class="string">&#x27; -f1)&quot;</span></span><br><span class="line"><span class="string">    echo -e &quot;Cpu处理器: $(lscpu | grep &quot;Model name:&quot; | sed &#x27;</span>s/Model name:\s*//<span class="string">&#x27;)&quot;</span></span><br><span class="line"><span class="string">    echo -e &quot;内存空间: $(free -h | awk &#x27;</span>/^Mem:/ &#123; print <span class="variable">$3</span> <span class="string">&quot;/&quot;</span> <span class="variable">$2</span> &#125;<span class="string">&#x27;)&quot;</span></span><br><span class="line"><span class="string">    echo -e &quot;交换空间: $(free -h | awk &#x27;</span>/^Swap:/ &#123; print <span class="variable">$3</span> <span class="string">&quot;/&quot;</span> <span class="variable">$2</span> &#125;<span class="string">&#x27;)&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># CPU信息</span></span><br><span class="line"><span class="string">CpuInfo()&#123;</span></span><br><span class="line"><span class="string">    MemonyId=$(top -b -n1 | awk &#x27;</span>NR==<span class="number">3</span><span class="string">&#x27; | awk -F, &#x27;</span>&#123;print <span class="variable">$4</span>&#125;<span class="string">&#x27; | cut -c 1-5)</span></span><br><span class="line"><span class="string">    MemonyUse=$(echo &quot;100-$&#123;MemonyId&#125;&quot; | bc)</span></span><br><span class="line"><span class="string">    printf &quot;$&#123;RED&#125;$&#123;EchoFormat&#125; CPU信息 $&#123;EchoFormat&#125;$&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="string">    printf &quot;逻辑CPU核数: %-3s\n&quot; $(nproc)</span></span><br><span class="line"><span class="string">    printf &quot;物理CPU核数: %-3s\n&quot; $(lscpu | grep &quot;Socket(s):&quot; | awk &#x27;</span>&#123;print <span class="variable">$2</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;CPU架构: %-3s\n&quot; $(uname -m)</span></span><br><span class="line"><span class="string">    printf &quot;CPU设置型号: %-3s\n&quot; &quot;$(lscpu | grep &quot;Model name:&quot; | sed &#x27;</span>s/Model name:\s*//<span class="string">&#x27;)&quot;</span></span><br><span class="line"><span class="string">    echo -e &quot;CPU 1分钟负载: `awk  &#x27;</span>&#123;printf <span class="string">&quot;%15s&quot;</span>,<span class="variable">$1</span>&#125;<span class="string">&#x27; /proc/loadavg`&quot;</span></span><br><span class="line"><span class="string">    echo -e &quot;CPU 5分钟负载: `awk  &#x27;</span>&#123;printf <span class="string">&quot;%15s&quot;</span>,<span class="variable">$2</span>&#125;<span class="string">&#x27; /proc/loadavg`&quot;</span></span><br><span class="line"><span class="string">    echo -e &quot;CPU10分钟负载: `awk  &#x27;</span>&#123;printf <span class="string">&quot;%15s&quot;</span>,<span class="variable">$3</span>&#125;<span class="string">&#x27; /proc/loadavg`&quot;</span></span><br><span class="line"><span class="string">    printf &quot;使用CPU占比: %-1s %-1s\n&quot; $&#123;MemonyUse&#125; %</span></span><br><span class="line"><span class="string">    printf &quot;空闲CPU占比: %-1s %-1s\n&quot; $&#123;MemonyId&#125; %</span></span><br><span class="line"><span class="string">    printf &quot;占用CPU Top10信息:\n\n&quot;</span></span><br><span class="line"><span class="string">    ps -eo user,pid,pcpu,pmem,args --sort=-pcpu | head -n 10</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Memory信息</span></span><br><span class="line"><span class="string">MemoryInfo()&#123;</span></span><br><span class="line"><span class="string">    printf &quot;$&#123;GREEN&#125;$&#123;EchoFormat&#125; 内存信息 $&#123;EchoFormat&#125;$&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="string">    printf &quot;总共内存: %-1s\n&quot; $(free -h | awk &#x27;</span>/^Mem:/ &#123;print <span class="variable">$2</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;使用内存: %-1s\n&quot; $(free -h | awk &#x27;</span>/^Mem:/ &#123;print <span class="variable">$3</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;剩余内存: %-1s\n&quot; $(free -h | awk &#x27;</span>/^Mem:/ &#123;print <span class="variable">$4</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;内存使用占比: %-1s %-1s\n&quot; $(free | awk &#x27;</span>/^Mem:/ &#123;printf <span class="string">&quot;%.2f&quot;</span>, <span class="variable">$3</span>/<span class="variable">$2</span>*<span class="number">100</span>&#125;<span class="string">&#x27;) %</span></span><br><span class="line"><span class="string">    printf &quot;占用内存排名前10的soft:\n\n&quot;</span></span><br><span class="line"><span class="string">    ps -eo user,pid,pcpu,pmem,args --sort=-pmem | head -n 10</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 磁盘使用量排序：</span></span><br><span class="line"><span class="string">Disk_Info() &#123;</span></span><br><span class="line"><span class="string">    printf &quot;$&#123;YELLOW&#125;$&#123;EchoFormat&#125; 各分区使用率 $&#123;EchoFormat&#125;$&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="string">    df -h</span></span><br><span class="line"><span class="string">    echo</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Swap信息</span></span><br><span class="line"><span class="string">SwapInfo()&#123;</span></span><br><span class="line"><span class="string">    printf &quot;$&#123;BLUE&#125;$&#123;EchoFormat&#125; Swap信息 $&#123;EchoFormat&#125;$&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="string">    printf &quot;Swap总大小: %-1s\n&quot; $(free -h | awk &#x27;</span>/^Swap:/ &#123;print <span class="variable">$2</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;已用Swap: %-1s\n&quot; $(free -h | awk &#x27;</span>/^Swap:/ &#123;print <span class="variable">$3</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;可用Swap: %-1s\n&quot; $(free -h | awk &#x27;</span>/^Swap:/ &#123;print <span class="variable">$4</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 网络信息</span></span><br><span class="line"><span class="string">NetworkInfo()&#123;</span></span><br><span class="line"><span class="string">    printf &quot;$&#123;RED&#125;$&#123;EchoFormat&#125; 网络信息 $&#123;EchoFormat&#125;$&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="string">    printf &quot;IP地址: %-1s %-1s %-1s %-1s\n&quot; $(ip addr show | grep &#x27;</span>inet <span class="string">&#x27; | grep -v &#x27;</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="string">&#x27; | awk &#x27;</span>&#123;print <span class="variable">$2</span>&#125;<span class="string">&#x27; | cut -d/ -f1)</span></span><br><span class="line"><span class="string">    printf &quot;网关: %-1s %-1s %-1s %-1s\n&quot; $(ip route | grep default | awk &#x27;</span>&#123;print <span class="variable">$3</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    printf &quot;DNS: %-1s %-1s %-1s %-1s %-1s\n&quot; $(grep &quot;nameserver&quot; /etc/resolv.conf | awk &#x27;</span>&#123;print <span class="variable">$2</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    if (ping -c2 -w2 www.baidu.com &amp;&gt;/dev/null);then</span></span><br><span class="line"><span class="string">        printf &quot;网络是否连通: %s\n&quot; 是</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">        printf &quot;网络是否连通: %s\n&quot; 否</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># docker检查</span></span><br><span class="line"><span class="string">DockerInfo()&#123;</span></span><br><span class="line"><span class="string">    printf &quot;$&#123;GREEN&#125;$&#123;EchoFormat&#125; docker运行情况 $&#123;EchoFormat&#125;$&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="string">    if command -v docker &amp;&gt;/dev/null; then</span></span><br><span class="line"><span class="string">        printf &quot;当前正在运行的容器：\n $(docker ps --format &quot;&#123;&#123;.Names&#125;&#125;&quot;)\n&quot;</span></span><br><span class="line"><span class="string">        printf &quot;当前没有运行的容器：\n $(docker ps -a --filter &quot;status=exited&quot; --format &quot;&#123;&#123;.Names&#125;&#125;&quot;)\n&quot;</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">        printf &quot;Docker 未安装或未启动\n&quot;</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 直接登录后打印</span></span><br><span class="line"><span class="string">SystemInfo </span></span><br><span class="line"><span class="string">CpuInfo</span></span><br><span class="line"><span class="string">MemoryInfo</span></span><br><span class="line"><span class="string">Disk_Info</span></span><br><span class="line"><span class="string">SwapInfo</span></span><br><span class="line"><span class="string">NetworkInfo</span></span><br><span class="line"><span class="string">DockerInfo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 登录后进入查看模式</span></span><br><span class="line"><span class="string"># All()&#123;</span></span><br><span class="line"><span class="string"># SystemInfo </span></span><br><span class="line"><span class="string"># CpuInfo</span></span><br><span class="line"><span class="string"># MemoryInfo</span></span><br><span class="line"><span class="string"># Disk_Info</span></span><br><span class="line"><span class="string"># SwapInfo</span></span><br><span class="line"><span class="string"># NetworkInfo</span></span><br><span class="line"><span class="string"># &#125;</span></span><br><span class="line"><span class="string"># All &gt;$&#123;LogFileName&#125;;less $&#123;LogFileName&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali配置静态网络</title>
      <link href="/2024/07/12/Kali%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/07/12/Kali%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Kali如何配置静态IP，并且实现网络访问"><a href="#Kali如何配置静态IP，并且实现网络访问" class="headerlink" title="Kali如何配置静态IP，并且实现网络访问"></a>Kali如何配置静态IP，并且实现网络访问</h1><blockquote><p>因为kali是debian系统的一个分支所以配置静态IP的时候和centos7不同</p></blockquote><h2 id="1-桥接模式"><a href="#1-桥接模式" class="headerlink" title="1.桥接模式"></a>1.桥接模式</h2><blockquote><p>因为我想在局域网内可以访问服务所以，我选择了桥接模式</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/12/16-27-51-image-20240712162751549-80c84d.png" alt="image-20240712162751549"></p><h2 id="2-查看本机局域网无线IP网关"><a href="#2-查看本机局域网无线IP网关" class="headerlink" title="2.查看本机局域网无线IP网关"></a>2.查看本机局域网无线IP网关</h2><blockquote><p>Windows系统 <strong>Win+R</strong> &#x3D;&gt;输入 <strong>CMD</strong> &#x3D;&gt; 输入 <strong>ipconfig</strong></p></blockquote><p>可以看到我的局域网内的网关是192.168.15.117所以我们后续配置需要用到这个网关</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/12/16-29-23-image-20240712162923006-e4051e.png" alt="image-20240712162923006"></p><h2 id="3-登录虚拟机配置kali的静态IP地址"><a href="#3-登录虚拟机配置kali的静态IP地址" class="headerlink" title="3.登录虚拟机配置kali的静态IP地址"></a>3.登录虚拟机配置kali的静态IP地址</h2><h3 id="1-SSH登录上去后输入指令并写入如下配置"><a href="#1-SSH登录上去后输入指令并写入如下配置" class="headerlink" title="1.SSH登录上去后输入指令并写入如下配置"></a>1.SSH登录上去后输入指令并写入如下配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/network/interfaces</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.15.100</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.15.117</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/12/16-31-24-image-20240712163124566-504d39.png" alt="image-20240712163124566"></p><h3 id="2-修改DNS地址并写入如下配置"><a href="#2-修改DNS地址并写入如下配置" class="headerlink" title="2.修改DNS地址并写入如下配置"></a>2.修改DNS地址并写入如下配置</h3><blockquote><p>推荐两个国内的DNS地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">119.29.29.29是腾讯的公共DNS</span><br><span class="line">223.5.5.5是阿里的公共DNS</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">nameserver 119.29.29.29</span><br><span class="line">nameserver 223.5.5.5</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/12/16-34-20-image-20240712163420570-5c4c3d.png" alt="image-20240712163420570"></p><h2 id="4-重启Kali-观察配置生效"><a href="#4-重启Kali-观察配置生效" class="headerlink" title="4.重启Kali 观察配置生效"></a>4.重启Kali 观察配置生效</h2><p>配置完IP信息后，我们重启Kali的网络服务，让网络配置生效</p><p>重启网络服务之前需要关闭NetworkManager，并且禁止该服务开机自启</p><p>注:关闭NetworkManager服务,该服务是网络服务的图形管理工具,该服务会自动接管networking服务,有可能造成重启networking服务时配置不生效的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl <span class="built_in">disable</span> NetworkManager</span><br></pre></td></tr></table></figure><p>再重启Kali网络服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart networking</span><br></pre></td></tr></table></figure><p>查看IP配置是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0</span><br></pre></td></tr></table></figure><p>(如果)IP地址没有变化，如果是首次更改IP配置，然后重启网络服务，IP 地址没生效属于正常情况，再重启一次就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart networking</span><br><span class="line">ifconfig eth0</span><br></pre></td></tr></table></figure><p>配置完后，测试外网连通性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 4 www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/12/16-38-27-kali-f6b585.jpeg" alt="kali"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 全栈渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> 渗透系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab部署与优化</title>
      <link href="/2024/07/12/GitLab%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
      <url>/2024/07/12/GitLab%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="GitLab部署和安装"><a href="#GitLab部署和安装" class="headerlink" title="GitLab部署和安装"></a>GitLab部署和安装</h2><h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><p>GitLab介绍<br>GitLab安装<br>  下载镜像<br>  创建gitlab容器<br>  进入容器中查看GitLab启动状态<br>配置SSH访问端口<br>修改账号密码<br>使用root账号登录</p><h2 id="GitLab介绍"><a href="#GitLab介绍" class="headerlink" title="GitLab介绍"></a>GitLab介绍</h2><p>GitLab 是一个基于 web 的 Git 仓库管理工具，提供了代码托管、版本控制、协作开发、持续集成等功能，是一个综合的 DevOps 平台。用户可以使用 GitLab 托管他们的代码仓库，并利用其丰富的功能来管理和协作开发项目。<br>以下是 GitLab 的一些主要特点和功能：</p><ol><li><strong>代码托管：</strong> GitLab 提供了强大的 Git 仓库管理功能，用户可以轻松地创建、克隆、推送和拉取代码，实现团队协作开发。</li><li><strong>问题追踪：</strong> 用户可以在 GitLab 中创建和管理问题、任务和缺陷报告，方便团队成员跟踪和解决项目中的各种事务。</li><li><strong>持续集成&#x2F;持续部署 (CI&#x2F;CD)：</strong> GitLab 提供了内置的 CI&#x2F;CD 功能，支持自动化构建、测试和部署应用程序，帮助团队实现快速交付和持续集成。</li><li><strong>代码审核：</strong> GitLab 提供了代码审核功能，可以进行代码评审、审查和讨论，帮助团队改善代码质量和合作效率。</li><li><strong>权限管理：</strong> GitLab 具有灵活的权限管理机制，管理员可以根据需要设置不同用户或团队的访问权限，保护代码和项目的安全性。</li><li><strong>集成插件：</strong> GitLab 支持与其他 DevOps 工具和服务的集成，如 Jira、Slack、Kubernetes 等，帮助用户构建完整的开发和部署流程。</li><li><strong>自托管选项：</strong> 除了 GitLab 的托管服务之外，用户还可以选择在自己的服务器上部署 GitLab，实现自主控制和定制化需求。</li></ol><p>GitLab 的功能丰富且易于使用，适用于个人开发者、小型团队和大型企业，帮助他们更高效地管理代码、协作开发并实现持续交付。GitLab 的开源版本和商业版本提供了不同的功能和服务，满足了不同用户的需求。<br>官网地址：<a href="https://about.gitlab.com/solutions/devops-platform/">https://about.gitlab.com/solutions/devops-platform/</a></p><h2 id="GitLab安装"><a href="#GitLab安装" class="headerlink" title="GitLab安装"></a>GitLab安装</h2><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>方式一：使用下列命令即可在线拉取拉取gitlab镜像，但是镜像很大。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tmp]# docker load -i gitlab-ce.tar</span><br><span class="line">ad9512736d82: Loading layer [==================================================&gt;]  21.45MB/21.45MB</span><br><span class="line">cb069c85decc: Loading layer [==================================================&gt;]  798.7kB/798.7kB</span><br><span class="line">e8a079aa9e5c: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">9f3f137f705c: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">d01ad5c6ecc4: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">16731fb67f55: Loading layer [==================================================&gt;]  22.02kB/22.02kB</span><br><span class="line">01266706d081: Loading layer [==================================================&gt;]  2.334GB/2.334GB</span><br><span class="line">Loaded image: gitlab/gitlab-ce:latest</span><br><span class="line">[root@localhost tmp]# docker images</span><br><span class="line">REPOSITORY         TAG              IMAGE ID       CREATED         SIZE</span><br><span class="line">gitlab/gitlab-ce   latest           46cd6954564a   11 months ago   2.36GB</span><br><span class="line">rabbitmq           3.8-management   699038cb2b96   12 months ago   250MB</span><br><span class="line">[root@localhost tmp]#</span><br></pre></td></tr></table></figure><h3 id="创建gitlab容器"><a href="#创建gitlab容器" class="headerlink" title="创建gitlab容器"></a>创建gitlab容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#创建数据目录</span><br><span class="line">mkdir -p /home/gitlab/config</span><br><span class="line">mkdir -p /home/gitlab/logs</span><br><span class="line">mkdir -p /home/gitlab/data</span><br><span class="line"></span><br><span class="line">#创建容器</span><br><span class="line">docker run -d \</span><br><span class="line">    --hostname localhost -p 443:443 -p 80:80 -p 1024:22  \</span><br><span class="line">    --name gitlab  \</span><br><span class="line">    -v /home/gitlab/config:/etc/gitlab \</span><br><span class="line">    -v /home/gitlab/logs:/var/log/gitlab \</span><br><span class="line">    -v /home/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><h3 id="进入容器中查看GitLab启动状态"><a href="#进入容器中查看GitLab启动状态" class="headerlink" title="进入容器中查看GitLab启动状态"></a>进入容器中查看GitLab启动状态</h3><p>进入容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab bash</span><br></pre></td></tr></table></figure><p>查看状态容器中GitLab的运行状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl status</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/11-07-42-image-20240716110742589-b27e98.png" alt="image-20240716110742589"></p><p>启动需要的时间较长，当看到所有<code>15个服务</code>都是run状态之后才能成功访问。</p><p>查看日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看GitLab所有的logs,用于观察GitLab是否启动完成 按 Ctrl-C 退出</span><br><span class="line">gitlab-ctl tail</span><br></pre></td></tr></table></figure><blockquote><p>注意：gitlab依赖的服务较多，启动所需内存官方建议为4G以上，不要立马就访问要等两三分钟左右。</p></blockquote><p>等启动完毕，浏览器访问：<a href="http://192.168.100.132:80，效果如下图：">http://192.168.100.132:80，效果如下图：</a></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/11-08-06-image-20240716110806602-22689d.png" alt="image-20240716110806602">image.png</p><h2 id="配置SSH访问端口"><a href="#配置SSH访问端口" class="headerlink" title="配置SSH访问端口"></a>配置SSH访问端口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 进入容器</span><br><span class="line">docker exec -it gitlab /bin/bash</span><br><span class="line"></span><br><span class="line"># 编辑gitlab.rb文件</span><br><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"># 进入文件编辑，跳转到文件末位</span><br><span class="line">G</span><br><span class="line"></span><br><span class="line"># 把下面这3个配置放到文件末尾</span><br><span class="line"># 配置http协议所使用的访问地址,不加端口号默认为80</span><br><span class="line">external_url &#x27;http://192.168.100.132&#x27;</span><br><span class="line"></span><br><span class="line"># 配置ssh协议所使用的访问地址和端口 # 此端口是run时22端口映射的1024端口</span><br><span class="line">gitlab_rails[&#x27;gitlab_ssh_host&#x27;] = &#x27;192.168.100.132&#x27;</span><br><span class="line">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 1024</span><br><span class="line"></span><br><span class="line"># 退出文件编辑</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"># 重新配置gitlab</span><br><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>下面命令不用，了解即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 拉取/var/log/gitlab下子目录的日志</span><br><span class="line">gitlab-ctl tail gitlab-rails</span><br><span class="line"></span><br><span class="line"># 拉取某个指定的日志文件</span><br><span class="line">gitlab-ctl tail nginx/gitlab_error.log</span><br><span class="line"></span><br><span class="line"># 启动 gitlab 服务</span><br><span class="line">gitlab-ctl start</span><br><span class="line"></span><br><span class="line"># 停止 gitlab 服务</span><br><span class="line">gitlab-ctl stop</span><br></pre></td></tr></table></figure><h2 id="修改账号密码"><a href="#修改账号密码" class="headerlink" title="修改账号密码"></a>修改账号密码</h2><p>初始化 gitlab 中的 root 账号密码：<br>1、登录容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it -u root gitlab /bin/bash</span><br></pre></td></tr></table></figure><p>2、登录GitLab的Rails控制台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rails console</span><br></pre></td></tr></table></figure><p>等待一段时间后，可以在控制台中输入命令</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/11-08-20-image-20240716110820940-4ee742.png" alt="image-20240716110820940"></p><p>3、定位到root用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User.where(id: 1).first</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/11-07-17-640-6ac3fc.webp" alt="图片"></p><p>4、修改root密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 执行下面的命令，将 xxxxx 改为自己的密码</span><br><span class="line"># 注意：密码至少需要8个字符</span><br><span class="line">user.password=&#x27;cxypa123456&#x27;</span><br><span class="line"></span><br><span class="line"># 修改后，保存用密码</span><br><span class="line">user.save</span><br></pre></td></tr></table></figure><p>5、下面命令不用，了解即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有的用户</span><br><span class="line">user = User.all</span><br><span class="line"># 通过条件查询用户 常见的where条件有 username email state </span><br><span class="line">user = User.where(id:1).first</span><br><span class="line">user = User.find_by(email: &#x27;admin@local.host&#x27;)</span><br><span class="line"># 通过id查询用户</span><br><span class="line">user = User.find(1)</span><br><span class="line"></span><br><span class="line"># 查询用户某个字段的值 显示当前用户的email</span><br><span class="line">user.email</span><br><span class="line"></span><br><span class="line"># 修改密码</span><br><span class="line">user.password = &#x27;cxypa123456&#x27;</span><br><span class="line">user.password_confirmation = &#x27;cxypa123456&#x27;</span><br><span class="line">user.save</span><br><span class="line">echo &#x27;user = User.find_by(username: &quot;root&quot;);user.password=&quot;secret_pass!&quot;;user.password_confirmation=&quot;secret_pass!&quot;;user.save&#x27; | sudo gitlab-rails console</span><br><span class="line"></span><br><span class="line"># 修改用户状态</span><br><span class="line">user.state = &#x27;active&#x27;</span><br><span class="line">user.save</span><br></pre></td></tr></table></figure><h2 id="使用root账号登录"><a href="#使用root账号登录" class="headerlink" title="使用root账号登录"></a>使用root账号登录</h2><p>来到登录页面，使用root账号和刚才设置的密码登录gitlab。效果如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/11-08-37-image-20240716110837004-b7c96a.png" alt="image-20240716110837004">登录后的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/11-08-47-image-20240716110847345-bad224.png" alt="image-20240716110847345"><br>到此就完成了gitlab的安装和登录。</p><h2 id="Gitlab优化"><a href="#Gitlab优化" class="headerlink" title="Gitlab优化"></a>Gitlab优化</h2><p>代码库最近换了，使用了 GitLab。这两天观察了下服务器的使用情况，发现 GitLab 很吃内存。直接占用了 30 多个G的内存。</p><h3 id="一、发现问题"><a href="#一、发现问题" class="headerlink" title="一、发现问题"></a>一、发现问题</h3><p>　　使用 top 命令查看内存时，发现前几十个都是同一个应用程序。再通过 ll &#x2F;proc&#x2F;pid 命令查找具体程序位置，发现都是 GItLab 。</p><p>　　这其中包含了 gitlab、postgresql、nginx 等各种 gitlab 所需的服务。具体如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/11-09-42-592961-20230421132248422-967965063-6da056.png" alt="img"></p><h3 id="二、查找原因"><a href="#二、查找原因" class="headerlink" title="二、查找原因"></a>二、查找原因</h3><p>　　经过查证。GitLab 在默认情况下，其配置是很吃配置的，如工作的核数，是当前机器 CPU 核数 +1。再加上数据库缓存、Sidekiq 等都需要设置。</p><p>　　具体可以参考：</p><p>　　　　<a href="https://blog.csdn.net/ouyang_peng/article/details/84066417">解决 GitLab 内存消耗大</a></p><p>　　　　<a href="https://docs.gitlab.com/ee/administration/operations/puma.html">Puma 介绍</a></p><p>　　　　<a href="https://docs.gitlab.com/ee/administration/sidekiq/">Sidekiq 介绍</a></p><h3 id="三、解决"><a href="#三、解决" class="headerlink" title="三、解决"></a>三、解决</h3><p>　　问题已经找到，那就直接修改问题即可。</p><p>　　主要就是修改 gitlab.rd 配置文件即可。（下面的配置可以满足几十人的工作需求）</p><h4 id="1、修改-Puma（在-13-0版本后是这个，以前是unicorn）"><a href="#1、修改-Puma（在-13-0版本后是这个，以前是unicorn）" class="headerlink" title="1、修改 Puma（在 13.0版本后是这个，以前是unicorn）"></a>1、修改 Puma（在 13.0版本后是这个，以前是unicorn）</h4><p>　　　　主要是设置工作进程个数和最大、最小线程个数。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/11-10-14-592961-20230421142517758-715053653-6f02bf.png" alt="img"></p><h4 id="2、修改-Sidekiq"><a href="#2、修改-Sidekiq" class="headerlink" title="2、修改 Sidekiq"></a>2、修改 Sidekiq</h4><p>　　　　设置 Sidekiq 并发个数，建议是设置成相同的数值。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/11-10-18-592961-20230421142540024-1040276892-c93468.png" alt="img"></p><h4 id="3、修改-postgresql"><a href="#3、修改-postgresql" class="headerlink" title="3、修改 postgresql"></a>3、修改 postgresql</h4><p>　　　　设置缓存大小、工作进程个数。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/11-10-20-592961-20230421142557925-1613338941-10fd4b.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/16/11-09-42-592961-20230421142612720-1985546220-12c6db.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 系统 </category>
          
          <category> GitLab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> 软件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毛玻璃去白边</title>
      <link href="/2024/07/11/%E6%AF%9B%E7%8E%BB%E7%92%83%E5%8E%BB%E7%99%BD%E8%BE%B9/"/>
      <url>/2024/07/11/%E6%AF%9B%E7%8E%BB%E7%92%83%E5%8E%BB%E7%99%BD%E8%BE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="背景毛玻璃效果"><a href="#背景毛玻璃效果" class="headerlink" title="背景毛玻璃效果"></a>背景毛玻璃效果</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;list&quot;&gt;</span><br><span class="line">&lt;view class=&quot;fixbg&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="全局样式添加-APP-vue"><a href="#全局样式添加-APP-vue" class="headerlink" title="全局样式添加(APP.vue)"></a>全局样式添加(APP.vue)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">onLaunch: function() &#123;</span><br><span class="line">console.log(&#x27;App Launch&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">onShow: function() &#123;</span><br><span class="line">console.log(&#x27;App Show&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">onHide: function() &#123;</span><br><span class="line">console.log(&#x27;App Hide&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/*每个页面公共css */</span><br><span class="line">.container&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">height: calc(100vh - 70px);</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.container scroll-view&#123;</span><br><span class="line">height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">    /* 毛玻璃效果其实是 背景模糊用filter的blur 然后加上transform 做一个缩放，如果不加transform会出现白边*/</span><br><span class="line">.fixbg&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 100vh;</span><br><span class="line">position: fixed;</span><br><span class="line">left: 0;</span><br><span class="line">top: 0;</span><br><span class="line">background-image: url(static/wangyiyunyinyue.png);</span><br><span class="line">background-size: cover;</span><br><span class="line">background-position: center 0;</span><br><span class="line">filter: blur(10px);</span><br><span class="line">transform: scale(1.2);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> 遇到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>border-radius溢出问题</title>
      <link href="/2024/07/10/border-radius%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2024/07/10/border-radius%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="border-radius溢出问题"><a href="#border-radius溢出问题" class="headerlink" title="border-radius溢出问题"></a>border-radius溢出问题</h1><blockquote><p>今天在开发项目时遇到了border-radius的溢出问题，当我给外层ul设置一个border-radius时，内层li的内容就出现了溢出问题，会超过外层的border-radius。<br><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/10/18-06-20-%E4%B8%8B%E8%BD%BDundefined5undefined-146187.png" alt="CSS"></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/10/18-03-21-image-20240710180321449-844a8c.png" alt="image-20240710180321449"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.index-list-img</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">212</span>rpx;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">212</span>rpx;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决方案：在父元素ul的样式中添加overflow-hidden，这样超过ul的元素就会被隐藏。"><a href="#解决方案：在父元素ul的样式中添加overflow-hidden，这样超过ul的元素就会被隐藏。" class="headerlink" title="解决方案：在父元素ul的样式中添加overflow:hidden，这样超过ul的元素就会被隐藏。"></a>解决方案：在父元素ul的样式中添加overflow:hidden，这样超过ul的元素就会被隐藏。</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.index-list-img</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">212</span>rpx;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">212</span>rpx;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">30</span>rpx;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/10/18-04-40-image-20240710180440031-cf3158.png" alt="image-20240710180440031"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> 遇到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基础</title>
      <link href="/2024/07/10/React%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/07/10/React%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="React-介绍"><a href="#React-介绍" class="headerlink" title="React 介绍"></a>React 介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/10/12-56-28-react_logo-5c9606.jpeg" alt="React Logo"></p><blockquote><p>react是一个用于构建用户<strong>界面</strong>的 JavaScript 库</p><p>react官网(<a href="https://reactjs.org/">https://reactjs.org/</a>)</p><p>react中文网(<a href="https://zh-hans.reactjs.org/">https://zh-hans.reactjs.org/</a>)</p></blockquote><ul><li><p>React 是一个用于构建用户界面（UI，对咱们前端来说，简单理解为：HTML 页面）的 JavaScript 库  </p></li><li><p>如果从mvc的角度来看，React仅仅是视图层（V）的解决方案。也就是只负责视图的渲染，并非提供了完整了M和C的功能</p></li><li><p>react&#x2F;react-dom&#x2F;react-router&#x2F;redux: 框架</p></li><li><p>React 起源于 Facebook 内部项目（News Feed，2011），后又用来架设 Instagram 的网站（2012），并于 2013 年 5 月开源<a href="https://baike.baidu.com/item/react/18077599?fr=aladdin">react介绍</a></p></li><li><p>React 是最流行的前端开发框架之一，其他：Vue、Angular 等等<a href="https://www.npmtrends.com/">框架对比</a></p></li></ul><h2 id="react特点"><a href="#react特点" class="headerlink" title="react特点"></a>react特点</h2><h3 id="声明式UI"><a href="#声明式UI" class="headerlink" title="声明式UI"></a>声明式UI</h3><p>你只需要描述UI（HTML）看起来是什么样的，就跟写HTML一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsx = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React! 动态数据变化:&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>声明式对应的是命令式，声明式关注的是what，命令式关注的是how</p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><ul><li>组件是react中<strong>最重要</strong>的内容</li><li>组件用于表示页面中的部分内容</li><li>组合、复用多个组件，就可以实现完整的页面功能</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/10/12-57-49-%E7%BB%84%E4%BB%B6-1629115179921-a3a685.png"></p><h3 id="学习一次，随处使用"><a href="#学习一次，随处使用" class="headerlink" title="学习一次，随处使用"></a>学习一次，随处使用</h3><ul><li>使用react&#x2F;rect-dom可以开发Web应用</li><li>使用react&#x2F;react-native可以开发移动端原生应用（react-native）  RN   安卓 和 ios应用    flutter</li><li>使用react可以开发VR（虚拟现实）应用（react360）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/10/12-58-37-react-use-1629115179922-7f569a.png"></p><p>从你的角度看 React 特点：</p><ul><li>工资高、大厂必备（阿里在用）</li><li>工资高、大厂必备（字节跳动在用）</li><li>工资高、大厂必备（百度、腾讯、京东、蚂蚁金服、拼多多、美团、外企、银行等都在用）</li></ul><h2 id="React-脚手架（CLI）"><a href="#React-脚手架（CLI）" class="headerlink" title="React 脚手架（CLI）"></a>React 脚手架（CLI）</h2><ul><li>React 脚手架的介绍</li><li>使用 React 脚手架创建项目</li><li>项目目录结构调整</li></ul><h3 id="React-脚手架的介绍"><a href="#React-脚手架的介绍" class="headerlink" title="React 脚手架的介绍"></a>React 脚手架的介绍</h3><ul><li>脚手架：为了保证各施工过程顺利进行而搭设的工作平台</li><li>对于前端项目开发来说，脚手架是为了保证前端项目开发过程顺利进行而搭设的开发平台</li><li>脚手架的意义：<ul><li>现代的前端开发日趋成熟，需要依赖于各种工具，比如，webpack、babel、eslint、sass&#x2F;less&#x2F;postcss等</li><li>工具配置繁琐、重复，各项目之间的配置大同小异</li><li>开发阶段、项目发布，配置不同<ul><li>项目开始前，帮你搭好架子，省去繁琐的 webpack 配置</li><li>项目开发时，热更新、格式化代码、git 提交时自动校验代码格式等</li><li>项目发布时，一键自动打包，包括：代码压缩、优化、按需加载等</li></ul></li></ul></li></ul><h3 id="使用-React-脚手架创建项目"><a href="#使用-React-脚手架创建项目" class="headerlink" title="使用 React 脚手架创建项目"></a>使用 React 脚手架创建项目</h3><ul><li>命令：<code>npx create-react-app react-basic</code><ul><li>npx create-react-app 是固定命令，<code>create-react-app</code> 是 React 脚手架的名称</li><li>react-basic 表示项目名称，可以修改</li></ul></li><li>启动项目：<code>yarn start</code> or <code>npm start</code> </li><li><code>npx</code> 是 npm v5.2 版本新添加的命令，用来简化 npm 中工具包的使用<ul><li>原始：1 全局安装<code>npm i -g create-react-app</code> 2 在通过脚手架的命令来创建 React 项目</li><li>现在：npx 调用最新的 create-react-app 直接创建 React 项目</li></ul></li></ul><h3 id="项目目录结构说明和调整"><a href="#项目目录结构说明和调整" class="headerlink" title="项目目录结构说明和调整"></a>项目目录结构说明和调整</h3><ul><li>说明：<ul><li><code>src</code> 目录是我们写代码进行项目开发的目录</li><li>查看 <code>package.json</code> 两个核心库：<code>react</code>、<code>react-dom</code>（脚手架已经帮我们安装好，我们直接用即可）</li></ul></li><li>调整：<ol><li>删除 src 目录下的所有文件</li><li>创建 index.js 文件作为项目的入口文件，在这个文件中写 React 代码即可</li></ol></li></ul><h2 id="React-的基本使用"><a href="#React-的基本使用" class="headerlink" title="React 的基本使用"></a>React 的基本使用</h2><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><ul><li>使用步骤</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 导入react和react-dom     </span><br><span class="line">- 创建react元素(虚拟DOM)</span><br><span class="line">- 渲染react元素到页面中</span><br></pre></td></tr></table></figure><ul><li>导入react和react-dom</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入react和react-dom</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>创建react元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建元素</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;hello react&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>渲染react元素到页面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染react元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li>使用react，生成以下结构</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;demo&quot;</span>&gt;这是一个react案例&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;</span><br><span class="line">const element= React.createElement(&#x27;div&#x27;,&#123;class:&#x27;aa&#x27;,id:&#x27;demo&#x27;&#125;,&quot;我是一个盒子&quot;)</span><br><span class="line">console.log(element)</span><br><span class="line">ReactDOM.render(element,document.getElementById(&#x27;root&#x27;))</span><br></pre></td></tr></table></figure><ol start="2"><li>生成结构2</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul <span class="keyword">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;</span><br><span class="line">const element= React.createElement(&#x27;ul&#x27;,&#123;className:&#x27;list&#x27;&#125;,[</span><br><span class="line">    React.createElement(&#x27;li&#x27;,null,&#x27;苹果&#x27;),</span><br><span class="line">    React.createElement(&#x27;li&#x27;,null,&#x27;香蕉&#x27;),</span><br><span class="line">    React.createElement(&#x27;li&#x27;,null,&#x27;榴莲&#x27;),</span><br><span class="line">])</span><br><span class="line">console.log(element)</span><br><span class="line"></span><br><span class="line">ReactDOM.render(element,document.getElementById(&#x27;root&#x27;))</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>能够说出react是什么<ul><li>是用于构建用户界面的javascript库</li></ul></li><li>能够说出react的特点<ul><li>声明式ui</li><li>组件化</li><li>一处学习，多次使用  react-dom  react-native</li></ul></li><li>能够掌握react的基本用法</li><li>能够使用react脚手架<ul><li><code>yarn global add create-react-app</code></li></ul></li></ul><h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><h2 id="JSX的基本使用"><a href="#JSX的基本使用" class="headerlink" title="JSX的基本使用"></a>JSX的基本使用</h2><h3 id="createElement的问题"><a href="#createElement的问题" class="headerlink" title="createElement的问题"></a>createElement的问题</h3><ul><li>繁琐不简洁</li><li>不直观，无法一眼看出所描述的结构</li><li>不优雅，开发体验不好</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/10/13-23-56-jsx%E7%9A%84%E4%BC%98%E7%82%B9-cbfc0d.png"></p><h3 id="JSX简介"><a href="#JSX简介" class="headerlink" title="JSX简介"></a>JSX简介</h3><p><code>JSX</code>是<code>JavaScript XML</code>的简写，表示了在Javascript代码中写XML(HTML)格式的代码</p><p>优势：声明式语法更加直观，与HTML结构相同，降低学习成本，提高开发效率。</p><p> <strong>JSX是react的核心内容</strong></p><p>注意：<em>JSX 不是标准的 JS 语法，是 JS 的语法扩展。脚手架中内置的 <a href="@babel/plugin-transform-react-jsx">@babel&#x2F;plugin-transform-react-jsx</a> 包，用来解析该语法。</em></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/10/13-24-01-JSXundefined%E5%A3%B0%E6%98%8E%E5%BC%8Fvs%E5%91%BD%E4%BB%A4%E5%BC%8F-1629116328806-f61d83.png" alt="JSX 声明式vs命令式"></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 导入react和reactDOM包</span><br><span class="line">- 使用jsx语法创建react元素</span><br><span class="line">- 把react元素渲染到页面中</span><br></pre></td></tr></table></figure><ul><li>导入react和reactDOM</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入react和react-dom</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>创建react元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建元素</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">title</span>=<span class="string">&quot;哈哈&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>渲染元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="JSX注意点"><a href="#JSX注意点" class="headerlink" title="JSX注意点"></a>JSX注意点</h3><ul><li><p>只有在脚手架中才能使用jsx语法</p><ul><li>因为JSX需要经过babel的编译处理，才能在浏览器中使用。脚手架中已经默认有了这个配置。</li></ul></li><li><p>JSX必须要有一个根节点， <code>&lt;&gt;&lt;/&gt;</code>  <code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code></p></li><li><p>没有子节点的元素可以使用<code>/&gt;</code>结束</p></li><li><p>JSX中语法更接近与JavaScript</p><ul><li><code>class</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; <code>className</code></li><li><code>for</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;  <code>htmlFor</code></li></ul></li><li><p>JSX可以换行，如果JSX有多行，推荐使用<code>()</code>包裹JSX，防止自动插入分号的bug</p></li></ul><h2 id="使用prettier插件格式化react代码"><a href="#使用prettier插件格式化react代码" class="headerlink" title="使用prettier插件格式化react代码"></a>使用prettier插件格式化react代码</h2><ul><li>安装插件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/10/13-47-00-image-20200907165515629-1629115818044-834138.png" alt="image-20200907165515629"></p><ul><li>添加prettier的配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存到额时候用使用prettier进行格式化</span></span><br><span class="line"><span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 不要有分号</span></span><br><span class="line"><span class="string">&quot;prettier.semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 使用单引号</span></span><br><span class="line"><span class="string">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 默认使用prittier作为格式化工具</span></span><br><span class="line"><span class="string">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br></pre></td></tr></table></figure><h2 id="JSX中嵌入JavaScript表达式"><a href="#JSX中嵌入JavaScript表达式" class="headerlink" title="JSX中嵌入JavaScript表达式"></a>JSX中嵌入JavaScript表达式</h2><blockquote><p>在jsx中可以在<code>&#123;&#125;</code>来使用js表达式</p></blockquote><ul><li>基本使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    姓名：&#123;name&#125;, 年龄：&#123;age&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>可以访问对象的属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">    <span class="attr">brand</span>: <span class="string">&#x27;玛莎拉蒂&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    汽车：&#123;car.brand&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>可以访问数组的下标</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> friends = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    汽车：&#123;friends[1]&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>可以使用三元运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gender = <span class="number">18</span></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    性别：&#123;age &gt;= 18? &#x27;是&#x27;:&#x27;否&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>可以调用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名：&#123;sayHi()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>JSX本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> span = <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是一个span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>盒子&#123;span&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>JSX中的注释</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/* 这是jsx中的注释 */</span>&#125;   推荐快键键 ctrl + /</span><br></pre></td></tr></table></figure><ul><li>不要出现语句，比如<code>if</code> <code>for</code></li></ul><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><blockquote><p>在react中，一切都是javascript，所以条件渲染完全是通过js来控制的</p></blockquote><ul><li>通过判断<code>if/else</code>控制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoding = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (isLoding) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载中.....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载完成，此处显示加载后的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>条件渲染：&#123;loadData()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>通过三元运算符控制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoding = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> isLoding ? (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载中.....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  ) : (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载完成，此处显示加载后的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>逻辑运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoding = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> isLoding &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>加载中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>条件渲染：&#123;loadData()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="vscode配置自动补全"><a href="#vscode配置自动补全" class="headerlink" title="vscode配置自动补全"></a>vscode配置自动补全</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当按tab键的时候，会自动提示</span></span><br><span class="line"><span class="string">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;emmet.showAbbreviationSuggestions&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// jsx的提示</span></span><br><span class="line"><span class="string">&quot;emmet.includeLanguages&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;javascript&quot;</span>: <span class="string">&quot;javascriptreact&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><blockquote><p>我们经常需要遍历一个数组来重复渲染一段结构</p><p>在react中，通过map方法进行列表的渲染</p></blockquote><ul><li>列表的渲染</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> songs = [<span class="string">&#x27;温柔&#x27;</span>, <span class="string">&#x27;倔强&#x27;</span>, <span class="string">&#x27;私奔到月球&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = songs.<span class="title function_">map</span>(<span class="function"><span class="params">song</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;song&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;list&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>直接在JSX中渲染</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> songs = [<span class="string">&#x27;温柔&#x27;</span>, <span class="string">&#x27;倔强&#x27;</span>, <span class="string">&#x27;私奔到月球&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;songs.map(song =&gt; <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;song&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>key属性的使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;songs.map(song =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;song&#125;</span>&gt;</span>&#123;song&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>注意：列表渲染时应该给重复渲染的元素添加key属性，key属性的值要保证唯一</strong></p><p><strong>注意：key值避免使用index下标，因为下标会发生改变</strong></p><h2 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h2><h3 id="行内样式-style"><a href="#行内样式-style" class="headerlink" title="行内样式-style"></a>行内样式-style</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27;, <span class="attr">backgroundColor:</span> &#x27;<span class="attr">pink</span>&#x27; &#125;&#125;&gt;</span>style样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="类名-className"><a href="#类名-className" class="headerlink" title="类名-className"></a>类名-className</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./base.css&#x27;</span></span><br><span class="line"><span class="keyword">const</span> dv = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span>style样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>base.css样式文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;刘德华&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;给我一杯忘情水&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;五月天&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;不打扰，是我的温柔&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;毛不易&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;像我这样优秀的人&quot;</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/10/13-50-16-image-20210816202854520-0f6b69.png" alt="image-20210816202854520"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/10/13-50-19-image-20210816203947396-f7ab44.png" alt="image-20210816203947396"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>JSX是React的核心内容</p></li><li><p>JSX表示在JS代码中书写HTML结构，是React声明式的体现</p></li><li><p>使用JSX配合嵌入的JS表达式，条件渲染，列表渲染，可以渲染任意的UI结构</p></li><li><p>结果使用className和style的方式给JSX添加样式</p></li><li><p>React完全利用JS的语言自身的能力来编写UI，而不是造轮子增强HTML的功能。（对比VUE）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
            <tag> React Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDA（事件驱动型架构）</title>
      <link href="/2024/07/05/EDA%EF%BC%88%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%9E%8B%E6%9E%B6%E6%9E%84%EF%BC%89/"/>
      <url>/2024/07/05/EDA%EF%BC%88%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%9E%8B%E6%9E%B6%E6%9E%84%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是事件驱动型架构（EDA）？"><a href="#1-什么是事件驱动型架构（EDA）？" class="headerlink" title="1.什么是事件驱动型架构（EDA）？"></a>1.什么是事件驱动型架构（EDA）？</h2><blockquote><p>Simply put, the event is a significant <em>change in state</em>, which is triggered when a user takes an action.</p><p>事件，本质上就是运动，变化，跟“函数”、“消息”、“操作”、“调用”、“算子”、“映射”等概念全息。</p><p>EDA（Event-Driven Architecture）是什么?EDA是一种软件体系结构，用于促进事件的生产、检测、处理和响应。事件可以是多种多样的，比如一个司机拿起一个包，一个机器测量达到一个阈值，或者一个特定的客户到达一个零售店。EDA由三个属性定义。首先，它有选择地将相关事件从传入数据传输到数据库。其次，它处理来自多个源的复杂事件，这些事件可以实时地相互影响。第三，它通过推式操作简化了实时服务。事件驱动架构的用例示例包括滴滴和Uber等资产共享解决方案、分配维护人员和备件的规定维护系统或动态客户服务应用程序。</p></blockquote><p>事件驱动型架构（EDA）是一种现代架构模式，由发布、使用或路由事件的小型解耦服务构建而成<em>。</em></p><p><em>事件</em>代表状态的变更或更新。例如：放入购物车的商品、上传到存储系统的文件或准备发货的订单。事件可以携带状态（例如订单中的商品名称、价格或数量），也可以仅包含查找相关信息所需的<em>标识符</em>（例如，“订单#8942 已发货”）。</p><p>与传统的请求驱动模型不同，EDA 促进了产生器和使用器服务之间的松耦合。这样就可以更加轻松地扩展、更新和独立部署系统的单独组件。</p><h2 id="2-为什么解耦架构很重要？"><a href="#2-为什么解耦架构很重要？" class="headerlink" title="2.为什么解耦架构很重要？"></a>2.为什么解耦架构很重要？</h2><p>许多组织发现，整体式应用程序、数据库和技术会对创新和用户体验的改进产生负面影响。遗留应用程序和数据库减少了您采用现代技术框架的选择，并限制了您的竞争力和创新。但是，当您对应用程序及其数据存储进行现代化改造时，它们会变得更容易扩展和更快地开发。</p><p>解耦数据策略提高了容错性和弹性，有助于加快新应用程序功能的上市时间（TTM）。</p><h2 id="3-事件驱动型架构（EDA）有哪些优势？"><a href="#3-事件驱动型架构（EDA）有哪些优势？" class="headerlink" title="3.事件驱动型架构（EDA）有哪些优势？"></a>3.事件驱动型架构（EDA）有哪些优势？</h2><p>事件驱动型架构（EDA）可促进系统组件之间的松耦合，从而提高敏捷性。微服务可以独立扩展，失败时不会影响其他服务，并且可以降低工作流的复杂性。可以灵活地路由、缓冲和记录事件以用于审计目的。基于推送的事件流可以实时运行，从而降低了与创建和运行代码相关的成本，该代码不断地轮询系统以进行更改。</p><p><strong>实现扩展和故障的独立性</strong></p><p>通过解耦服务，事件驱动型架构中的组件可以独立扩展和失败，从而提高应用程序的弹性。随着服务之间集成数量的增加，这一点变得越来越重要。如果一个服务出现故障，其余的可以继续运行。</p><p>事件驱动的架构还可以简化近实时系统的设计，帮助组织摆脱基于批处理的处理。应用程序状态更改时会生成事件。处理事件的层可以随着事件的扩展而扩展。</p><p>事件通常发布到消息传递服务，其行为类似于微服务之间的弹性缓冲区，并且有助于处理扩展。事件也可能被发送到路由器服务，该服务可以根据事件的内容筛选和路由消息。因此，基于事件的应用程序可以比整体式应用程序更具可扩展性并提供更大的冗余。</p><p><strong>敏捷开发</strong></p><p>借助事件驱动型架构和事件路由器，开发人员不再需要编写自定义代码来轮询、筛选和路由事件。事件路由器会自动筛选事件并将其推送给使用器。该路由器还将消除产生器和使用器服务之间进行繁重协调的必要性，从而提高开发人员的敏捷性。</p><p>事件驱动型架构是基于推送的，这意味着当事件被发送到路由器和下游系统时，一切都按需发生，而无需通知相关服务。正因为如此，基础设施和资源可以随着事件量的增加和减少而扩展，从而降低处理工作负载和运行已部署应用程序的成本。</p><p><strong>构建可扩展系统</strong></p><p>事件驱动型架构也是高度可扩展的。其他团队可以在不影响现有微服务的情况下扩展特性和添加功能。通过发布事件，应用程序可以与现有系统集成 — 未来的应用程序可以作为事件使用器轻松集成，而无需更改现有解决方案。</p><p>事件产生器不了解事件使用器，因此扩展系统的摩擦较小，并且新功能或集成不会添加依赖项，进而拖慢未来开发的进度。</p><p><strong>降低复杂性</strong></p><p>微服务使开发人员和架构师能够分解复杂的工作流程。例如，他们可以将电子商务整体分解为具有单独库存、履行和会计服务的<em>订单接受</em>和<em>支付流程</em>。</p><p>在整体式应用中的管理和编排可能较为复杂的工作负载变成了一系列简单的、解耦的服务，这些服务被独立管理并通过事件消息异步通信。</p><p>事件驱动的方法使组装和编排以不同速率处理数据的服务成为可能。在以下示例中，订单接受微服务通过队列与支付处理系统交互。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/16-17-36-AWS%20Reduce%20complexity.0cc9cc63ebe6726a2c3ac7fae8001ff1281642c7-569182.jpeg" alt="img"></p><p>在示例中，订单接受服务可以通过在队列中缓冲消息来存储大量传入订单。</p><p>由于处理支付的复杂性，支付处理服务通常较慢，它可以从队列中获取稳定的消息流。由于重试和错误处理逻辑，支付服务在各种系统状态之间转换。工作流服务根据系统状态编排和管理支付步骤，并最终产生更多库存、履行和会计服务感兴趣的事件。</p><p><strong>轻松审核</strong></p><p>事件驱动型架构中的事件路由器充当审核应用程序和定义策略的集中位置。这些策略可以限制谁能够发布与订阅到您的路由器，并控制哪些用户和资源有权限访问您的数据。您还可以对您的事件进行动态和静态加密。</p><p><strong>削减成本</strong></p><p>EDA 是基于推送的，因此一切都在事件本身出现在路由器中时按需发生。如此一来，您不用为持续轮询以检查事件付费。这意味着更少的网络带宽消耗、更低的 CPU 利用率、更少的闲置实例集容量，以及更少的 SSL&#x2F;TLS 握手。</p><h2 id="3-事件驱动型架构（EDA）的工作原理？"><a href="#3-事件驱动型架构（EDA）的工作原理？" class="headerlink" title="3.事件驱动型架构（EDA）的工作原理？"></a>3.事件驱动型架构（EDA）的工作原理？</h2><p>以下是适用于电商站点的事件驱动型架构（EDA）的示例：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/16-17-57-undefinedEDAundefined%20for%20an%20ecommerce%20site.88b2240905b1b6addd672871b98bcb17bd44d701-5d87e5.jpeg" alt="img"></p><p>此示例站点显示了三个主要的事件产生器组件以及它们产生的事件。在这种情况下，事件路由器将摄取并筛选事件，然后将一个或多个事件发送给事件使用器。</p><p>此事件驱动型架构使网站能够对需求峰值期间的各种来源变动做出反应，而不会导致应用程序崩溃或过度预置资源。</p><h2 id="4-有哪些常见的事件驱动型架构（EDA）使用场景？"><a href="#4-有哪些常见的事件驱动型架构（EDA）使用场景？" class="headerlink" title="4.有哪些常见的事件驱动型架构（EDA）使用场景？"></a>4.有哪些常见的事件驱动型架构（EDA）使用场景？</h2><p><strong>Web 和移动后端的微服务通信</strong></p><p>零售或媒体和娱乐网站通常必须纵向扩展以处理不可预测的流量。客户访问电子商务网站并下订单。订单事件被发送到事件路由器。所有下游微服务都可以获取订单事件进行处理。示例操作可能包括：提交订单、授权付款以及将订单详细信息发送给运输提供商。</p><p>由于每个微服务都可以独立扩展和失败，因此该流程可以在订单高峰期扩展而不会出现单点故障。</p><p><strong>业务工作流程自动化</strong></p><p>许多业务工作流程（例如金融服务交易）需要重复相同的步骤。您可以使用事件驱动型架构（EDA）来启动和自动化这些步骤。</p><p>例如，当客户向银行申请新账户时，银行必须进行一些数据检查（身份证明文件、地址等）。一些账户还需要人工批准阶段。您可以通过工作流服务编排所有这些步骤，该服务会在收到新账户申请时自动执行这些步骤。</p><p>您还可以添加一个工作流，通过机器学习异步处理客户应用程序数据以提取相关数据，这可能可以节省数小时的手动数据收集和验证时间。</p><p><strong>SaaS 应用程序集成</strong></p><p>软件即服务（SaaS）环境面临的最大挑战是缺乏对用户活动和数据的可见性。为了解锁孤立的数据，事件驱动型架构可以摄取 SaaS 应用程序事件或将事件发送到他们的 SaaS 应用程序。例如，您可以构建中间件来获取传入的合作伙伴订单数据并将订单直接发送到内部订单处理应用程序。</p><p><strong>基础设施和自动化</strong></p><p>在运行计算密集型工作负载（例如财务分析、基因组研究或媒体转码）时，您可以通过扩展计算资源以进行高度并行处理，然后在作业完成后缩减计算资源。</p><p>例如，在高度监管的行业中，拥有 EDA 的公司可以启动安全状态资源以响应事件，或者在安全策略发送警报事件时采取补救措施。</p><h2 id="5-什么时候应该使用事件驱动型架构（EDA）？"><a href="#5-什么时候应该使用事件驱动型架构（EDA）？" class="headerlink" title="5.什么时候应该使用事件驱动型架构（EDA）？"></a>5.什么时候应该使用事件驱动型架构（EDA）？</h2><p>事件驱动型架构（EDA）是快速提高敏捷性与进行移动的理想选择。它们常见于使用微服务的现代应用程序，或者有解耦组件的任何应用程序。</p><p><strong>异构系统集成</strong></p><p>如果您的系统在不同堆栈上运行，可以使用 EDA 在它们之间共享信息，而无需耦合。事件路由器会在系统之间建立间接性和互操作性，因此它们可以在保持独立性的同时交换消息和数据。</p><p><strong>跨区域、跨账户数据复制</strong></p><p>您可以使用 EDA，在跨不同 AWS 区域和账户进行操作与部署的团队之间协调系统。通过使用事件路由器在系统之间传输数据，您可以独立于其他团队开发、扩展和部署服务。</p><p><strong>资源状态监控和警报</strong></p><p>您可以利用 EDA 来监控与接收有关任何异常、变动和更新的警报，而不用持续检查您的资源。这些资源可能包括存储桶、数据库表、无服务器函数、计算节点等等。</p><p><strong>扇出与并行处理</strong></p><p>如果您需要操作多个系统以响应事件，则可以使用 EDA 对事件进行扇出，而不必编写自定义代码来推送到每个使用器。路由器会将事件推送到系统，每个系统可出于不同目的并行处理这些事件。</p><h2 id="6-什么是常见的事件驱动型架构（EDA）模式？"><a href="#6-什么是常见的事件驱动型架构（EDA）模式？" class="headerlink" title="6.什么是常见的事件驱动型架构（EDA）模式？"></a>6.什么是常见的事件驱动型架构（EDA）模式？</h2><p><strong>许多简短的函数</strong></p><p>创建多个较短的函数，而不是少量较大的函数。使函数专门针对您的工作负载意味着它们非常简洁，并且通常可以减少处理时间。每个函数都应该处理传递给它的事件，而不需要了解或预计整个工作流程或事务量。这使得函数与事件源无关，与其他服务的耦合最小。</p><p><strong>按需处理而不是批量处理</strong></p><p>许多传统系统设计为定期运行并处理随时间累积的批量事务。例如，银行应用程序可能每小时运行一次，将 ATM 交易处理到中央分类账中。</p><p>在事件驱动型架构（EDA）中，自定义处理可以响应每个事件。这允许服务根据需要扩展并发性，以近乎实时地处理事务。</p><p><strong>中断恢复</strong></p><p>在中断的情况下，可能会自动调用服务以重试事件处理。因为服务可能会多次接收相同的事件，所以函数设计为幂等。这可以确保结果不会在服务第一次接收事件后发生更改。</p><p>例如，如果零售商由于重试而尝试处理信用卡两次，则服务仅在第一次尝试时处理付款。在重试时，服务会验证支付状态并丢弃该事件。</p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 系统 </category>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> 事件驱动 </tag>
            
            <tag> EDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activiti7-工作流</title>
      <link href="/2024/07/05/Activiti7/"/>
      <url>/2024/07/05/Activiti7/</url>
      
        <content type="html"><![CDATA[<h1 id="工作流-Activiti7基础"><a href="#工作流-Activiti7基础" class="headerlink" title="工作流-Activiti7基础"></a>工作流-Activiti7基础</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1 目标"></a>1 目标</h2><p>我们前几天的开发中，都是做的系统的基础模块开发，那接下来的几天，我们会开始养老项目的核心业务开发，比如，有老人的入住办理，退住办理等等这些，如下图</p><p>入住办理</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-17-38-image-20230906170018239-2421e1.png" alt="image-20230906170018239"></p><p>退住办理</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-17-40-image-20230906170119299-102ec9.png" alt="image-20230906170119299"></p><p>在上图中，使用红框圈起来的内容，大家可以看到，入住和退住，它们都有完整的比较长的流程，里面涉及到了多个表单的提交和多个角色的审核，那么在业务开发的过程中，如果想要完美的实现这些流程的开发，我们最好的技术选型就是使用<strong>工作流</strong>技术完成，那什么是工作流呢？</p><p>工作流（ Workflow ）：是一项将系统任务或操作抽取，再按照预定业务流程进行组织、协调、并自动化执行的技术。</p><p>我们也可以简单理解工作流是一种开发方式，其主要是解决一些业务场景硬编码方式的成本高、效率低、变更慢等问题的技术。</p><p>在今天，我们会先讲解工作流技术的基础内容，在接下来的几天，我们会把工作流集成到我们的项目中完成入住和退住的开发。</p><p>所以我们今天的目标是：</p><ul><li>掌握工作流的使用场景有哪些</li><li>能够清楚Activiti7的特点</li><li>能够掌握BPMN设计器的使用以及常见的流程符号</li><li>能够独立完成Springboot与Activiti7的集成</li><li>能够独立完成请假流程的审批代码开发</li><li>能够掌握完成流量变量的使用</li><li>能够掌握使用UEL表达式动态分配办理人</li><li>能够掌握使用UEL表达式动态分配连线变量</li><li>能够掌握使用网关来完成分支执行的流程</li></ul><h2 id="2-Activiti7概述"><a href="#2-Activiti7概述" class="headerlink" title="2 Activiti7概述"></a>2 Activiti7概述</h2><p>Activiti：是一个开源的轻量级工作流和业务流程管理与执行的引擎。2010年基于jBPM4实现首次开源，旨在帮助企业自动化和优化各种业务流程。</p><p>官网地址：<a href="https://www.activiti.org/">https://www.activiti.org/</a></p><p><strong>Activiti 的主要特点和优势：</strong></p><ul><li><p>开源和跨平台：Activiti 是一个开源项目，可以在各种操作系统和平台上运行，提供灵活的部署选项。</p></li><li><p>高度可定制：Activiti 提供了可视化的流程设计器，使用户能够轻松设计和定制各种业务流程。流程定义可以基于 BPMN 2.0 标准进行创建。</p></li><li><p>强大的任务管理：Activiti 允许用户定义任务、分配任务给不同的用户或组，并支持任务的优先级和截止日期。</p></li><li><p>工作流引擎：Activiti 提供了强大的工作流引擎，能够自动执行流程、处理任务、执行规则等。它支持顺序流、条件流、并行网关等流程控制元素。</p></li><li><p>事件驱动：Activiti 支持事件驱动的流程，可以在特定的事件发生时触发流程的不同分支。</p></li><li><p>可扩展性：Activiti 允许开发人员通过编写自定义 Java 类来扩展其功能，满足特定的业务需求。</p></li><li><p>数据持久化：Activiti 使用关系型数据库来存储流程定义、流程实例、任务等信息，保证了数据的持久性和可靠性。</p></li><li><p>集成支持：Activiti 可以与其他技术和系统集成，如 Spring、RESTful Web Services、JavaEE 等。</p></li><li><p>监控和报告：Activiti 提供了流程实例的监控、报告和分析功能，使用户能够了解流程的状态和性能。</p></li></ul><h2 id="3-BPMN"><a href="#3-BPMN" class="headerlink" title="3 BPMN"></a>3 BPMN</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>BPMN：业务流程建模与标记语言（Business Process Model and Notation），是一种用于图形化表示和描述业务流程的标准化标记语言。目前主流的版本是BPMN2.0，由 Object Management Group（OMG）制定，并于2011年发布，发展至今，已被主流的流程引擎支持，并作为默认。</p><p>官网：<a href="https://www.bpmn.org/">https://www.bpmn.org/</a></p><p>讲白了，BPMN和HTML类似都是标记语言，都是通过XML的格式来组织数据，供后端解析，也可转成图形化方式直观展示给用户看。</p><p><strong>例：BPMN标准的流程文件内容：</strong></p><p>讲白了，BPMN和HTML类似都是标记语言，都是通过XML的格式来组织数据，供后端解析，也可转成图形化方式直观展示给用户看。</p><p><strong>例：BPMN标准的流程文件内容：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-18-07-image-20230819170442122-5792ab.png" alt="image-20230819170442122"></p><p><strong>转成直观的图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-18-12-image-20230819170453556-7d846d.png" alt="image-20230819170453556"></p><h3 id="3-2-BPMN设计器"><a href="#3-2-BPMN设计器" class="headerlink" title="3.2 BPMN设计器"></a>3.2 BPMN设计器</h3><p>虽然BPMN是一个标记语言，但是在实际中，我们很少直接去用它语法进行开发，而是直接使用流程设计器来画，而画用前端技术即可实现，在前端开源项目中有一个叫bpmn-js的开源项目，现在几乎成了画流程的标准，市面上的流程设计器基本都是基于它改造的。比如Activiti7官网提供的：<a href="https://github.com/activiti/activiti-modeling-app%E8%AE%BE%E8%AE%A1%E5%99%A8%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%9F%BA%E4%BA%8Ebpmn-js%E5%AE%9E%E7%8E%B0%E7%9A%84">https://github.com/activiti/activiti-modeling-app设计器，就是基于bpmn-js实现的</a></p><p>找到资料中的</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-18-16-image-20230906192013916-061739.png" alt="image-20230906192013916"></p><p>解压，然后使用npm命令启动:<code>npm run dev</code></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-18-23-image-20230906192117066-6d6445.png" alt="image-20230906192117066"></p><p>启动成功之后，访问地址为：<a href="http://localhost:9013/">http://localhost:9013/</a></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-18-29-image-20230906192212013-f836f2.png" alt="image-20230906192212013"></p><p>到此呢，我们就把画图的工具准备好了。</p><h3 id="3-3-常见流程符号"><a href="#3-3-常见流程符号" class="headerlink" title="3.3 常见流程符号"></a>3.3 常见流程符号</h3><h4 id="3-3-1-事件event"><a href="#3-3-1-事件event" class="headerlink" title="3.3.1 事件event"></a>3.3.1 事件event</h4><p>事件（Event）是业务流程模型中的重要元素之一。事件可以发生在流程的任何阶段，并且可以影响流程的执行。根据事件发生的时间和方式，可以将BPMN事件分为以下几类：</p><ul><li><p>开始事件（Start Event）：表示流程的起点，通常用于触发流程的启动。</p></li><li><p>中间事件（Intermediate Event）：发生在流程中间的事件，可以根据需要划分为多种类型，如定时器事件、消息事件、信号事件等。</p></li><li><p>结束事件（End Event）：表示流程的结束点，通常用于触发流程的结束。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-18-34-image-20230906194126812-a26da9.png" alt="image-20230906194126812"></p><h4 id="3-3-2-活动activity"><a href="#3-3-2-活动activity" class="headerlink" title="3.3.2 活动activity"></a>3.3.2 活动activity</h4><p>活动（Activity）是业务流程模型中的重要元素之一。活动可以包括任务（Task）、子流程（Subprocess）、调用活动（Call Activity）等。</p><p>任务（Task）是最基本的活动类型，表示一个简单的、可执行的工作单元。任务通常由人工执行，并且需要指定执行者。根据执行方式的不同，任务可以分为用户任务（User Task）和手动任务（Manual Task）。用户任务是由人工执行的，需要指定执行的用户或角色，并提供相应的输入；手动任务是由系统自动执行的，不需要指定执行的用户或角色。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-18-36-image-20230906194300150-b8deec.png" alt="image-20230906194300150"></p><h4 id="3-3-3-流向flow"><a href="#3-3-3-流向flow" class="headerlink" title="3.3.3 流向flow"></a>3.3.3 流向flow</h4><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-18-40-image-20230906195700839-ea20b3.png" alt="image-20230906195700839"></p><h2 id="4-Springboot集成Activiti7"><a href="#4-Springboot集成Activiti7" class="headerlink" title="4 Springboot集成Activiti7"></a>4 Springboot集成Activiti7</h2><h3 id="4-1-导入依赖"><a href="#4-1-导入依赖" class="headerlink" title="4.1 导入依赖"></a>4.1 导入依赖</h3><p>创建一个新的项目 activiti-sample，导入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--安全框架 spring security --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot与activiti7整合的starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--如果activiti依赖下载不了，可以配置如下地址进行下载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>activiti-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://artifacts.alfresco.com/nexus/content/repositories/activiti-releases<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需自己创建引导类和配置文件application.yml</p><h3 id="4-2-属性配置"><a href="#4-2-属性配置" class="headerlink" title="4.2 属性配置"></a>4.2 属性配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8989</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">heima123</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.200.146:3306/activiti-db?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment">#日志的相关配置</span></span><br><span class="line">  <span class="attr">activiti:</span></span><br><span class="line">    <span class="comment">#是否让activiti自动创建所有的历史表</span></span><br><span class="line">    <span class="attr">history-level:</span> <span class="string">full</span></span><br><span class="line">    <span class="comment">#是否需要使用历史表,默认false不使用,而配置true是使用历史表</span></span><br><span class="line">    <span class="attr">db-history-used:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#流程自动部署，关闭，需要手动部署流程 服务启动的时候自动检查resources目录下的bpmn文件 如果为true自动部署流程</span></span><br><span class="line">    <span class="attr">check-process-definitions:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#关闭启动服务自动框架部署</span></span><br><span class="line">    <span class="attr">deployment-mode:</span> <span class="string">never-fail</span></span><br></pre></td></tr></table></figure><p>注意：需要在自己的MySQL中创建一个新的数据库：activiti-db</p><p>准备一个引导类，然后启动项目，启动日志中，我们可以看到，activiti会自动创建表结构</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-20-27-image-20230906212640773-be5ac3.png" alt="image-20230906212640773"></p><p>我们也可以直接查询数据库，数据库中创建了25张表，目前说明springboot已成功集成了activiti7</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-20-29-image-20230906212712063-e050db.png" alt="image-20230906212712063"></p><h3 id="4-3-表结构"><a href="#4-3-表结构" class="headerlink" title="4.3 表结构"></a>4.3 表结构</h3><p>Activiti 的表都以   ACT_   开头。 第二部分是表示表的用途的两个字母标识。 用途也和服务的 API 对应。</p><ul><li>ACT_RE ：<code>RE</code>表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则）</li><li>ACT_RU：<code>RU</code>表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Activiti 只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。</li><li>ACT_HI：<code>HI</code>表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。</li><li>ACT_GE ： <code>GE</code> 表示 general。 通用数据， 用于不同场景下</li></ul><p>具体的表含义，如下：</p><ul><li>一般数据<ul><li>ACT_GE_BYTEARRAY   通用的流程定义和流程资源</li><li>ACT_GE_PROPERTY   系统相关属性</li></ul></li><li>流程历史记录<ul><li>ACT_HI_ACTINST   历史的流程实例</li><li>ACT_HI_ATTACHMENT   历史的流程附件</li><li>ACT_HI_COMMENT  历史的说明性信息</li><li>ACT_HI_DETAIL  历史的流程运行中的细节信息</li><li>ACT_HI_IDENTITYLINK  历史的流程运行过程中用户关系</li><li>ACT_HI_PROCINST  历史的流程实例</li><li>ACT_HI_TASKINST  历史的任务实例</li><li>ACT_HI_VARINST  历史的流程运行中的变量信息</li></ul></li><li>流程定义表<ul><li>ACT_RE_DEPLOYMENT  部署单元信息</li><li>ACT_RE_MODEL  模型信息</li><li>ACT_RE_PROCDEF  已部署的流程定义</li></ul></li><li>运行实例表<ul><li>ACT_RU_EVENT_SUBSCR  运行时事件</li><li>ACT_RU_EXECUTION  运行时流程执行实例</li><li>ACT_RU_IDENTITYLINK  运行时用户关系信息，存储任务节点与参与者的相关信息</li><li>ACT_RU_JOB  运行时作业</li><li>ACT_RU_TASK  运行时任务</li><li>ACT_RU_VARIABLE  运行时变量表</li></ul></li></ul><h3 id="4-4-常见api"><a href="#4-4-常见api" class="headerlink" title="4.4 常见api"></a>4.4 常见api</h3><p>在activiti7框架内部，已经对25张表的数据操作，已经封装了对应的service，在我们业务进行集成的时候，一般情况下无需再开发针对activiti7相关表的操作进行开发，直接使用activiti7内部提供的api即可。</p><ul><li><p>RepositoryService：用于部署流程定义，可以添加、删除、查询和管理流程定义。</p></li><li><p>RuntimeService：用于启动、查询和管理正在运行的流程实例。</p></li><li><p>TaskService：用于查询和管理当前用户可以操作的任务，以及完成任务。</p></li><li><p>HistoryService：用于查询历史数据，例如已完成的流程实例、已删除的流程实例、用户任务等。</p></li></ul><p>因为我们现在使用的是springboot集成了activiti，这些api也被spring容器进行了管理，需要用到以上api的时候，直接注入即可，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RepositoryService repositoryService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveNewDeploy</span><span class="params">(FlowInfo flowInfo)</span> &#123;</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">        .addClasspathResource(flowInfo.getFilepath()) <span class="comment">// 添加bpmn资源</span></span><br><span class="line">        .name(flowInfo.getFlowname())</span><br><span class="line">        .key(flowInfo.getFlowkey())</span><br><span class="line">        .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;流程部署id：&quot;</span> + deployment.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;流程部署名称：&quot;</span> + deployment.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-请假流程审批"><a href="#5-请假流程审批" class="headerlink" title="5 请假流程审批"></a>5 请假流程审批</h2><h3 id="5-1-需求说明"><a href="#5-1-需求说明" class="headerlink" title="5.1 需求说明"></a>5.1 需求说明</h3><p>在企业中，员工如果有事需要请假，一般都需要向上级请假，得到批准后，方可离开公司。而整个过程在企业中需要在系统中完成，以信息化员工的出勤信息，便于工资、奖金的结算，因此需要开发此功能，需求如下：</p><ul><li>员工：请假的员工需要先填写请假单，填写的字段有：请假人、请假天数、开始请假时间、请假事由；</li><li>经理：审批员工的请假单，如果不同意，则需要说明不同意的理由；</li></ul><p><strong>实现步骤</strong></p><p>在这里我们主要是来了解一下基于Activiti如何来实现上述需求，其主要的实现步骤是什么？</p><p>1、集成流程引擎，（已完成）</p><p>2、画流程图，基于bpmn-js工具</p><p>3、保存流程图，基于activiti提供的api</p><p>4、部署和运行流程图，基于activiti提供的api</p><p>5、开发同意和不同意审批功能，基于activiti提供的api</p><h3 id="5-2-画流程"><a href="#5-2-画流程" class="headerlink" title="5.2 画流程"></a>5.2 画流程</h3><p>我们打开bpmn-js，可以直接在页面中画图，步骤如下：</p><p>(1)定义流程编号（ID）和名称</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-27-57-image-20230906213432858-c511d8.png" alt="image-20230906213432858"></p><p>(2)新增一个用户任务，并指定代理人为：张三</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-27-59-image-20230906213742809-393e04.png" alt="image-20230906213742809"></p><p>(3)新增一个用户任务，并指定代理人为：李四，同时需要结束这个流程，最后需要有一个结束事件</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-28-23-image-20230906213916973-4185ad.png" alt="image-20230906213916973"></p><p>流程图画好之后，在页面的左下角有一个导出，就可以直接导出为bpmn文件（xml文件）</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-28-32-image-20230906215042677-cce71e.png" alt="image-20230906215042677"></p><p>把生成后的bpmn文件拷贝到idea中备用，存储位置：resource&#x2F;bpmn&#x2F;diagram.bpmn</p><p>因为保存的文件都是xml文件，我们为了方便查看这些流程，也可以截个图一起放入bpmn目录下</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-28-38-image-20230906214724336-db8459.png" alt="image-20230906214724336"></p><h3 id="5-3-部署流程"><a href="#5-3-部署流程" class="headerlink" title="5.3 部署流程"></a>5.3 部署流程</h3><p>我们在项目的测试包下创建一个ACTQuickStartTest类来完成入门的所有代码</p><p>在我们去部署流程、创建流程实例、执行任务的时候可以直接使用activiti提供的api，我们先用三个</p><ul><li><p>RepositoryService：用于部署流程定义，可以添加、删除、查询和管理流程定义。</p></li><li><p>RuntimeService：用于启动、查询和管理正在运行的流程实例。</p></li><li><p>TaskService：用于查询和管理当前用户可以操作的任务，以及完成任务。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.activiti.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程部署</span></span><br><span class="line"><span class="comment"> * 添加资源文件、获取部署信息、部署时间</span></span><br><span class="line"><span class="comment"> * act_re_deployment</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ACTQuickStartTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RepositoryService repositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程部署</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deployProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;bpmn/diagram.bpmn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">imageFile</span> <span class="operator">=</span> <span class="string">&quot;bpmn/diagram.png&quot;</span>;</span><br><span class="line">        <span class="comment">//定义流程</span></span><br><span class="line">        <span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">                .addClasspathResource(fileName)</span><br><span class="line">                .addClasspathResource(imageFile)</span><br><span class="line">                .name(<span class="string">&quot;Process_1&quot;</span>)</span><br><span class="line">                .deploy();</span><br><span class="line">        <span class="comment">//部署流程</span></span><br><span class="line">        System.out.println(deployment.getId());</span><br><span class="line">        System.out.println(deployment.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行成功以后，打印了流程部署id和流程的name</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-29-14-image-20230907101221401-07c028.png" alt="image-20230907101221401"></p><p>我们在数据库中查询，</p><ul><li>ACT_RE_DEPLOYMENT   流程部署</li><li>ACT_GE_BYTEARRAY  流程资源</li><li>ACT_RE_PROCDEF   流程定义表</li></ul><p>(1) ACT_RE_DEPLOYMENT      流程部署表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ACT_RE_DEPLOYMENT </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-29-16-image-20230907114302905-aa348b.png" alt="image-20230907114302905"></p><p>ACT_RE_DEPLOYMENT 表结构</p><table><thead><tr><th>字段名</th><th>类型</th><th>长度</th><th>注释</th></tr></thead><tbody><tr><td>ID_</td><td>varchar</td><td>64</td><td>主键</td></tr><tr><td>NAME_</td><td>varchar</td><td>255</td><td>名称</td></tr><tr><td>CATEGORY_</td><td>varchar</td><td>255</td><td>分类</td></tr><tr><td>KEY_</td><td>varchar</td><td>255</td><td>业务key</td></tr><tr><td>TENANT_ID_</td><td>varchar</td><td>255</td><td>租户ID</td></tr><tr><td>DEPLOY_TIME_</td><td>timestamp</td><td></td><td>部署时间</td></tr><tr><td>ENGINE_VERSION_</td><td>varchar</td><td>255</td><td>引擎版本，一般为空</td></tr><tr><td>VERSION_</td><td>int</td><td>10</td><td>部署版本</td></tr><tr><td>PROJECT_RELEASE_VERSION_</td><td>varchar</td><td>255</td><td>项目版本，一般为空</td></tr></tbody></table><p>(2)ACT_GE_BYTEARRAY流程资源</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ACT_GE_BYTEARRAY </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-29-23-image-20230907114340277-3be8fe.png" alt="image-20230907114340277"></p><p>表结构</p><table><thead><tr><th>字段名</th><th>类型</th><th>长度</th><th>注释</th></tr></thead><tbody><tr><td>ID_</td><td>varchar</td><td>64</td><td>主键</td></tr><tr><td>REV_</td><td>int</td><td>10</td><td>数据更新乐观锁</td></tr><tr><td>NAME_</td><td>varchar</td><td>255</td><td>名称</td></tr><tr><td>DEPLOYMENT_ID_</td><td>varchar</td><td>64</td><td>部署ID</td></tr><tr><td>BYTES_</td><td>longblob</td><td>4294967295</td><td>大字段内容</td></tr><tr><td>GENERATED_</td><td>tinyint</td><td>3</td><td>标识是否自动生成的记录</td></tr></tbody></table><p>(3)act_re_procdef     流程定义表，部署每个新的流程定义都会在这张表中增加一条记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ACT_RE_PROCDEF</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-29-26-image-20230907114433526-5e1f27.png" alt="image-20230907114433526"></p><p>表结构</p><table><thead><tr><th>字段名</th><th>类型</th><th>长度</th><th>注释</th></tr></thead><tbody><tr><td>ID_</td><td>varchar</td><td>64</td><td>主键</td></tr><tr><td>REV_</td><td>int</td><td>10</td><td>数据更新乐观锁</td></tr><tr><td>CATEGORY_</td><td>varchar</td><td>255</td><td>分类</td></tr><tr><td>NAME_</td><td>varchar</td><td>255</td><td>名称</td></tr><tr><td>KEY_</td><td>varchar</td><td>255</td><td>流程定义key</td></tr><tr><td>VERSION_</td><td>int</td><td>10</td><td>流程定义版本</td></tr><tr><td>DEPLOYMENT_ID_</td><td>varchar</td><td>64</td><td>关联部署ID</td></tr><tr><td>RESOURCE_NAME_</td><td>varchar</td><td>4000</td><td>流程定义存在的资源名称</td></tr><tr><td>DGRM_RESOURCE_NAME_</td><td>varchar</td><td>4000</td><td>流程图文件的资源名称，一般为空</td></tr><tr><td>DESCRIPTION_</td><td>varchar</td><td>4000</td><td>流程定义描述</td></tr><tr><td>HAS_START_FORM_KEY_</td><td>tinyint</td><td>3</td><td>是否启动表单，1是，0否，一般为0</td></tr><tr><td>HAS_GRAPHICAL_NOTATION_</td><td>tinyint</td><td>3</td><td>是否图形标记，1是，0否，可以理解成<br />xml中节点坐标等信息是否有</td></tr><tr><td>SUSPENSION_STATE_</td><td>int</td><td>10</td><td>挂起状态，1挂起，2未挂起</td></tr><tr><td>TENANT_ID_</td><td>varchar</td><td>255</td><td>租户ID</td></tr><tr><td>ENGINE_VERSION_</td><td>varchar</td><td>255</td><td>引擎版本，一般不用</td></tr><tr><td>APP_VERSION_</td><td>int</td><td>10</td><td>APP版本，一般不用</td></tr></tbody></table><p>act_re_deployment和act_re_procdef一对多关系，一次部署在流程部署表生成一条记录，但一次部署可以部署多个流程定义，每个流程定义在流程定义表生成一条记录。每一个流程定义在act_ge_bytearray会存在两个资源记录，bpmn和png。</p><p>一般情况下：一次部署一个流程，这样部署表和流程定义表是一对一有关系，方便读取流程部署及流程定义信息。</p><h3 id="5-4-运行流程实例"><a href="#5-4-运行流程实例" class="headerlink" title="5.4 运行流程实例"></a>5.4 运行流程实例</h3><p>什么是流程实例呢？流程实例和流程部署的关系</p><p>我们还是先来看一下刚才的请假的流程图</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-29-32-image-20230907111950593-0b08a2.png" alt="image-20230907111950593"></p><p>这个图定义好之后，是公司的任何人都会按照这个流程去执行请假，这个流程定义好之后，我们存储起来，相当于定义了一个<strong>模板</strong>，这个就是流程部署</p><p>公司有很多人，每个人请假填写的申请单是不一样的，那么只要有人填写一次申请单，就相当于是一个流程实例。简单说就是用户或程序按照流程定义内容发起一个流程，这就是一个流程实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initProcessInstance</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceByKey(<span class="string">&quot;Process_1&quot;</span>, <span class="string">&quot;business_key_01&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;流程定义Id: &quot;</span>+ processInstance.getProcessDefinitionId());</span><br><span class="line">    System.out.println(<span class="string">&quot;流程实例Id: &quot;</span>+ processInstance.getProcessInstanceId());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动流程实例时，指定的businesskey，就会在act_ru_execution #流程实例的执行表中存储businesskey。</p><p>Businesskey：业务标识，通常为业务表的主键，业务标识和流程实例一一对应。业务标识来源于业务系统。存储业务标识就是根据业务标识来关联查询业务系统的数据。</p><blockquote><p>比如，在这个请假流程中，有一张表是专门存储请假单的。</p><p>那不同的人执行请假流程，就会有单独的流程实例，那对应的请假单表中的数据也是不一样的，通常这个businesskey关联就是因为的主键（请假单表的主键）</p></blockquote><p>控制台打印结果：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-29-43-image-20230907114533911-53192d.png" alt="image-20230907114533911"></p><p>流程实例启动之后，也会操作相关的表结构</p><ul><li><p>act_hi_actinst     流程实例执行历史</p></li><li><p>act_hi_identitylink  流程的参与用户历史信息</p></li><li><p>act_hi_procinst      流程实例历史信息</p></li><li><p>act_hi_taskinst       流程任务历史信息</p></li><li><p>act_ru_execution   流程执行信息</p></li><li><p>act_ru_identitylink  流程的参与用户信息</p></li><li><p>act_ru_task         任务信息</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ACT_HI_ACTINST     </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ACT_HI_IDENTITYLINK  </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ACT_HI_PROCINST      </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ACT_HI_TASKINST       </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ACT_RU_EXECUTION   </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ACT_RU_IDENTITYLINK  </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ACT_RU_TASK </span><br></pre></td></tr></table></figure><h3 id="5-5-任务完成和拒绝"><a href="#5-5-任务完成和拒绝" class="headerlink" title="5.5 任务完成和拒绝"></a>5.5 任务完成和拒绝</h3><p>在操作任务的时候，我们主要使用TaskService来进行操作</p><h4 id="5-5-1-查询待办任务"><a href="#5-5-1-查询待办任务" class="headerlink" title="5.5.1 查询待办任务"></a>5.5.1 查询待办任务</h4><p>我们回顾一下，请假流程图</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-30-35-image-20230907111950593-67111c.png"></p><p>当流程实例创建之后，就会分配给不同的人来去执行流程中的任务（目前都是用户任务），因为在流程图中已经定义了每个节点的操作人，所以操作人可以进行查询我的待办任务</p><p>根据流程图的中的定义，第一个”填写请假单”是由<strong>张三</strong>负责的，我们就可以先查询张三的任务</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询我的代办任务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getTasksByAssignee</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">        .processDefinitionKey(<span class="string">&quot;Process_1&quot;</span>)</span><br><span class="line">        .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">        .processInstanceBusinessKey(<span class="string">&quot;business_key_01&quot;</span>)</span><br><span class="line">        .singleResult();</span><br><span class="line"></span><br><span class="line">    System.out.println(task.getId());</span><br><span class="line">    System.out.println(task.getName());</span><br><span class="line">    System.out.println(task.getAssignee());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-2-填写申请单"><a href="#5-5-2-填写申请单" class="headerlink" title="5.5.2 填写申请单"></a>5.5.2 填写申请单</h4><p>现在流程中的节点已经走到了张三这里，需要他进行处理，因为目前是请假申请单，所以他需要填写请假单的内容，并且提交数据，继续往下执行流程</p><ul><li>TaskService：是一个常用的API，主要用来对任务进行各种操作</li><li>调用complete方法，即可结束当前节点，并且流程会自动开启下一个节点的任务。同时在结束时还可以把填写的表单数据，作为流程变量（这些流程变量，后续再去讲解如何使用）。</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行任务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completeTask</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">assingee</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">businessKey</span> <span class="operator">=</span> <span class="string">&quot;business_key_0001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据流程key 和 任务的负责人 查询任务</span></span><br><span class="line">    <span class="comment">//返回一个任务对象</span></span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processDefinitionKey(<span class="string">&quot;Process_1&quot;</span>) <span class="comment">//流程Key</span></span><br><span class="line">            .taskAssignee(assingee)  <span class="comment">//要查询的负责人</span></span><br><span class="line">            .processInstanceBusinessKey(businessKey)</span><br><span class="line">            .singleResult();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行任务</span></span><br><span class="line">    <span class="keyword">if</span>(task != <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        variables.put(<span class="string">&quot;startDate&quot;</span>,<span class="string">&quot;2024-01-01&quot;</span>);</span><br><span class="line">        variables.put(<span class="string">&quot;days&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        variables.put(<span class="string">&quot;reason&quot;</span>,<span class="string">&quot;元旦回家探亲&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        taskService.complete(task.getId(),variables);</span><br><span class="line">        System.out.println(<span class="string">&quot;任务完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上面代码后，可以在act_ru_execution表中发现，新增了【经理审批】待执行的节点，而完成的【填写请假单】节点被删除了。</p><p>同时在act_ru_task表中，待办任务也变成了李四【经理审批】：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-32-03-image-20230820143714186-9df5be.png" alt="image-20230820143714186"></p><p>代码中传入的表单数据，同时也作为流程变量存储到了act_ru_variable表中（详细字段含义，后续讲解）。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-32-05-image-20230820144747919-d8b996.png" alt="image-20230820144747919"></p><h4 id="5-5-3-经理同意"><a href="#5-5-3-经理同意" class="headerlink" title="5.5.3 经理同意"></a>5.5.3 经理同意</h4><p>关于经理同意操作的实现，如果我们把【同意】看做是经理填写的【审批表单（包括：审批结果、审批意见）】中的一个字段，那么其实现和完成填写请假单任务的实现差不多，经理点击同意之后也需要完成当前节点执行下一结束节点。</p><p>任务执行有两种情况，第一个是同意，第二个是不同意，我们先开发同意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAgree</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line"></span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">        .processDefinitionKey(<span class="string">&quot;Process_1&quot;</span>)</span><br><span class="line">        .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">        .processInstanceBusinessKey(<span class="string">&quot;business_key_01&quot;</span>).singleResult();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">null</span> != task)&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">&quot;approvalStatus&quot;</span>,<span class="string">&quot;同意&quot;</span>);</span><br><span class="line">        variables.put(<span class="string">&quot;approvalNote&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        taskService.complete(task.getId(),variables);</span><br><span class="line">        System.out.println(<span class="string">&quot;任务完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码执行成功后，到数据库中查看act_ru_execution、act_ru_task、act_ru_variable中的数据，你会发现里面没有了相关流程实例的数据，那是因为【经理审批】节点执行完成之后，后面的结束节点也会自动执行，因此流程就执行完成了。而<b style="color:red">act_ru_开头的表只存储运行中的流程信息</b>，不会存储流程结束了的信息，<b style="color:red">结束了的相关信息都转到act_hi开头的表中存储了</b>，相关表稍后我们再去认识。</p><h4 id="5-5-4-经理不同意"><a href="#5-5-4-经理不同意" class="headerlink" title="5.5.4 经理不同意"></a>5.5.4 经理不同意</h4><p>经理不同意和同意都是审批操作，那么不同意的实现就和同意的实现一样？不然，在这里不同意的需求要比同意的复杂一点，不同意则流程会终止执行。比如下面流程中，如果经理1审批不同意，那么经理2就不用审批了，整个流程就应该直接结束。因此不同意，则应该是终止流程而不是完成节点。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-32-36-image-20230820150955034-3932e7.png" alt="image-20230820150955034"></p><p>综上需求所述，则不同意的实现代码如下：</p><ul><li>在这里，要终止流程，因此操作的是流程实例</li><li>在删除流程时，同时也把审批不同意及理由，作为流程变量存储到流程变量中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRejectTask</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">assingee</span> <span class="operator">=</span> <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">        .processDefinitionKey(<span class="string">&quot;Process_1&quot;</span>) <span class="comment">//流程Key</span></span><br><span class="line">        .taskAssignee(assingee)  <span class="comment">//要查询的负责人</span></span><br><span class="line">        .singleResult();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">reason</span> <span class="operator">=</span> <span class="string">&quot;时间太久，不同意&quot;</span>;</span><br><span class="line">    Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;approvalStatus&quot;</span>, <span class="string">&quot;不同意&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;approvalNode&quot;</span>, reason);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录流程变量</span></span><br><span class="line">    runtimeService.setVariables(task.getProcessInstanceId(), variables);</span><br><span class="line">    <span class="comment">//添加流程变量，删除流程实例，表示任务被拒绝</span></span><br><span class="line">    runtimeService.deleteProcessInstance(task.getProcessInstanceId(), reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码执行成功后，同样在数据库中act_ru_execution、act_ru_task、act_ru_variable中的看不到数据，应为整个流程都被删除了，也结束了，信息也被转到了act_hi开头的表中。</p><p>到此，《单人审批请假流程》的整个流程就基本实现完成了。</p><h4 id="5-5-5-查询历史任务"><a href="#5-5-5-查询历史任务" class="headerlink" title="5.5.5 查询历史任务"></a>5.5.5 查询历史任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.activiti.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.HistoryService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.history.HistoricTaskInstance;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.history.HistoricTaskInstanceQuery;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sjqn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HistoryTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HistoryService historyService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getHistoryList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HistoricTaskInstanceQuery</span> <span class="variable">instanceQuery</span> <span class="operator">=</span> historyService.createHistoricTaskInstanceQuery()</span><br><span class="line">                .includeProcessVariables()</span><br><span class="line">                .orderByHistoricTaskInstanceEndTime().desc()</span><br><span class="line">                .finished()</span><br><span class="line">                .taskAssignee(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//自定义流程变量  条件查询</span></span><br><span class="line"><span class="comment">//        instanceQuery.processVariableValueGreaterThan(&quot;days&quot;, &quot;1&quot;);</span></span><br><span class="line"></span><br><span class="line">        List&lt;HistoricTaskInstance&gt; list = instanceQuery.list();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (HistoricTaskInstance history : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Id: &quot;</span> + history.getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;ProcessInstanceId: &quot;</span> + history.getProcessInstanceId());</span><br><span class="line">            System.out.println(<span class="string">&quot;StartTime: &quot;</span> + history.getStartTime());</span><br><span class="line">            System.out.println(<span class="string">&quot;Name: &quot;</span> + history.getName());</span><br><span class="line">            Map&lt;String, Object&gt; processVariables = history.getProcessVariables();</span><br><span class="line">            System.out.println(processVariables.get(<span class="string">&quot;days&quot;</span>).toString());</span><br><span class="line">            System.out.println(processVariables.get(<span class="string">&quot;reason&quot;</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询条件API说明</p><table><thead><tr><th>方法名称</th><th></th></tr></thead><tbody><tr><td>processInstanceBusinessKey(String processInstanceBusinessKey)</td><td>根据流程实例业务Key查询</td></tr><tr><td>taskId(String taskId)</td><td>根据任务ID查询</td></tr><tr><td>taskAssignee(String taskAssignee)  | taskAssigneeLike(String taskAssignee)</td><td>根据执行人查询</td></tr><tr><td>finished()</td><td>已完成的（申请过、同意过）</td></tr><tr><td>unfinished()</td><td>未完成任务</td></tr><tr><td>orderByHistoricTaskInstanceEndTime().desc()</td><td>按照执行时间排序</td></tr><tr><td>taskName(String var1)  |  taskNameLike(String var1)</td><td>根据节点任务名称查询</td></tr><tr><td>list()</td><td>返回分页数据</td></tr><tr><td>includeProcessVariables()</td><td>包含流程变量（配合下面使用）</td></tr><tr><td>processVariableValueEquals(String variableName, Object variableValue)</td><td>两个值相等</td></tr><tr><td>processVariableValueNotEquals(String variableName, Object variableValue)</td><td>两个值不相等</td></tr><tr><td>processVariableValueGreaterThan(String name, Object value)</td><td>大于</td></tr><tr><td>processVariableValueLessThan(String name, Object value)</td><td>小于</td></tr></tbody></table><h2 id="6-流程变量"><a href="#6-流程变量" class="headerlink" title="6 流程变量"></a>6 流程变量</h2><p>在刚才我们做过的例子中，其实就是固定分配，我们在画流程图的时候，指定的是具体的人去执行任务</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-32-42-image-20230909104227136-564612.png" alt="image-20230909104227136"></p><p>比如上图中，我们创建了用户任务节点之后，可以指定代理人，目前是让张三审核</p><p>不过，在实际的开发中，不同的部门有不同的人，这个执行人应该是一个变量，不应该写死，所以，固定分配可以在我们做demo的时候使用，在业务开发的过程中，需要使用动态的设置代理人</p><h3 id="6-1-UEL表达式"><a href="#6-1-UEL表达式" class="headerlink" title="6.1 UEL表达式"></a>6.1 UEL表达式</h3><p>我们现在想要动态的设置任务的代理人，我们就可以使用UEL表达式来完成。</p><p>UEL表达式（Unified Expression Language），是一种用于在流程定义中评估和计算表达式的语言。可以用来做流程条件判断、变量赋值等，使得流程定义或运行变得更加的灵活。</p><ul><li>定界符：${assignee}  |  ${user.assignee}</li><li>数学运算：${  5+5 }</li><li>逻辑判断：${amount &gt; 100}</li><li>方法调用：${ list(‘参数’) }，调用的是list方法，这个方法是Activiti内置的方法，把参数转成一个集合</li></ul><h3 id="6-2-动态分配任务人"><a href="#6-2-动态分配任务人" class="headerlink" title="6.2 动态分配任务人"></a>6.2 动态分配任务人</h3><h4 id="6-2-1-改造流程图"><a href="#6-2-1-改造流程图" class="headerlink" title="6.2.1 改造流程图"></a>6.2.1 改造流程图</h4><p>打开BPMN-JS前端工程，修改刚才的请假流程图，需要修改两个节点，分别是填写申请单、经理审核</p><p>第一：修改”填写申请单”任务节点，代理人改为：<code>$&#123;assingee0&#125;</code></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-32-56-image-20230909112035923-43864a.png" alt="image-20230909112035923"></p><p>第二：修改”经理审核”任务节点，代理人改为：<code>$&#123;assingee1&#125;</code></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-32-57-image-20230909112231422-43197a.png" alt="image-20230909112231422"></p><p>第三：重新导出流程图，放到idea中</p><p>为了跟之前的流程图区分，我们在导出之前可以修改流程图的编号，目前为：Process_2，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-33-13-image-20230909113719777-74bb82.png" alt="image-20230909113719777"></p><p>流程图文件的名字改为：diagram-uel.bpmn</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-33-15-image-20230909112813924-5257e2.png" alt="image-20230909112813924"></p><h4 id="6-2-2-动态分配"><a href="#6-2-2-动态分配" class="headerlink" title="6.2.2 动态分配"></a>6.2.2 动态分配</h4><p>我们现在的任务是UEL表达式来动态分配代理人的，其中的流程部署和任务执行的方式都一样，唯一不同的是，启动流程实例的时候，需要设置流程变量，来给刚才的${assingee0}和${assingee1}赋值，这样就能做到，多个人申请流程，是多套流程实例，每一套都有可能是不同的人来去处理任务</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.activiti.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sjqn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UELTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RepositoryService repositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程部署</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deployProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;bpmn/diagram-uel.bpmn&quot;</span>;</span><br><span class="line">        <span class="comment">//定义流程</span></span><br><span class="line">        <span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">                .addClasspathResource(fileName)</span><br><span class="line">                .name(<span class="string">&quot;Process_2&quot;</span>)</span><br><span class="line">                .deploy();</span><br><span class="line">        <span class="comment">//部署流程</span></span><br><span class="line">        System.out.println(deployment.getId());</span><br><span class="line">        System.out.println(deployment.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initProcessInstanceWithArgs</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//流程变量</span></span><br><span class="line">        Map&lt;String,Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;();</span><br><span class="line">        variables.put(<span class="string">&quot;assingee0&quot;</span>,<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        variables.put(<span class="string">&quot;assingee1&quot;</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动流程实例</span></span><br><span class="line">        <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceByKey(</span><br><span class="line">                <span class="string">&quot;Process_2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;business_key_02&quot;</span>,</span><br><span class="line">                variables);</span><br><span class="line">        <span class="comment">//Process_2:1:2ca378d1-fe9b-11ed-b40d-5405db5be13e</span></span><br><span class="line">        System.out.println(<span class="string">&quot;流程实例ID: &quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-任务查询和执行"><a href="#6-2-3-任务查询和执行" class="headerlink" title="6.2.3 任务查询和执行"></a>6.2.3 任务查询和执行</h4><p>任务查询和执行还是跟之前是一样的，因为现在我们已经给任务节点分配了执行人，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询我的代办任务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getTasksByAssignee</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">assingee</span> <span class="operator">=</span> <span class="string">&quot;赵六&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">        .processDefinitionKey(<span class="string">&quot;Process_2&quot;</span>) <span class="comment">//流程Key</span></span><br><span class="line">        .taskAssignee(assingee)  <span class="comment">//要查询的负责人</span></span><br><span class="line">        .singleResult();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Id: &quot;</span> + task.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;Name: &quot;</span> + task.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;Assignee: &quot;</span> + task.getAssignee());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行任务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completeTask</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">assingee</span> <span class="operator">=</span> <span class="string">&quot;赵六&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据流程key 和 任务的负责人 查询任务</span></span><br><span class="line">    <span class="comment">//返回一个任务对象</span></span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">        .processDefinitionKey(<span class="string">&quot;Process_2&quot;</span>) <span class="comment">//流程Key</span></span><br><span class="line">        .taskAssignee(assingee)  <span class="comment">//要查询的负责人</span></span><br><span class="line">        .singleResult();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (task == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(assingee + <span class="string">&quot;,没有任务可以执行...&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//执行任务</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把张三填写的请假单中的数据，作为流程变量，设置到流程中</span></span><br><span class="line">        Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        variables.put(<span class="string">&quot;startDate&quot;</span>, <span class="string">&quot;2024-1-1&quot;</span>);</span><br><span class="line">        variables.put(<span class="string">&quot;days&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        variables.put(<span class="string">&quot;reason&quot;</span>, <span class="string">&quot;元旦回家&quot;</span>);</span><br><span class="line"></span><br><span class="line">        taskService.complete(task.getId(), variables);</span><br><span class="line">        System.out.println(<span class="string">&quot;完成任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中经理审批的同意和不同意跟之前的代码是一样的，大家可以参考之前的代码</p><h4 id="6-2-4-其他类型支持"><a href="#6-2-4-其他类型支持" class="headerlink" title="6.2.4 其他类型支持"></a>6.2.4 其他类型支持</h4><p>刚才的例子只是UEL表达式中最基本的设置变量的方式，UEL还支持其他很多类型，比如：</p><p>使用pojo对象赋值</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-33-29-image-20230909142957621-62e02e.png" alt="image-20230909142957621"></p><p>spring的bean</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-33-31-image-20230909143049052-c2e180.png" alt="image-20230909143049052"></p><h3 id="6-3-动态分配连线上的变量"><a href="#6-3-动态分配连线上的变量" class="headerlink" title="6.3 动态分配连线上的变量"></a>6.3 动态分配连线上的变量</h3><h4 id="6-3-1-需求说明"><a href="#6-3-1-需求说明" class="headerlink" title="6.3.1 需求说明"></a>6.3.1 需求说明</h4><p>我们先来看一个新的需求，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-33-51-image-20230916094702872-33fc70.png" alt="image-20230916094702872"></p><p>一个员工请假，如果请假天数不超过3天，则由经理审批，如果请假天数超过3天，则由总经理审批</p><p>这个就需要我们在流程连上设置变量，就是我们刚才说的UEL表达式</p><h4 id="6-3-2-画流程图"><a href="#6-3-2-画流程图" class="headerlink" title="6.3.2 画流程图"></a>6.3.2 画流程图</h4><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-33-56-%E8%AF%B7%E5%81%87%E6%B5%81%E7%A8%8B%E8%BF%9E%E7%BA%BF%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE-1694830597155-52f1fc.gif" alt="请假流程连线变量设置"></p><p>上面流程中，重点是在经理审批和总经理审批的连上中设置UEL变量</p><ul><li>经理审批—&gt;  ${days &lt;&#x3D; 3}</li><li>总经理审批—&gt;  ${days &gt; 3}</li></ul><p>我们画好流程图之后，需要把它导出，然后放到idea中的</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-34-08-image-20230916100303654-34450b.png" alt="image-20230916100303654"></p><h4 id="6-3-3-代码开发"><a href="#6-3-3-代码开发" class="headerlink" title="6.3.3 代码开发"></a>6.3.3 代码开发</h4><p>(1)部署流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sjqn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SequenceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RepositoryService repositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程部署</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deployProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;bpmn/diagram-sequence.bpmn&quot;</span>;</span><br><span class="line">        <span class="comment">//定义流程</span></span><br><span class="line">        <span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">                .addClasspathResource(fileName)</span><br><span class="line">                .name(<span class="string">&quot;Process_3&quot;</span>)</span><br><span class="line">                .deploy();</span><br><span class="line">        <span class="comment">//部署流程</span></span><br><span class="line">        System.out.println(deployment.getId());</span><br><span class="line">        System.out.println(deployment.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)启动流程实例，设置流程变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sjqn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SequenceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RepositoryService repositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initProcessInstanceWithArgs</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//流程变量</span></span><br><span class="line">        Map&lt;String,Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;();</span><br><span class="line">        variables.put(<span class="string">&quot;assingee0&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        variables.put(<span class="string">&quot;assingee1&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        variables.put(<span class="string">&quot;assingee2&quot;</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动流程实例</span></span><br><span class="line">        <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceByKey(</span><br><span class="line">                <span class="string">&quot;Process_3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;business_key_03&quot;</span>,</span><br><span class="line">                variables);</span><br><span class="line">        <span class="comment">//Process_2:1:2ca378d1-fe9b-11ed-b40d-5405db5be13e</span></span><br><span class="line">        System.out.println(<span class="string">&quot;流程实例ID: &quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)填写请假单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.activiti.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.RepositoryService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.RuntimeService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.TaskService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.repository.Deployment;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.task.Task;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sjqn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SequenceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RepositoryService repositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询我的代办任务</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getTasksByAssignee</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">assingee</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">businessKey</span> <span class="operator">=</span> <span class="string">&quot;business_key_03&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;Process3&quot;</span>) <span class="comment">//流程Key</span></span><br><span class="line">                .taskAssignee(assingee)  <span class="comment">//要查询的负责人</span></span><br><span class="line">                .processInstanceBusinessKey(businessKey)</span><br><span class="line">                .singleResult();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Id: &quot;</span> + task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + task.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Assignee: &quot;</span> + task.getAssignee());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行任务</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completeTask</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">assingee</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">businessKey</span> <span class="operator">=</span> <span class="string">&quot;business_key_03&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据流程key 和 任务的负责人 查询任务</span></span><br><span class="line">        <span class="comment">//返回一个任务对象</span></span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">                .processDefinitionKey(<span class="string">&quot;Process3&quot;</span>) <span class="comment">//流程Key</span></span><br><span class="line">                .taskAssignee(assingee)  <span class="comment">//要查询的负责人</span></span><br><span class="line">                .processInstanceBusinessKey(businessKey)</span><br><span class="line">                .singleResult();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (task == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(assingee + <span class="string">&quot;,没有任务可以执行...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//执行任务</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 把张三填写的请假单中的数据，作为流程变量，设置到流程中</span></span><br><span class="line">            Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            variables.put(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            variables.put(<span class="string">&quot;startDate&quot;</span>, <span class="string">&quot;2024-1-1&quot;</span>);</span><br><span class="line">            variables.put(<span class="string">&quot;days&quot;</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line">            variables.put(<span class="string">&quot;reason&quot;</span>, <span class="string">&quot;元旦回家&quot;</span>);</span><br><span class="line"></span><br><span class="line">            taskService.complete(task.getId(), variables);</span><br><span class="line">            System.out.println(<span class="string">&quot;完成任务&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当<code>张三</code>填写申请单，我们重点设置<code>days</code>这个变量</li><li>当<code>days</code>变量小于等于3则会把下一个任务分配经理(李四)审批</li><li>当<code>days</code>变量大于3则会把下一个任务分配给总经理(王五)审批</li></ul><p>(4)经理审批或总经理审批</p><p>通过流程变量<code>days</code>控制之后，分配到了经理审批或总经理审批完成整个流程任务</p><h2 id="7-流程网关"><a href="#7-流程网关" class="headerlink" title="7 流程网关"></a>7 流程网关</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><p>网关（Gateway）是用于控制流程执行流向的元素。网关的作用是在流程执行时进行决策，决定流程的下一个执行步骤。根据网关的决策方式，可以将BPMN网关分为以下几种类型：</p><ol><li>排他网关（Exclusive Gateway）：也称为XOR网关或基于数据的排他网关，用于在流程中创建决策点。当执行到达排他网关时，所有出口顺序流会按照它们定义的顺序进行计算。条件计算为true的顺序流会被选择用于继续流程。</li><li>包容网关（Inclusive Gateway）：也称为AND网关或包容性决策网关，用于在流程中创建平行的路径。当执行到达包容网关时，所有出口顺序流同时进行计算，并且至少要有一个条件计算为true的顺序流被选择用于继续流程。</li><li>综合网关（Complex Gateway）：用于模拟复杂的同步行为。通过表达式激活条件描述精确的行为。</li><li>基于事件的网关（Event-based Gateway）：基于事件的网关代表流程中的一个分支点，其中遵循网关的替代路径基于发生的事件，而不是使用流程数据对表达式的评估。</li><li>并行网关（Parallel Gateway）：用于同步（组合）并行流并创建并行流。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-34-38-image-20230906195233706-367582.png" alt="image-20230906195233706"></p><h3 id="7-2-排他网关"><a href="#7-2-排他网关" class="headerlink" title="7.2 排他网关"></a>7.2 排他网关</h3><p>排他网关，用来在流程中实现决策。 当流程执行到这个网关，所有分支都会判断条件是否为true，如果为true则执行该分支，</p><p><strong>注意</strong>：排他网关只会选择一个为true的分支执行。如果有两个分支条件都为true，排他网关会选择id值较小的一条分支去执行。</p><p>为什么要用排他网关？</p><p>不用排他网关也可以实现分支，如：在连线的condition条件上设置分支条件。</p><p>在连线设置condition条件的缺点：如果条件都不满足，流程就结束了(是异常结束)。</p><p>如果 使用排他网关决定分支的走向，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-34-43-image-20230916232352332-572073.png" alt="image-20230916232352332"></p><p>如果从网关出去的线所有条件都不满足则系统抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.activiti.engine.ActivitiException: No outgoing sequence flow of the exclusive gateway <span class="string">&#x27;exclusivegateway1&#x27;</span> could be selected <span class="keyword">for</span> continuing the process</span><br><span class="line">   at org.activiti.engine.impl.bpmn.behavior.ExclusiveGatewayActivityBehavior.leave(ExclusiveGatewayActivityBehavior.java:<span class="number">85</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>实现代码：参考6.3章节中</p></blockquote><h2 id="8-作业"><a href="#8-作业" class="headerlink" title="8 作业"></a>8 作业</h2><p>采购流程审批</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/15-34-45-image-20231106155359169-c96239.png" alt="image-20231106155359169"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti7 </tag>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERP系统</title>
      <link href="/2024/07/05/ERP%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/07/05/ERP%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ERP系统的定义"><a href="#1-ERP系统的定义" class="headerlink" title="1.ERP系统的定义"></a>1.ERP系统的定义</h2><blockquote><h3 id="ERP，全称企业资源规划，那么，ERP究竟是什么？简单来说，ERP的本质上是一个集成化的管理平台，致力于将企业的核心运营环节——财务、人力资源、生产、供应链、服务和采购等——纳入一个统一的系统中。ERP不仅提供了对这些流程的高效管理，还促进了企业运营的协调和优化。因此，ERP被广泛认为是企业运营中不可或缺的记录系统。"><a href="#ERP，全称企业资源规划，那么，ERP究竟是什么？简单来说，ERP的本质上是一个集成化的管理平台，致力于将企业的核心运营环节——财务、人力资源、生产、供应链、服务和采购等——纳入一个统一的系统中。ERP不仅提供了对这些流程的高效管理，还促进了企业运营的协调和优化。因此，ERP被广泛认为是企业运营中不可或缺的记录系统。" class="headerlink" title="ERP，全称企业资源规划，那么，ERP究竟是什么？简单来说，ERP的本质上是一个集成化的管理平台，致力于将企业的核心运营环节——财务、人力资源、生产、供应链、服务和采购等——纳入一个统一的系统中。ERP不仅提供了对这些流程的高效管理，还促进了企业运营的协调和优化。因此，ERP被广泛认为是企业运营中不可或缺的记录系统。"></a>ERP，全称企业资源规划，那么，ERP究竟是什么？简单来说，ERP的本质上是一个集成化的管理平台，致力于将企业的核心运营环节——财务、人力资源、生产、供应链、服务和采购等——纳入一个统一的系统中。ERP不仅提供了对这些流程的高效管理，还促进了企业运营的协调和优化。因此，ERP被广泛认为是企业运营中不可或缺的记录系统。</h3></blockquote><h2 id="2-企业为什么要使用ERP？"><a href="#2-企业为什么要使用ERP？" class="headerlink" title="2.企业为什么要使用ERP？"></a>2.企业为什么要使用ERP？</h2><p>ERP软件系统能够提升数据管理效率，增强业务流程的透明度和协同性，并有助于减少资源浪费和提高运营效率，因此有时又被称为“企业的中枢神经系统”。企业的大多数或全部数据都应存储在 ERP 系统中，这样就能为整个企业提供统一的真实数据源。</p><p>此外，ERP还有助于企业的知识管理和创新能力的提升，同时提供完整的业务流程审计跟踪以实现风险管理。总的来说，ERP系统的实施对于企业的运营、竞争力和可持续发展都具有重要的意义。</p><blockquote><p>财务部门需要利用 ERP 快速进行结算；</p><p>营销部门需要借助 ERP 全面掌握市场动向，制定更有效的营销策略；</p><p>物流部门需要依靠强大的 ERP 软件，按时向客户交付正确的产品和服务；质量管理部门需要 ERP 系统实现全流程的质量管理，提高产品和服务的质量；</p><p>人力资源部门需要借助 ERP 系统实现自动化的招聘流程和员工培训管理；项目管理部门可利用 ERP 系统实时掌握项目的进展情况，合理制定项目规划。</p></blockquote><p>ERP 软件不断增长的采用率也体现了其对企业的重要性。根据 <a href="https://learn.g2.com/erp-statistics">G2</a> 的研究，“到 2026 年，全球 ERP 软件市场规模预计将达到 784 亿美元，2019 年到 2026 年间，年复合增长率将达到 10.2%。”</p><h2 id="3-ERP系统有哪些优势？"><a href="#3-ERP系统有哪些优势？" class="headerlink" title="3.ERP系统有哪些优势？"></a>3.ERP系统有哪些优势？</h2><blockquote><p>优秀的ERP管理系统以其强大的功能和集成性，能够为企业运营带来众多显著的优势。这些优势会因系统的部署方式而有所差异，例如在本地ERP和ERP云之间，其特点会有所不同。但一般来说，现代ERP解决方案都具有以下六个核心优势：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/14-06-14-image-20240705140614354-2831c1.png" alt="image-20240705140614354"></p><ol><li><strong>提高工作效率：</strong>通过简化核心业务流程和实现运营自动化，ERP系统帮助企业员工以更少的资源完成更多任务。这样不仅显著提升了整体工作效率，还解放了员工的时间，使他们能够专注于更具战略性的工作。</li><li><strong>深化洞察力：</strong>ERP系统消除信息孤岛，建立统一的真实数据源，为企业提供全面和精确的业务视图。这种透明度使管理层能够快速识别和解决关键业务问题，从而支持更明智的决策。</li><li><strong>加速报告流程：</strong>ERP系统能够快速生成并轻松分享各种业务和财务报表。企业可以根据实时数据洞察立即采取行动，从而提高业务绩效，确保决策过程更加敏捷和有效。</li><li><strong>降低风险：</strong>ERP系统显著提高了业务的可视性和可控性，帮助企业确保遵守各项法规要求。通过提前预测和防范潜在风险，企业可以降低运营风险，保障长期稳定发展。</li><li><strong>简化 IT：</strong>通过集成式ERP应用，企业可以共享一个数据库，从而简化IT管理。这样不仅降低了IT复杂性和成本，还使所有员工的工作更加轻松高效，减少了技术障碍。</li><li><strong>提高敏捷性：</strong>ERP系统通过实现高效运营和随时访问实时数据，使企业能够快速发现和响应市场上的新机遇。这种敏捷性使企业在竞争中处于优势地位，能够迅速调整策略以适应变化。</li></ol></blockquote><h2 id="4-ERP适用于哪些行业？"><a href="#4-ERP适用于哪些行业？" class="headerlink" title="4.ERP适用于哪些行业？"></a>4.ERP适用于哪些行业？</h2><blockquote><p>ERP系统适用于各种行业，其应用范围十分广泛。无论是制造业、零售业、服务业，还是金融业、医疗行业等，都可以借助ERP系统实现准确、实时的信息和业务流程管理。现代企业的运营离不开对数据的管理，而ERP系统在这一方面表现出其独特的优势。不同行业使用ERP软件的目的也各不相同，例如：</p><ul><li><strong>公用事业企业</strong>需要不断审查自身的资本资产，不仅是为了满足未来的服务需求，还是因为老旧资产需要更换。如果没有 ERP 系统，企业将很难确定需要优先进行哪些重大资产投资，并且也容易出错。ERP 系统还可以帮助解决公用事业企业面临的另一个关键问题：预测备件需求。如果企业在设备故障期间无法及时获得所需部件，将会造成严重的客户服务问题，但如果备件过多，又会导致企业成本过高和库存过时。</li><li>对于<strong>批发商</strong>、进口商、提供直接配送到店服务的企业以及第三方&#x2F;第四方物流服务提供商而言，按时交货至关重要。这类企业都希望能够降低配送成本，提高库存周转率，并缩短订单到收款的时间。而要实现这些目标，企业就需要集成库存管理、采购和物流功能，并构建支持按需定制的自动化流程。</li><li>离散<strong>制造企业</strong>、批量生产企业和连续流程制造企业都在利用 ERP 系统和<a href="https://www.sap.cn/insights/supply-chain.html">供应链</a>系统，来达成产品质量目标、管理资产利用率、控制加班成本、处理客户退货等。制造企业还可以实现端到端库存控制，比如，监控库存移动、确定高绩效和低绩效产品、更高效地管理采购等。</li><li><strong>服务企业</strong>（包括会计、税务、工程、IT、法律和其他专业服务机构）需要利用强大的实时移动 ERP 技术，来平衡服务交付承诺与财务健康。专业服务企业成功的关键在于，他们能够按照计划交付服务，同时高效管理项目盈利能力、资源利用率、收入确认、经常性收入目标和业务增长机会。</li><li>随着电子商务与其他销售渠道以及实体业务融合，<strong>零售行业</strong>经历了重大转型。企业要想为客户提供自助的产品查找、配置、购买和运输选项，必须依靠整合的数据。现代 ERP 还能帮助零售商降低购物车放弃率，提高网站转化率，提升平均订单金额和客户终身价值。</li><li><strong>金融业</strong>需要不断审查其资产组合，不仅为了优化投资回报，还为了确保合规和风险管理。ERP 系统能够帮助投资者优化资产组合，提升投资回报率。此外，ERP系统还能帮助解决金融业面临的另一个关键问题：风险预测和管理。如果在市场波动期间无法及时调整风险敞口，可能会导致重大财务损失和客户信任度下降；但如果风险管理过于保守，又会错失潜在的盈利机会。通过ERP系统，金融机构可以精确管理资产和风险，确保稳定运营和持续增长。</li><li>在<strong>医疗行业</strong>，医院和诊所正利用ERP系统和供应链管理系统，实现患者护理状况监测、优化资源利用、控制运营成本和处理患者反馈等。医疗机构还可以实现端到端的库存管理，例如监控药品和医疗设备的移动、识别高需求和低需求药物、更高效地管理药品采购流程等。通过这些系统，医疗行业能够提高整体运营效率，确保优质的患者护理服务。</li></ul></blockquote><h2 id="5-ERP系统的基本原理"><a href="#5-ERP系统的基本原理" class="headerlink" title="5.ERP系统的基本原理"></a>5.ERP系统的基本原理</h2><blockquote><p>ERP系统是一种复杂的企业级资源规划系统，也称为ERP套件，它通过集成多个模块或业务应用，并让这些应用之间能够互相通信并共享一个数据库，从而实现对整个企业运营活动的全面管理。</p><p>每个 ERP 模块通常只专注于一个业务领域，但所有模块都使用相同的数据，以协同的方式运行，满足企业的需求。财务、会计、人力资源、销售、采购、物流和供应链模块是企业最常选择的切入点。企业可以选择先部署最需要的模块，然后再根据发展需要添加或扩展其他模块。</p><p>企业还可以添加系统核心功能或构建应用扩展，并将之与 ERP 套件无缝集成，以此来满足行业特定的需求。</p><p>ERP 软件的购买方式取决于部署模式。ERP 云（软件即服务）采用订阅模式；本地 ERP 采用许可模式。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/14-08-15-image-20240705140815768-6e90d0.png" alt="image-20240705140815768"></p></blockquote><h2 id="6-ERP的主要模块有哪些"><a href="#6-ERP的主要模块有哪些" class="headerlink" title="6.ERP的主要模块有哪些"></a>6.ERP的主要模块有哪些</h2><blockquote><p>ERP系统由多个不同模块组成，每个模块专注于支持特定的业务流程，比如财务、采购、制造等。这些模块为各个部门的员工提供了完成工作所需的功能和洞察能力，使事务处理更加高效、准确。此外，每个模块都与ERP系统紧密相连，从而构建了一个统一的、真实的数据源。这个数据源不仅确保了各个部门之间的数据共享，还实现了数据的实时更新和准确性。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/05/14-08-36-image-20240705140836499-6f446d.png" alt="image-20240705140836499"></p><p>应用最广泛的 ERP 模块包括：</p><ol><li><strong>财务：</strong>财务和会计模块是大多数 ERP 系统的支柱。除了管理总账和自动执行关键财务任务外，财务模块还能帮助企业跟踪应付账款 (AP) 和应收账款 (AR)、高效执行财务结算、生成财务报表、遵守收入确认标准、降低财务风险等。</li><li><strong>人力资源管理：</strong>大多数 ERP 系统都包含 HR 模块，该模块提供工时、考勤以及薪资核算等核心功能。扩展组件甚至整个<a href="https://www.sap.cn/products/hcm.html">人力资本管理 (HCM)</a> 套件都可以连接至 ERP 系统，提供更加强大的 HR 功能，包括劳动力分析、员工体验管理等。</li><li><strong>寻源和采购：</strong>寻源和采购模块可以帮助企业采购产品生产所需的物料和服务，或是想要转售的商品。该模块可以集中自动处理采购业务，包括询价、合同创建和审批等。借助该模块，企业能够利用基于 AI 的分析功能，尽可能地减少采购不足和过度采购的情况，并更好地与供应商谈判，甚至可以无缝连接采购商网络。</li><li><strong>销售：</strong>销售模块可以跟踪企业与潜在客户和现有客户的沟通，帮助销售代表利用由数据驱动的洞察，开展恰当的促销活动，把握追加销售机会，提高销量并挖掘更多销售线索。该模块提供了订单到收款流程所需的各种功能，包括订单管理、<a href="https://www.sap.cn/products/spend-management/contract-management-software.html">合同管理</a>、计费管理、销售绩效管理和销售团队支持。</li><li><strong>制造：</strong>制造模块是 ERP 软件的关键计划和执行组件，可以帮助企业简化复杂的制造流程，确保按需生产。该模块通常包含物料需求计划 (MRP)、生产调度、制造执行、质量管理等功能。</li><li><strong>物流和供应链管理：</strong>作为 ERP 系统的另一关键组件，供应链模块能够跟踪企业供应链中商品和物资的移动情况。该模块提供实时库存管理、仓储运营、运输和物流工具，可以帮助提高供应链的可视性和韧性。</li><li><strong>服务：</strong>在 ERP 系统中，服务模块可以帮助企业交付客户期望的可靠个性化服务。该模块包含多种工具，支持内部维修管理、备件管理、现场服务管理和基于服务的收入流管理。此外，该模块还提供分析功能，可以帮助服务代表和技术人员快速解决客户问题，提高客户忠诚度。</li><li><strong>研发和工程：</strong>功能丰富的 ERP 系统包含研发和工程模块。该模块提供产品设计和开发、产品生命周期管理 (PLM)、产品合规性管理等工具，支持企业以经济高效的方式快速打造创新产品。</li><li><strong>企业资产管理 (EAM)：</strong>功能强大的 ERP 系统会包含 EAM 模块，这个模块可以帮助资产密集型企业尽可能地减少停机时间，确保机器和设备以最高效率运行。该模块具备预测性维护、调度、资产运营与计划以及环境、健康与安全 (EHS) 等功能。</li><li>项目管理：项目管理模块在ERP系统中扮演着重要角色，帮助企业规划和执行项目。除了制定项目计划和进度安排外，该模块还能管理项目预算、跟踪项目成本、分配资源和生成项目报告。通过项目管理模块，企业可以确保项目按时按预算完成，提高项目成功率。</li><li>**客户关系管理 (CRM)**：CRM模块在ERP系统中至关重要，帮助企业管理与客户的互动。该模块提供客户信息管理、销售线索跟踪、客户服务管理和营销活动分析等功能。通过CRM模块，企业能够提升客户满意度，增加销售机会，并建立长期客户关系。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 系统 </category>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统架构 </tag>
            
            <tag> 软件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期</title>
      <link href="/2024/07/03/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2024/07/03/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>上一篇文章地址：<a href="/2024/07/03/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/" title="Vue组件通信基础">Vue组件通信基础</a><br>承接上一篇文章，这次学习了Vue组件通信基础。<br>核心问题: <a href="/2022/07/03/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/" title="Vue生命周期-核心问题">Vue生命周期-核心问题</a></p></blockquote><h2 id="知识点自测"><a href="#知识点自测" class="headerlink" title="知识点自测"></a>知识点自测</h2><ul><li><input disabled="" type="checkbox"> 知道window.onload的作用</li><li><input disabled="" type="checkbox"> ajax是什么, XMLHttpRequest的使用步骤</li><li><input disabled="" type="checkbox"> jQ的 $.ajax底层是什么?</li><li><input disabled="" type="checkbox"> Promise的作用</li><li><input disabled="" type="checkbox"> async和await的作用-如何和Promise配合</li><li><input disabled="" type="checkbox"> 同步异步的概念, 代码执行顺序</li><li><input disabled="" type="checkbox"> 请求和响应, 以及JSON解析能力</li><li><input disabled="" type="checkbox"> Vue基础, 组件使用, props传值, 组件通信, 计算属性使用, 对象引用类型使用</li></ul><h2 id="今日学习目标"><a href="#今日学习目标" class="headerlink" title="今日学习目标"></a>今日学习目标</h2><ol><li>能够说出vue组件生命周期</li><li>能够掌握axios的使用</li><li>能够了解$refs, $nextTick使用和name使用</li><li>能够完成购物车案例开发</li></ol><h2 id="1-vue生命周期"><a href="#1-vue生命周期" class="headerlink" title="1. vue生命周期"></a>1. vue生命周期</h2><h3 id="1-0-人的-生命周期"><a href="#1-0-人的-生命周期" class="headerlink" title="1.0_人的-生命周期"></a>1.0_人的-生命周期</h3><blockquote><p>一组件从 创建 到 销毁 的整个过程就是生命周期</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/07-46-16-image-20210111193143574-2d1e2b.png" alt="image-20210111193143574"></p><p>Vue_生命周期</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/07-46-12-image-20210511152835915-a3f9d3.png" alt="image-20210511152835915"></p><h3 id="1-1-钩子函数"><a href="#1-1-钩子函数" class="headerlink" title="1.1_钩子函数"></a>1.1_钩子函数</h3><blockquote><p>目标: <strong>Vue</strong> 框架内置函数，随着组件的生命周期阶段，自动执行</p></blockquote><p>作用: 特定的时间点，执行特定的操作</p><p>场景: 组件创建完毕后，可以在created 生命周期函数中发起Ajax 请求，从而初始化 data 数据</p><p>分类: 4大阶段8个方法</p><ul><li>初始化</li><li>挂载</li><li>更新</li><li>销毁</li></ul><table><thead><tr><th><strong>阶段</strong></th><th><strong>方法名</strong></th><th><strong>方法名</strong></th></tr></thead><tbody><tr><td>初始化</td><td>beforeCreate</td><td>created</td></tr><tr><td>挂载</td><td>beforeMount</td><td>mounted</td></tr><tr><td>更新</td><td>beforeUpdate</td><td>updated</td></tr><tr><td>销毁</td><td>beforeDestroy</td><td>destroyed</td></tr></tbody></table><p><a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">官网文档</a></p><p>下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/07-46-34-Day03-a00d25.png" alt="Day03"></p><h3 id="1-2-初始化阶段"><a href="#1-2-初始化阶段" class="headerlink" title="1.2_初始化阶段"></a>1.2_初始化阶段</h3><blockquote><p>目标: 掌握初始化阶段2个钩子函数作用和执行时机</p></blockquote><p>含义讲解:</p><p>1.new Vue() – Vue实例化(组件也是一个小的Vue实例)</p><p>2.Init Events &amp; Lifecycle – 初始化事件和生命周期函数</p><p>3.beforeCreate – 生命周期钩子函数被执行</p><p>4.Init injections&amp;reactivity – Vue内部添加data和methods等</p><p>5.created – 生命周期钩子函数被执行, 实例创建</p><p>6.接下来是编译模板阶段 –开始分析</p><p>7.Has el option? – 是否有el选项 – 检查要挂到哪里</p><p>​没有. 调用$mount()方法</p><p>​有, 继续检查template选项</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/07-47-18-image-20210511153050932-686d49.png" alt="image-20210511153050932"></p><p>components&#x2F;Life.vue - 创建一个文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;hello, Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一. 初始化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// new Vue()以后, vue内部给实例对象添加了一些属性和方法, data和methods初始化&quot;之前&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeCreate -- 执行&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data和methods初始化以后</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 场景: 网络请求, 注册全局事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;created -- 执行&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>); <span class="comment">// hello, Vue</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;哈哈哈&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>App.vue - 引入使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;1. 生命周期&lt;/h1&gt;</span><br><span class="line"> &lt;Life&gt;&lt;/Life&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Life from &#x27;./components/Life&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Life</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3-挂载阶段"><a href="#1-3-挂载阶段" class="headerlink" title="1.3_挂载阶段"></a>1.3_挂载阶段</h3><blockquote><p>目标: 掌握挂载阶段2个钩子函数作用和执行时机</p></blockquote><p>含义讲解:</p><p>1.template选项检查</p><p>​有 - 编译template返回render渲染函数</p><p>​无 – 编译el选项对应标签作为template(要渲染的模板)</p><p>2.虚拟DOM挂载成真实DOM之前</p><p>3.beforeMount – 生命周期钩子函数被执行</p><p>4.Create … – 把虚拟DOM和渲染的数据一并挂到真实DOM上</p><p>5.真实DOM挂载完毕</p><p>6.mounted – 生命周期钩子函数被执行</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/08-11-05-image-20210511153649298-6d43e7.png" alt="image-20210511153649298"></p><p>components&#x2F;Life.vue - 创建一个文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>学习生命周期 - 看控制台打印<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;myP&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ...省略其他代码</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 二. 挂载</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 真实DOM挂载之前</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 场景: 预处理data, 不会触发updated钩子函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeMount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeMount -- 执行&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myP&quot;</span>)); <span class="comment">// null</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;重新值&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 真实DOM挂载以后</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 场景: 挂载后真实DOM</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mounted -- 执行&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myP&quot;</span>)); <span class="comment">// p</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-更新阶段"><a href="#1-4-更新阶段" class="headerlink" title="1.4_更新阶段"></a>1.4_更新阶段</h3><blockquote><p>目标: 掌握更新阶段2个钩子函数作用和执行时机</p></blockquote><p>含义讲解:</p><p>1.当data里数据改变, 更新DOM之前</p><p>2.beforeUpdate – 生命周期钩子函数被执行</p><p>3.Virtual DOM…… – 虚拟DOM重新渲染, 打补丁到真实DOM</p><p>4.updated – 生命周期钩子函数被执行</p><p>5.当有data数据改变 – 重复这个循环</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/08-12-04-image-20210511154016777-142768.png" alt="image-20210511154016777"></p><p>components&#x2F;Life.vue - 创建一个文件</p><p>准备ul+li循环, 按钮添加元素, 触发data改变-&gt;导致更新周期开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>学习生命周期 - 看控制台打印<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;myP&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;myUL&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(val, index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; val &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;arr.push(1000)&quot;</span>&gt;</span>点击末尾加值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;hello, Vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">arr</span>: [<span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ...省略其他代码</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 三. 更新</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 前提: data数据改变才执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新之前</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeUpdate -- 执行&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;#myUL&gt;li&quot;</span>)[<span class="number">4</span>]); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新之后</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 场景: 获取更新后的真实DOM</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updated</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updated -- 执行&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;#myUL&gt;li&quot;</span>)[<span class="number">4</span>]); <span class="comment">// li</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-销毁阶段"><a href="#1-5-销毁阶段" class="headerlink" title="1.5_销毁阶段"></a>1.5_销毁阶段</h3><blockquote><p>目标: 掌握销毁阶段2个钩子函数作用和执行时机</p></blockquote><p>含义讲解:</p><p>1.当$destroy()被调用 – 比如组件DOM被移除(例v-if)</p><p>2.beforeDestroy – 生命周期钩子函数被执行</p><p>3.拆卸数据监视器、子组件和事件侦听器</p><p>4.实例销毁后, 最后触发一个钩子函数</p><p>5.destroyed – 生命周期钩子函数被执行</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/08-12-21-image-20210511154330252-536546.png" alt="image-20210511154330252"></p><p>components&#x2F;Life.vue - 准备生命周期方法(Life组件即将要被删除)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ...省略其他代码</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 四. 销毁</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 前提: v-if=&quot;false&quot; 销毁Vue实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 场景: 移除全局事件, 移除当前组件, 计时器, 定时器, eventBus移除事件$off方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(&#x27;beforeDestroy -- 执行&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">destroyed</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(&quot;destroyed -- 执行&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要: App.vue - 点击按钮让Life组件从DOM上移除 -&gt; 导致Life组件进入销毁阶段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Life v-if=&quot;show&quot;&gt;&lt;/Life&gt;</span><br><span class="line">&lt;button @click=&quot;show = false&quot;&gt;销毁组件&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            show: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-axios"><a href="#2-axios" class="headerlink" title="2. axios"></a>2. axios</h2><h3 id="2-0-axios基本使用"><a href="#2-0-axios基本使用" class="headerlink" title="2.0_axios基本使用"></a>2.0_axios基本使用</h3><p><a href="http://www.axios-js.com/">axios文档</a></p><p>特点</p><ul><li>支持客户端发送Ajax请求</li><li>支持服务端Node.js发送请求</li><li>支持Promise相关用法</li><li>支持请求和响应的拦截器功能</li><li>自动转换JSON数据</li><li>axios 底层还是原生js实现, 内部通过Promise封装的</li></ul><p>axios的基本使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;请求方式&#x27;</span>, <span class="comment">// get post</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;请求地址&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;    <span class="comment">// 拼接到请求体的参数,  post请求的参数</span></span><br><span class="line">    <span class="attr">xxx</span>: xxx,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">params</span>: &#123;  <span class="comment">// 拼接到请求行的参数, get请求的参数</span></span><br><span class="line">   <span class="attr">xxx</span>: xxx </span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>) <span class="comment">// 后台返回的结果</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) <span class="comment">// 后台报错返回</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-1-axios基本使用-获取数据"><a href="#2-1-axios基本使用-获取数据" class="headerlink" title="2.1_axios基本使用-获取数据"></a>2.1_axios基本使用-获取数据</h3><blockquote><p>目标: 调用文档最后_获取所有图书信息接口</p></blockquote><p>功能: 点击调用后台接口, 拿到所有数据 – 打印到控制台</p><p>接口: 参考预习资料.md – 接口文档</p><p>引入: 下载axios, 引入后才能使用</p><p>效果:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/08-13-38-image-20210511154911824-d79a77.png" alt="image-20210511154911824"></p><p>例子如下:</p><p>components&#x2F;UseAxios.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;1. 获取所有图书信息&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;getAllFn&quot;&gt;点击-查看控制台&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标1: 获取所有图书信息</span><br><span class="line">// 1. 下载axios</span><br><span class="line">// 2. 引入axios</span><br><span class="line">// 3. 发起axios请求</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getAllFn() &#123;</span><br><span class="line">      axios(&#123;</span><br><span class="line">        url: &quot;http://123.57.109.30:3006/api/getbooks&quot;,</span><br><span class="line">        method: &quot;GET&quot;, // 默认就是GET方式请求, 可以省略不写</span><br><span class="line">      &#125;).then((res) =&gt; &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">      &#125;);</span><br><span class="line">      // axios()-原地得到Promise对象</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-axios基本使用-传参"><a href="#2-2-axios基本使用-传参" class="headerlink" title="2.2_axios基本使用-传参"></a>2.2_axios基本使用-传参</h3><blockquote><p>目标: 调用接口-获取某本书籍信息</p></blockquote><p>功能: 点击调用后台接口, 查询用户想要的书籍信息 – 打印到控制台</p><p>接口: 参考预习资料.md – 接口文档</p><p>效果:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/08-16-58-image-20210511160538891-1edeea.png" alt="image-20210511160538891"></p><p>例子如下:</p><p>components&#x2F;UseAxios.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;2. 查询某本书籍信息&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;请输入要查询 的书名&quot; v-model=&quot;bName&quot; /&gt;</span><br><span class="line">    &lt;button @click=&quot;findFn&quot;&gt;查询&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      bName: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // ...省略了查询所有的代码</span><br><span class="line">    findFn() &#123;</span><br><span class="line">      axios(&#123;</span><br><span class="line">        url: &quot;/api/getbooks&quot;,</span><br><span class="line">        method: &quot;GET&quot;,</span><br><span class="line">        params: &#123; // 都会axios最终拼接到url?后面</span><br><span class="line">            bookname: this.bName</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(res =&gt; &#123;</span><br><span class="line">          console.log(res);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-axios基本使用-发布书籍"><a href="#2-3-axios基本使用-发布书籍" class="headerlink" title="2.3_axios基本使用-发布书籍"></a>2.3_axios基本使用-发布书籍</h3><blockquote><p>目标: 完成发布书籍功能</p></blockquote><p>功能: 点击新增按钮, 把用户输入的书籍信息, 传递给后台 – 把结果打印在控制台</p><p>接口: 参考预习资料.md – 接口文档</p><p>效果:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/08-17-09-image-20210511161239034-9c5238.png" alt="image-20210511161239034"></p><p>例子如下:</p><p>components&#x2F;UseAxios.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;3. 新增图书信息&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;书名&quot; v-model=&quot;bookObj.bookname&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;作者&quot; v-model=&quot;bookObj.author&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;出版社&quot; v-model=&quot;bookObj.publisher&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;sendFn&quot;&gt;发布&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      bName: &quot;&quot;,</span><br><span class="line">      bookObj: &#123; // 参数名提前和后台的参数名对上-发送请求就不用再次对接了</span><br><span class="line">          bookname: &quot;&quot;,</span><br><span class="line">          author: &quot;&quot;,</span><br><span class="line">          publisher: &quot;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // ...省略了其他代码</span><br><span class="line">    sendFn()&#123;</span><br><span class="line">       axios(&#123;</span><br><span class="line">           url: &quot;/api/addbook&quot;,</span><br><span class="line">           method: &quot;POST&quot;,</span><br><span class="line">           data: &#123;</span><br><span class="line">               appkey: &quot;7250d3eb-18e1-41bc-8bb2-11483665535a&quot;,</span><br><span class="line">               ...this.bookObj</span><br><span class="line">            // 等同于下面</span><br><span class="line">            // bookname: this.bookObj.bookname,</span><br><span class="line">            // author: this.bookObj.author,</span><br><span class="line">            // publisher: this.bookObj.publisher</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-axios基本使用-全局配置"><a href="#2-4-axios基本使用-全局配置" class="headerlink" title="2.4_axios基本使用-全局配置"></a>2.4_axios基本使用-全局配置</h3><blockquote><p>目标: 避免前缀基地址, 暴露在逻辑页面里, 统一设置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;http://123.57.109.30:3006&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有请求的url前置可以去掉, 请求时, axios会自动拼接baseURL的地址在前面</span></span><br><span class="line"><span class="title function_">getAllFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/api/getbooks&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>, <span class="comment">// 默认就是GET方式请求, 可以省略不写</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// axios()-原地得到Promise对象</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-nextTick和-refs知识"><a href="#3-nextTick和-refs知识" class="headerlink" title="3. $nextTick和$refs知识"></a>3. $nextTick和$refs知识</h2><h3 id="3-0-refs-获取DOM"><a href="#3-0-refs-获取DOM" class="headerlink" title="3.0 $refs-获取DOM"></a>3.0 $refs-获取DOM</h3><blockquote><p>目标: 利用 ref 和 $refs 可以用于获取 dom 元素</p></blockquote><p>components&#x2F;More.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;1. 获取原生DOM元素&lt;/p&gt;</span><br><span class="line">      &lt;h1 id=&quot;h&quot; ref=&quot;myH&quot;&gt;我是一个孤独可怜又能吃的h1&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 获取组件对象</span><br><span class="line">// 1. 创建组件/引入组件/注册组件/使用组件</span><br><span class="line">// 2. 组件起别名ref</span><br><span class="line">// 3. 恰当时机, 获取组件对象</span><br><span class="line">export default &#123;</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        console.log(document.getElementById(&quot;h&quot;)); // h1</span><br><span class="line">        console.log(this.$refs.myH); // h1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 通过id &#x2F; ref, 都可以获取原生DOM标签</p></blockquote><h3 id="3-1-refs-获取组件对象"><a href="#3-1-refs-获取组件对象" class="headerlink" title="3.1 $refs-获取组件对象"></a>3.1 $refs-获取组件对象</h3><blockquote><p>目标: 获取组件对象, 调用组件里方法</p></blockquote><p>components&#x2F;Child&#x2F;Demo.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;我是Demo组件&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        fn()&#123;</span><br><span class="line">            console.log(&quot;demo组件内的方法被调用了&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>More.vue - 获取组件对象 - 调用组件方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;1. 获取原生DOM元素&lt;/p&gt;</span><br><span class="line">      &lt;h1 id=&quot;h&quot; ref=&quot;myH&quot;&gt;我是一个孤独可怜又能吃的h1&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;2. 获取组件对象 - 可调用组件内一切&lt;/p&gt;</span><br><span class="line">      &lt;Demo ref=&quot;de&quot;&gt;&lt;/Demo&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 获取组件对象</span><br><span class="line">// 1. 创建组件/引入组件/注册组件/使用组件</span><br><span class="line">// 2. 组件起别名ref</span><br><span class="line">// 3. 恰当时机, 获取组件对象</span><br><span class="line">import Demo from &#x27;./Child/Demo&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        console.log(document.getElementById(&quot;h&quot;)); // h1</span><br><span class="line">        console.log(this.$refs.myH); // h1</span><br><span class="line"></span><br><span class="line">        // 可以引用组件里的函数</span><br><span class="line">        let demoObj = this.$refs.de;</span><br><span class="line">        demoObj.fn()</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Demo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: ref定义值, 通过$refs.值 来获取组件对象, 就能继续调用组件内的变量</p></blockquote><h3 id="3-2-nextTick使用"><a href="#3-2-nextTick使用" class="headerlink" title="3.2 $nextTick使用"></a>3.2 $nextTick使用</h3><blockquote><h4 id="Vue更新DOM-异步的"><a href="#Vue更新DOM-异步的" class="headerlink" title="Vue更新DOM-异步的"></a>Vue更新DOM-异步的</h4></blockquote><blockquote><p>目标: 点击count++, 马上通过”原生DOM”拿标签内容, 无法拿到新值</p></blockquote><p>components&#x2F;Move.vue - 继续新增第三套代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;1. 获取原生DOM元素&lt;/p&gt;</span><br><span class="line">      &lt;h1 id=&quot;h&quot; ref=&quot;myH&quot;&gt;我是一个孤独可怜又能吃的h1&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;2. 获取组件对象 - 可调用组件内一切&lt;/p&gt;</span><br><span class="line">      &lt;Demo ref=&quot;de&quot;&gt;&lt;/Demo&gt;</span><br><span class="line">      &lt;p&gt;3. vue更新DOM是异步的&lt;/p&gt;</span><br><span class="line">      &lt;p ref=&quot;myP&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;button @click=&quot;btn&quot;&gt;点击count+1, 马上提取p标签内容&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 获取组件对象</span><br><span class="line">// 1. 创建组件/引入组件/注册组件/使用组件</span><br><span class="line">// 2. 组件起别名ref</span><br><span class="line">// 3. 恰当时机, 获取组件对象</span><br><span class="line">import Demo from &#x27;./Child/Demo&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        console.log(document.getElementById(&quot;h&quot;)); // h1</span><br><span class="line">        console.log(this.$refs.myH); // h1</span><br><span class="line"></span><br><span class="line">        let demoObj = this.$refs.de;</span><br><span class="line">        demoObj.fn()</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Demo</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        btn()&#123;</span><br><span class="line">            this.count++; // vue监测数据更新, 开启一个DOM更新队列(异步任务)</span><br><span class="line">            console.log(this.$refs.myP.innerHTML); // 0</span><br><span class="line"></span><br><span class="line">            // 原因: Vue更新DOM异步</span><br><span class="line">            // 解决: this.$nextTick()</span><br><span class="line">            // 过程: DOM更新完会挨个触发$nextTick里的函数体</span><br><span class="line">             this.$nextTick(() =&gt; &#123;</span><br><span class="line">                console.log(this.$refs.myP.innerHTML); // 1</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 因为DOM更新是异步的</p></blockquote><h3 id="3-3-nextTick使用场景"><a href="#3-3-nextTick使用场景" class="headerlink" title="3.3 $nextTick使用场景"></a>3.3 $nextTick使用场景</h3><blockquote><p>目标: 点击搜索按钮, 弹出聚焦的输入框, 按钮消失</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/08-23-05-undefinednextTick%E4%BD%BF%E7%94%A8-91b417.gif" alt="$nextTick使用"></p><p>components&#x2F;Tick.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;input ref=&quot;myInp&quot; type=&quot;text&quot; placeholder=&quot;这是一个输入框&quot; v-if=&quot;isShow&quot;&gt;</span><br><span class="line">      &lt;button v-else @click=&quot;btn&quot;&gt;点击我进行搜索&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 点按钮(消失) - 输入框出现并聚焦</span><br><span class="line">// 1. 获取到输入框</span><br><span class="line">// 2. 输入框调用事件方法focus()达到聚焦行为</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        async btn()&#123;</span><br><span class="line">            this.isShow = true;</span><br><span class="line">            // this.$refs.myInp.focus()</span><br><span class="line">            // 原因: data变化更新DOM是异步的</span><br><span class="line">            // 输入框还没有挂载到真实DOM上</span><br><span class="line">            // 解决:</span><br><span class="line">            // this.$nextTick(() =&gt; &#123;</span><br><span class="line">            //     this.$refs.myInp.focus()</span><br><span class="line">            // &#125;)</span><br><span class="line">            // 扩展: await取代回调函数</span><br><span class="line">            // $nextTick()原地返回Promise对象</span><br><span class="line">            await this.$nextTick()</span><br><span class="line">            this.$refs.myInp.focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-组件name属性使用"><a href="#3-4-组件name属性使用" class="headerlink" title="3.4 组件name属性使用"></a>3.4 组件name属性使用</h3><blockquote><p>目标: 可以用组件的name属性值, 来注册组件名字</p></blockquote><p>问题: 组件名不是可以随便写的?</p><p>答案: 我们封装的组件-可以自己定义name属性组件名-让使用者有个统一的前缀风格</p><p>components&#x2F;Com.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;我是一个Com组件&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;ComNameHaHa&quot; // 注册时可以定义自己的名字</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>App.vue - 注册和使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;1. 生命周期&lt;/h1&gt;</span><br><span class="line">    &lt;Life v-if=&quot;show&quot;&gt;&lt;/Life&gt;</span><br><span class="line">    &lt;button @click=&quot;show = false&quot;&gt;销毁组件&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;2. axios使用&lt;/h1&gt;</span><br><span class="line">    &lt;UseAxios&gt;&lt;/UseAxios&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;3. $refs的使用&lt;/h1&gt;</span><br><span class="line">    &lt;More&gt;&lt;/More&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;4. $nextTick使用场景&lt;/h1&gt;</span><br><span class="line">    &lt;Tick&gt;&lt;/Tick&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;5. 组件对象里name属性&lt;/h1&gt;</span><br><span class="line">    &lt;ComNameHaHa&gt;&lt;/ComNameHaHa&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Life from &#x27;./components/Life&#x27;</span><br><span class="line">import UseAxios from &#x27;./components/UseAxios&#x27;</span><br><span class="line">import More from &#x27;./components/More&#x27;</span><br><span class="line">import Tick from &#x27;./components/Tick&#x27;</span><br><span class="line">import Com from &#x27;./components/Com&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Life,</span><br><span class="line">    UseAxios,</span><br><span class="line">    More,</span><br><span class="line">    Tick,</span><br><span class="line">    [Com.name]: Com // 对象里的key是变量的话[]属性名表达式</span><br><span class="line">    // &quot;ComNameHaHa&quot;: Com</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4-案例-购物车"><a href="#4-案例-购物车" class="headerlink" title="4. 案例 - 购物车"></a>4. 案例 - 购物车</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/08-25-44-%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%85%A8%E6%95%88%E6%9E%9C-c3d2db.gif" alt="购物车全效果"></p><h3 id="4-0-案例-购物车-项目初始化"><a href="#4-0-案例-购物车-项目初始化" class="headerlink" title="4.0 案例-购物车-项目初始化"></a>4.0 案例-购物车-项目初始化</h3><blockquote><p>目标: 初始化新项目, 清空不要的东西, 下载bootstrap库, 下载less模块</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create shopcar</span><br><span class="line">yarn add bootstrap</span><br><span class="line">yarn add less less-loader@5.0.0 -D</span><br></pre></td></tr></table></figure><p>图示:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/08-25-51-image-20210307092110985-4ef320.png" alt="image-20210307092110985"></p><ol><li>按照需求, 把项目页面拆分成几个组件, 在components下创建</li></ol><ul><li><p>MyHeader组件</p></li><li><p>MyFooter组件</p></li><li><p>MyGoods组件 - 商品</p></li><li><p>MyCount组件</p></li></ul><ol start="2"><li><p>然后引入到App.vue上注册</p></li><li><p>在main.js中引入bootStrap库</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;bootstrap/dist/css/bootstrap.css&quot;</span> <span class="comment">// 引入第三方包里的某个css文件</span></span><br></pre></td></tr></table></figure><p>MyHeader.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-header&quot;&gt;购物车案例&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">  .my-header &#123;</span><br><span class="line">    height: 45px;</span><br><span class="line">    line-height: 45px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background-color: #1d7bff;</span><br><span class="line">    color: #fff;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    z-index: 2;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>MyGoods.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-goods-item&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; id=&quot;input&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;label class=&quot;custom-control-label&quot; for=&quot;input&quot;&gt;</span><br><span class="line">          &lt;img src=&quot;http://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;top&quot;&gt;商品名字&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;bottom&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;price&quot;&gt;¥ 100&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            数量组件</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.my-goods-item &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  border-bottom: 1px solid #ccc;</span><br><span class="line">  .left &#123;</span><br><span class="line">    img &#123;</span><br><span class="line">      width: 120px;</span><br><span class="line">      height: 120px;</span><br><span class="line">      margin-right: 8px;</span><br><span class="line">      border-radius: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">    .custom-control-label::before,</span><br><span class="line">    .custom-control-label::after &#123;</span><br><span class="line">      top: 50px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .right &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    .top&#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        font-weight: 700;</span><br><span class="line">    &#125;</span><br><span class="line">    .bottom &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: space-between;</span><br><span class="line">      padding: 5px 0;</span><br><span class="line">      align-items: center;</span><br><span class="line">      .price &#123;</span><br><span class="line">        color: red;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>目标: 完成商品组件右下角商品组件的开发</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/08-26-11-image-20210223135638409-41b321.png" alt="image-20210223135638409"></p><p>components&#x2F;MyCount.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-counter&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-light&quot; &gt;-&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;number&quot; class=&quot;form-control inp&quot; &gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-light&quot;&gt;+&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.my-counter &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  .inp &#123;</span><br><span class="line">    width: 45px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 0 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  .btn, .inp&#123;</span><br><span class="line">    transform: scale(0.9);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>components&#x2F;MyFooter.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 底部 --&gt;</span><br><span class="line">  &lt;div class=&quot;my-footer&quot;&gt;</span><br><span class="line">    &lt;!-- 全选 --&gt;</span><br><span class="line">    &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; id=&quot;footerCheck&quot;&gt;</span><br><span class="line">      &lt;label class=&quot;custom-control-label&quot; for=&quot;footerCheck&quot;&gt;全选&lt;/label&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 合计 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;合计:&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;price&quot;&gt;¥ 0&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 按钮 --&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;footer-btn btn btn-primary&quot;&gt;结算 ( 0 )&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.my-footer &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 2;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border-top: 1px solid #ccc;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  padding: 0 10px;</span><br><span class="line">  background: #fff;</span><br><span class="line"></span><br><span class="line">  .price &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">  .footer-btn &#123;</span><br><span class="line">    min-width: 80px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    border-radius: 25px;</span><br><span class="line">    padding: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="4-1-案例-购物车-头部自定义"><a href="#4-1-案例-购物车-头部自定义" class="headerlink" title="4.1 案例-购物车-头部自定义"></a>4.1 案例-购物车-头部自定义</h3><blockquote><p>目的: 头部的标题, 颜色, 背景色可以随便修改, props类型的校验</p></blockquote><p>思路</p><ol><li>在MyHeader.vue中准备props里变量, 然后使用</li><li>在使用MyHeader.vue组件时, 传入相应的值 (color和backgroundColor)</li></ol><p>MyHeader.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-header&quot; :style=&quot;&#123;backgroundColor: background, color&#125;&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 让Header组件支持不同的项目 - 自定义</span><br><span class="line">// 1. 分析哪些可以自定义 (背景色, 文字颜色, 文字内容)</span><br><span class="line">// 2. (新) 可以对props的变量的值 进行校验</span><br><span class="line">// 3. 内部使用props变量的值</span><br><span class="line">// 4. 外部使用时, 遵守变量名作为属性名, 值的类型遵守</span><br><span class="line">export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">        background: String, // 外部插入此变量的值, 必须是字符串类型, 否则报错</span><br><span class="line">        color: &#123;</span><br><span class="line">            type: String, // 约束color值的类型</span><br><span class="line">            default: &quot;#fff&quot; // color变量默认值(外部不给 我color传值, 使用默认值)</span><br><span class="line">        &#125;,</span><br><span class="line">        title: &#123;</span><br><span class="line">            type: String,</span><br><span class="line">            required: true // 必须传入此变量的值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">  .my-header &#123;</span><br><span class="line">    height: 45px;</span><br><span class="line">    line-height: 45px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background-color: #1d7bff;</span><br><span class="line">    color: #fff;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    z-index: 2;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>App.vue传入相应自定义的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyHeader title=&quot;购物车案例&quot;&gt;&lt;/MyHeader&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结:  </p><p>props: [] - 只能声明变量和接收, 不能类型校验</p><p>props: {} - 声明变量和校验类型规则 - 外部传入值不对则报错</p></blockquote><h3 id="4-2-案例-购物车-请求数据"><a href="#4-2-案例-购物车-请求数据" class="headerlink" title="4.2 案例-购物车-请求数据"></a>4.2 案例-购物车-请求数据</h3><blockquote><p>目标: 使用axios把数据请求回来</p></blockquote><p>数据地址: <a href="https://www.escook.cn/api/cart">https://www.escook.cn/api/cart</a>  (get方式)</p><ol><li>下载axios</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add axios</span><br></pre></td></tr></table></figure><ol start="2"><li>main.js - 原型上挂载</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标: 请求数据 - 打印</span></span><br><span class="line"><span class="comment">// 1. 下载axios库, main.js - 全局绑定属性 (确保任意.vue文件可以都访问到这个axios方法)</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 2. 基础地址</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;https://www.escook.cn&quot;</span></span><br><span class="line"><span class="comment">// 3. axios方法添加到Vue的原型上</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = axios</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>App.vue请求使用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [] // 商品所有数据</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    // 不必在自己引入axios变量, 而是直接使用全局属性$axios</span><br><span class="line">    this.$axios(&#123;</span><br><span class="line">      url: &quot;/api/cart&quot;</span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">      console.log(res);</span><br><span class="line">      this.list = res.data.list</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 利用axios, 调用接口, 把数据请求回来</p></blockquote><h3 id="4-3-案例-购物车-数据渲染"><a href="#4-3-案例-购物车-数据渲染" class="headerlink" title="4.3 案例-购物车-数据渲染"></a>4.3 案例-购物车-数据渲染</h3><blockquote><p>目标: 把上面请求的数据, 铺设到页面上</p></blockquote><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyGoods v-for=&quot;obj in list&quot; </span><br><span class="line">         :key=&quot;obj.id&quot;</span><br><span class="line">         :gObj=&quot;obj&quot;</span><br><span class="line">&gt;&lt;/MyGoods&gt;</span><br></pre></td></tr></table></figure><p>MyGoods.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-goods-item&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;</span><br><span class="line">        &lt;!-- *重要:</span><br><span class="line">          每个对象和组件都是独立的</span><br><span class="line">          对象里的goods_state关联自己对应商品的复选框</span><br><span class="line">         --&gt;</span><br><span class="line">         &lt;!-- bug:</span><br><span class="line">          循环的所有label的for都是input, id也都是input - 默认只有第一个生效</span><br><span class="line">          解决: 每次对象里的id值(1, 2), 分别给id和for使用即可区分</span><br><span class="line">          --&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; :id=&quot;gObj.id&quot;</span><br><span class="line">        v-model=&quot;gObj.goods_state&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;label class=&quot;custom-control-label&quot; :for=&quot;gObj.id&quot;&gt;</span><br><span class="line">          &lt;img :src=&quot;gObj.goods_img&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;top&quot;&gt;&#123;&#123; gObj.goods_name &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;bottom&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;price&quot;&gt;¥ &#123;&#123; gObj.goods_price &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            &lt;MyCount :obj=&quot;gObj&quot;&gt;&lt;/MyCount&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyCount from &#x27;./MyCount&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      gObj: Object</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        MyCount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>MyCount.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-counter&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-light&quot; &gt;-&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;number&quot; class=&quot;form-control inp&quot; v-model.number=&quot;obj.goods_count&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-light&quot; &gt;+&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    obj: Object // 商品对象</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结: 把各个组件关联起来, 把数据都铺设到页面上</p></blockquote><h3 id="4-4-案例-购物车-商品选中"><a href="#4-4-案例-购物车-商品选中" class="headerlink" title="4.4 案例-购物车-商品选中"></a>4.4 案例-购物车-商品选中</h3><blockquote><p>问题: 点击发现总是第一个被选中</p></blockquote><p>原来id和for都是”input”</p><p>但是id是唯一的啊, 所以用数据的id来作为标签的id, 分别独立, 为了兼容label点击图片也能选中的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; :id=&quot;gObj.id&quot;</span><br><span class="line">       v-model=&quot;gObj.goods_state&quot;</span><br><span class="line">       &gt;</span><br><span class="line">&lt;label class=&quot;custom-control-label&quot; :for=&quot;gObj.id&quot;&gt;</span><br><span class="line">    &lt;img :src=&quot;gObj.goods_img&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/label&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: lable的for值对应input的id, 点击label就能让对应input处于激活</p></blockquote><h3 id="4-5-案例-购物车-数量控制"><a href="#4-5-案例-购物车-数量控制" class="headerlink" title="4.5 案例-购物车-数量控制"></a>4.5 案例-购物车-数量控制</h3><blockquote><p>目标: 点击+和-或者直接修改输入框的值影响商品购买的数量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-counter&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-light&quot; :disabled=&quot;obj.goods_count === 1&quot; @click=&quot;obj.goods_count &gt; 1 &amp;&amp; obj.goods_count--&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;number&quot; class=&quot;form-control inp&quot; v-model.number=&quot;obj.goods_count&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-light&quot; @click=&quot;obj.goods_count++&quot;&gt;+&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 商品数量 - 控制</span><br><span class="line">// 1. 外部传入数据对象</span><br><span class="line">// 2. v-model关联对象的goods_count属性和输入框 (双向绑定)</span><br><span class="line">// 3. 商品按钮 +和-, 商品数量最少1件</span><br><span class="line">// 4. 侦听数量改变, 小于1, 直接强制覆盖1</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    obj: Object // 商品对象</span><br><span class="line">  &#125;,</span><br><span class="line">  // 因为数量控制要通过对象&quot;互相引用的关系&quot;来影响外面对象里的数量值, 所以最好传 对象进来</span><br><span class="line">  watch: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      deep: true,</span><br><span class="line">      handler()&#123; // 拿到商品数量, 判断小于1, 强制修改成1</span><br><span class="line">        if (this.obj.goods_count &lt; 1) &#123;</span><br><span class="line">          this.obj.goods_count = 1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-6-案例-购物车-全选功能"><a href="#4-6-案例-购物车-全选功能" class="headerlink" title="4.6 案例-购物车-全选功能"></a>4.6 案例-购物车-全选功能</h3><blockquote><p>目标: 在底部组件上, 完成全选功能</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/08-26-17-image-20210223141427684-d537ba.png" alt="image-20210223141427684"></p><p>思路: </p><ol><li>点击获取它的选中状态</li><li>同步给上面每个小选框 - 而小选框的选中状态又在数组里</li><li>把数组传给MyFooter, 然后更新即可 - 因为对象都是引用关系的</li></ol><p>MyFooter.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 底部 --&gt;</span><br><span class="line">  &lt;div class=&quot;my-footer&quot;&gt;</span><br><span class="line">    &lt;!-- 全选 --&gt;</span><br><span class="line">    &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; id=&quot;footerCheck&quot; v-model=&quot;isAll&quot;&gt;</span><br><span class="line">      &lt;label class=&quot;custom-control-label&quot; for=&quot;footerCheck&quot;&gt;全选&lt;/label&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 合计 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;合计:&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;price&quot;&gt;¥ &#123;&#123; allPrice &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 按钮 --&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;footer-btn btn btn-primary&quot;&gt;结算 ( &#123;&#123; allCount &#125;&#125; )&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 全选</span><br><span class="line">// 1. v-model关联全选-复选框(v-model后变量计算属性)</span><br><span class="line">// 2. 页面(视频层)v(true) -&gt; 数据层(变量-) 计算属性(完整写法)</span><br><span class="line">// 3. 把全选 true/false同步给所有小选框选中状态上</span><br><span class="line"></span><br><span class="line">// 小选  -&gt; 全选</span><br><span class="line">// App.vue里list数组 -&gt; MyFooter.vue</span><br><span class="line">// isAll的get方法里, 统计状态影响全选框</span><br><span class="line"></span><br><span class="line">// 目标: 总数量统计</span><br><span class="line">// 1. allCount计算属性用 数组reduce+判断统计数量并返回</span><br><span class="line"></span><br><span class="line">// 目标: 总价</span><br><span class="line">// allPrice计算属性, 数组reduce+单价*数量, 判断选中, 才累加后返回</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    arr: Array</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    isAll: &#123;</span><br><span class="line">      set(val)&#123; // val就是关联表单的值(true/false)</span><br><span class="line">        this.$emit(&#x27;changeAll&#x27;, val)</span><br><span class="line">      &#125;,</span><br><span class="line">      get()&#123;</span><br><span class="line">        // 查找小选框关联的属性有没有不符合勾选的条件</span><br><span class="line">        // 直接原地false</span><br><span class="line">        return this.arr.every(obj =&gt; obj.goods_state === true)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyFooter @changeAll=&quot;allFn&quot; :arr=&quot;list&quot;&gt;&lt;/MyFooter&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    allFn(bool)&#123;</span><br><span class="line">      this.list.forEach(obj =&gt; obj.goods_state = bool)</span><br><span class="line">      // 把MyFooter内的全选状态true/false同步给所有小选框的关联属性上</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 全选的v-model的值, 使用计算属性完整写法</p></blockquote><h3 id="4-7-案例-购物车-总数量"><a href="#4-7-案例-购物车-总数量" class="headerlink" title="4.7 案例-购物车-总数量"></a>4.7 案例-购物车-总数量</h3><blockquote><p>目标: 完成底部组件, 显示选中的商品的总数量</p></blockquote><p>MyFooter.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">allCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, obj</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="property">goods_state</span> === <span class="literal">true</span>) &#123; <span class="comment">// 选中商品才累加数量</span></span><br><span class="line">            sum += obj.<span class="property">goods_count</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>总结: 对象之间是引用关系, 对象值改变, 所有用到的地方都跟着改变</p></blockquote><h3 id="4-8-案例-购物车-总价"><a href="#4-8-案例-购物车-总价" class="headerlink" title="4.8 案例-购物车-总价"></a>4.8 案例-购物车-总价</h3><blockquote><p>目标: 完成选中商品计算价格</p></blockquote><p>components&#x2F;MyFooter.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">allPrice</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, obj</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="property">goods_state</span>)&#123;</span><br><span class="line">          sum += obj.<span class="property">goods_count</span> * obj.<span class="property">goods_price</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 把数组传给了MyFooter组件, 统计总价</p></blockquote><h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><p>vue的生命周期哪4个阶段, 哪8个方法</p><p>axios是什么, 底层是什么, 具体如何使用</p><p>axios返回的是什么, 如何接收结果</p><p>知道ref和$refs使用和作用以及场景</p><p>知道$nextTick的作用</p><p>跟着老师的视频完成购物车案例</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1、Vue-的-nextTick-的原理是什么-（高薪常问）"><a href="#1、Vue-的-nextTick-的原理是什么-（高薪常问）" class="headerlink" title="1、Vue 的 nextTick 的原理是什么? （高薪常问）"></a>1、Vue 的 nextTick 的原理是什么? （高薪常问）</h3><p>​    \1. 为什么需要 nextTick ，Vue 是异步修改 DOM 的并且不鼓励开发者直接接触 DOM，但有时候业务需要必须对数据更改–刷新后的 DOM 做相应的处理，这时候就可以使用 Vue.nextTick(callback)这个 api 了。</p><p>​    \2. 理解原理前的准备 首先需要知道事件循环中宏任务和微任务这两个概念,常见的宏任务有 script, setTimeout, setInterval, setImmediate, I&#x2F;O, UI rendering 常见的微任务有 process.nextTick(Nodejs),Promise.then(), MutationObserver;</p><p>​    \3. 理解 nextTick 的原理正是 vue 通过异步队列控制 DOM 更新和 nextTick 回调函数先后执行的方式。如果大家看过这部分的源码，会发现其中做了很多 isNative()的判断，因为这里还存在兼容性优雅降级的问题。可见 Vue 开发团队的深思熟虑，对性能的良苦用心。</p><h3 id="2、vue生命周期总共分为几个阶段？（必会）"><a href="#2、vue生命周期总共分为几个阶段？（必会）" class="headerlink" title="2、vue生命周期总共分为几个阶段？（必会）"></a>2、vue生命周期总共分为几个阶段？（必会）</h3><p>   Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p><p><strong>1****）beforeCreate</strong></p><p>​    在实例初始化之后，数据观测 (data observer) 和 event&#x2F;watcher 事件配置之前被调用。</p><p><strong>2****）created</strong></p><p>​    在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)， 属性和方法的运算，watch&#x2F;event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p><p><strong>3****）beforeMount</strong></p><p>​    在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p><strong>4****）mounted</strong></p><p>​    el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p><p><strong>5****）beforeUpdate</strong></p><p>​    数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</p><p><strong>6****）updated</strong></p><p>​    由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p><strong>7****）activated</strong></p><p>​    keep-alive 组件激活时调用。该钩子在服务器端渲染期间不被调用。</p><p><strong>8****）deactivated</strong></p><p>​    keep-alive 组件停用时调用。该钩子在服务器端渲染期间不被调用。</p><p><strong>9****）beforeDestroy</strong></p><p>​    实例销毁之前调用。在这一步，实例仍然完全可用。该钩子在服务器端渲染期间不被调用。</p><p><strong>10****）destroyed</strong></p><p>​    Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p><p><strong>11****）errorCaptured（2.5.0+ 新增）</strong></p><p>​    当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p><h3 id="3、第一次加载页面会触发哪几个钩子函数？（必会）"><a href="#3、第一次加载页面会触发哪几个钩子函数？（必会）" class="headerlink" title="3、第一次加载页面会触发哪几个钩子函数？（必会）"></a>3、第一次加载页面会触发哪几个钩子函数？（必会）</h3><p>   当页面第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子函数</p><h2 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h2><p>把课上购物车再来一遍</p><h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><blockquote><p>axios请求接口使用</p></blockquote><p>根域名: <a href="http://123.57.109.30:3006/">http://123.57.109.30:3006</a></p><h3 id="案例-图书相关"><a href="#案例-图书相关" class="headerlink" title="案例 - 图书相关"></a>案例 - 图书相关</h3><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ul><li>请求方式:  GET</li><li>请求地址: 根域名&#x2F;api&#x2F;getbooks</li><li>请求参数:</li></ul><p>不传参获取所有默认书籍, 也可以选择传递下面任意1-多个参数, 获取指定的相关书籍信息</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>是否必选</th><th>参数说明</th></tr></thead><tbody><tr><td>id</td><td>Number</td><td>否</td><td>图书Id</td></tr><tr><td>bookname</td><td>String</td><td>否</td><td>图书名称</td></tr><tr><td>author</td><td>String</td><td>否</td><td>作者</td></tr><tr><td>publisher</td><td>String</td><td>否</td><td>出版社</td></tr><tr><td>appkey</td><td>String</td><td>否</td><td>个人ID</td></tr></tbody></table><ul><li>返回示例:</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span> <span class="comment">// 状态码200都代表完全成功 - 无任何意义随便写, 只是方便前端写判断条件</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取图书列表成功&quot;</span><span class="punctuation">,</span> <span class="comment">// 后台返回的提示消息, 随便写, 只是方便前端直接打印提示消息</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 后台返回的数据</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;bookname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;西游记&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吴承恩&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京图书出版社&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;bookname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;红楼梦&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;曹雪芹&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海图书出版社&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;bookname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;三国演义&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;罗贯中&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京图书出版社&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><ul><li>请求方式: POST</li><li>请求地址: 根域名&#x2F;api&#x2F;addbook</li><li>请求参数:</li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>是否必选</th><th>参数说明</th></tr></thead><tbody><tr><td>bookname</td><td>String</td><td>是</td><td>图书名称</td></tr><tr><td>author</td><td>String</td><td>是</td><td>作者</td></tr><tr><td>publisher</td><td>String</td><td>是</td><td>出版社</td></tr><tr><td>appkey</td><td>String</td><td>是</td><td>个人ID - 用’7250d3eb-18e1-41bc-8bb2-11483665535a’</td></tr></tbody></table><ul><li>返回示例:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">201</span>, <span class="comment">// 后台返回数据逻辑层的状态码, 201代表后台已经新增加了一个资源</span></span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;author&quot;</span>: <span class="string">&quot;施大神&quot;</span></span><br><span class="line">        <span class="string">&quot;bookname&quot;</span>: <span class="string">&quot;水浒传2&quot;</span></span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">41</span></span><br><span class="line">        <span class="string">&quot;publisher&quot;</span>: <span class="string">&quot;未来出版社&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;添加图书成功&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue 生命周期 </tag>
            
            <tag> Created </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件通信基础</title>
      <link href="/2024/07/03/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/07/03/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一篇文章地址：<a href="/2024/07/03/Vue%E8%84%9A%E6%89%8B%E6%9E%B6%E5%9F%BA%E7%A1%80/" title="Vue脚手架基础">Vue脚手架基础</a><br>承接上一篇文章，这次学习了一些Vue脚手架基础。<br>核心问题: <a href="/2022/07/03/Vue%E9%80%9A%E4%BF%A1%E7%BB%84%E4%BB%B6%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/" title="Vue通信组件核心问题">Vue通信组件核心问题</a></p></blockquote><h2 id="今日学习目标"><a href="#今日学习目标" class="headerlink" title="今日学习目标"></a>今日学习目标</h2><ol><li>能够理解vue组件概念和作用</li><li>能够掌握封装组件能力</li><li>能够使用组件之间通信</li><li>能够完成todo案例</li></ol><h2 id="1-vue组件"><a href="#1-vue组件" class="headerlink" title="1. vue组件"></a>1. vue组件</h2><h3 id="1-0-为什么用组件"><a href="#1-0-为什么用组件" class="headerlink" title="1.0_为什么用组件"></a>1.0_为什么用组件</h3><p>以前做过一个折叠面板</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-34-57-image-20210115092834016-011ad5.png" alt="image-20210115092834016"></p><p>需求: 现在想要多个收起展开的部分</p><p>方案1: 复制代码</p><ul><li>代码重复 冗余</li><li>不利于维护</li></ul><ol><li>案例用less写的样式, 所以下载</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add less less-loader@5.0.0 -D</span><br></pre></td></tr></table></figure><ol start="2"><li>模板标签 - 在这个基础上, 把&#x3D;&#x3D;要复用的多复制几份&#x3D;&#x3D;(讲解不好的地方引出解决方案)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">        &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">        &lt;span class=&quot;btn&quot; @click=&quot;isShow = !isShow&quot;&gt;</span><br><span class="line">          &#123;&#123; isShow ? &#x27;收起&#x27; : &#x27;展开&#x27; &#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;container&quot; v-show=&quot;isShow&quot;&gt;</span><br><span class="line">        &lt;p&gt;寒雨连江夜入吴, &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background-color: #ccc;</span><br><span class="line">  #app &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border: 4px solid blueviolet;</span><br><span class="line">    border-radius: 1em;</span><br><span class="line">    box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.5);</span><br><span class="line">    padding: 1em 2em 2em;</span><br><span class="line">    h3 &#123;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    .title &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: space-between;</span><br><span class="line">      align-items: center;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      padding: 0 1em;</span><br><span class="line">    &#125;</span><br><span class="line">    .title h4 &#123;</span><br><span class="line">      line-height: 2;</span><br><span class="line">      margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .container &#123;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      padding: 0 1em;</span><br><span class="line">    &#125;</span><br><span class="line">    .btn &#123;</span><br><span class="line">      /* 鼠标改成手的形状 */</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>上面复制3份, 发现变化一起变化</p><p>解决方案: 不同的部分, 用不同的isShow变量</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>案例：折叠面板<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>芙蓉楼送辛渐<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; isShow ? &#x27;收起&#x27; : &#x27;展开&#x27; &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>寒雨连江夜入吴, <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>平明送客楚山孤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>洛阳亲友如相问，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>一片冰心在玉壶。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>芙蓉楼送辛渐<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;isShow1 = !isShow1&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; isShow1 ? &#x27;收起&#x27; : &#x27;展开&#x27; &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>寒雨连江夜入吴, <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>平明送客楚山孤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>洛阳亲友如相问，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>一片冰心在玉壶。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>芙蓉楼送辛渐<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;isShow2 = !isShow2&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; isShow2 ? &#x27;收起&#x27; : &#x27;展开&#x27; &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>寒雨连江夜入吴, <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>平明送客楚山孤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>洛阳亲友如相问，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>一片冰心在玉壶。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow1</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow2</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">4px</span> solid blueviolet;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">2em</span> <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.title</span> <span class="selector-tag">h4</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 鼠标改成手的形状 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结: 代码非常的冗余和重复吧? 解决方案呢? 就是采用我们的组件化开发的方式, 往下看</p></blockquote><h3 id="1-1-vue组件-概念"><a href="#1-1-vue组件-概念" class="headerlink" title="1.1_vue组件_概念"></a>1.1_vue组件_概念</h3><blockquote><p>组件是可复用的 Vue 实例, 封装标签, 样式和JS代码</p></blockquote><p><strong>组件化</strong> ：封装的思想，把页面上 <code>可重用的部分</code> 封装为 <code>组件</code>，从而方便项目的 开发 和 维护</p><p><strong>一个页面， 可以拆分成一个个组件，一个组件就是一个整体, 每个组件可以有自己独立的 结构 样式 和 行为(html, css和js)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-39-38-image-20210216114452712-b41a14.png" alt="image-20210216114452712"></p><h3 id="1-2-vue组件-基础使用"><a href="#1-2-vue组件-基础使用" class="headerlink" title="1.2_vue组件_基础使用"></a>1.2_vue组件_基础使用</h3><blockquote><p>目标: 每个组件都是一个独立的个体, 代码里体现为一个独立的.vue文件</p></blockquote><p>口诀: 哪部分标签复用, 就把哪部分封装到组件内</p><p>&#x3D;&#x3D;(重要): 组件内template只能有一个根标签&#x3D;&#x3D;</p><p>&#x3D;&#x3D; (重要): 组件内data必须是一个函数, 独立作用域 &#x3D;&#x3D;</p><p>步骤:</p><ol><li>创建组件 components&#x2F;Pannel.vue</li></ol><blockquote><p>封装标签+样式+js - 组件都是独立的, 为了复用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">      &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">      &lt;span class=&quot;btn&quot; @click=&quot;isShow = !isShow&quot;&gt;</span><br><span class="line">        &#123;&#123; isShow ? &quot;收起&quot; : &quot;展开&quot; &#125;&#125;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot; v-show=&quot;isShow&quot;&gt;</span><br><span class="line">      &lt;p&gt;寒雨连江夜入吴,&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: false,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.title &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  padding: 0 1em;</span><br><span class="line">&#125;</span><br><span class="line">.title h4 &#123;</span><br><span class="line">  line-height: 2;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">.container &#123;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  padding: 0 1em;</span><br><span class="line">&#125;</span><br><span class="line">.btn &#123;</span><br><span class="line">  /* 鼠标改成手的形状 */</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>注册组件: 创建后需要注册后再使用</li></ol><blockquote><h3 id="全局-注册使用"><a href="#全局-注册使用" class="headerlink" title="全局 - 注册使用"></a>全局 - 注册使用</h3></blockquote><p>全局入口在main.js, 在new Vue之上注册</p><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> 组件对象 <span class="keyword">from</span> <span class="string">&#x27;vue文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;组件名&quot;</span>, 组件对象)</span><br></pre></td></tr></table></figure><p>main.js - 立即演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标: 全局注册 (一处定义到处使用)</span></span><br><span class="line"><span class="comment">// 1. 创建组件 - 文件名.vue</span></span><br><span class="line"><span class="comment">// 2. 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Pannel</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Pannel&#x27;</span></span><br><span class="line"><span class="comment">// 3. 全局 - 注册组件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  语法: </span></span><br><span class="line"><span class="comment">  Vue.component(&quot;组件名&quot;, 组件对象)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;PannelG&quot;</span>, <span class="title class_">Pannel</span>)</span><br></pre></td></tr></table></figure><p>全局注册PannelG组件名后, 就可以当做标签在任意Vue文件中template里用</p><p>单双标签都可以或者小写加-形式, 运行后, 会把这个自定义标签当做组件解析, 使用&#x3D;&#x3D;组件里封装的标签替换到这个位置&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;PannelG&gt;&lt;/PannelG&gt;</span><br><span class="line">&lt;PannelG/&gt;</span><br><span class="line">&lt;pannel-g&gt;&lt;/pannel-g&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="局部-注册使用"><a href="#局部-注册使用" class="headerlink" title="局部 - 注册使用"></a>局部 - 注册使用</h3></blockquote><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 组件对象 <span class="keyword">from</span> <span class="string">&#x27;vue文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&quot;组件名&quot;</span>: 组件对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任意vue文件中中引入, 注册, 使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 4. 组件名当做标签使用 --&gt;</span><br><span class="line">    &lt;!-- &lt;组件名&gt;&lt;/组件名&gt; --&gt;</span><br><span class="line">    &lt;PannelG&gt;&lt;/PannelG&gt;</span><br><span class="line">    &lt;PannelL&gt;&lt;/PannelL&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 局部注册 (用的多)</span><br><span class="line">// 1. 创建组件 - 文件名.vue</span><br><span class="line">// 2. 引入组件</span><br><span class="line">import Pannel from &#x27;./components/Pannel_1&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 3. 局部 - 注册组件</span><br><span class="line">  /*</span><br><span class="line">    语法: </span><br><span class="line">    components: &#123;</span><br><span class="line">      &quot;组件名&quot;: 组件对象</span><br><span class="line">    &#125;</span><br><span class="line">  */</span><br><span class="line">  components: &#123;</span><br><span class="line">    PannelL: Pannel</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>组件使用总结:</p><ol><li>(创建)封装html+css+vue到独立的.vue文件中</li><li>(引入注册)组件文件 &#x3D;&gt; 得到组件配置对象</li><li>(使用)当前页面当做标签使用</li></ol><h3 id="1-3-vue组件-scoped作用"><a href="#1-3-vue组件-scoped作用" class="headerlink" title="1.3_vue组件-scoped作用"></a>1.3_vue组件-scoped作用</h3><blockquote><p>目的: 解决多个组件样式名相同, 冲突问题</p></blockquote><p>需求: div标签名选择器, 设置背景色</p><p>问题: 发现组件里的div和外面的div都生效了</p><p>解决: 给Pannel.vue组件里style标签上加scoped属性即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br></pre></td></tr></table></figure><p>在style上加入scoped属性, 就会在此组件的标签上加上一个随机生成的data-v开头的属性</p><p>而且必须是当前组件的元素, 才会有这个自定义属性, 才会被这个样式作用到</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-39-46-image-20210216122749906-b85e57.png" alt="image-20210216122749906"></p><blockquote><p>总结: style上加scoped, 组件内的样式只在当前vue组件生效</p></blockquote><h2 id="2-vue组件通信"><a href="#2-vue组件通信" class="headerlink" title="2. vue组件通信"></a>2. vue组件通信</h2><p>因为每个组件的变量和值都是独立的</p><p>组件通信先暂时关注父传子, 子传父</p><p>父: 使用其他组件的vue文件</p><p>子: 被引入的组件(嵌入)</p><p>例如: App.vue(父)  MyProduct.vue(子)</p><h3 id="2-0-vue组件通信-父向子-props"><a href="#2-0-vue组件通信-父向子-props" class="headerlink" title="2.0_vue组件通信_父向子-props"></a>2.0_vue组件通信_父向子-props</h3><blockquote><p>目的: 从外面给组件内传值, 先学会语法, 练习中在看使用场景</p></blockquote><p>需求: 封装一个商品组件MyProduct.vue - 外部传入具体要显示的数据, 如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-35-24-image-20210305201956669-bb3c51.png" alt="image-20210305201956669"></p><p>步骤:</p><ol><li><p>创建组件components&#x2F;MyProduct.vue - 复制下面标签</p></li><li><p>组件内在props定义变量, 用于接收外部传入的值</p></li><li><p>App.vue中引入注册组件, 使用时, 传入具体数据给组件显示</p></li></ol><p>components&#x2F;MyProduct.vue - 准备标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-product&quot;&gt;</span><br><span class="line">    &lt;h3&gt;标题: &#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;价格: &#123;&#123; price &#125;&#125;元&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; intro &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;title&#x27;, &#x27;price&#x27;, &#x27;intro&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>App.vue中使用并传入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">      目标: 父(App.vue) -&gt; 子(MyProduct.vue) 分别传值进入</span><br><span class="line">      需求: 每次组件显示不同的数据信息</span><br><span class="line">      步骤(口诀):</span><br><span class="line">        1. 子组件 - props - 变量 (准备接收)</span><br><span class="line">        2. 父组件 - 传值进去</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;Product title=&quot;好吃的口水鸡&quot; price=&quot;50&quot; intro=&quot;开业大酬宾, 全场8折&quot;&gt;&lt;/Product&gt;</span><br><span class="line">    &lt;Product title=&quot;好可爱的可爱多&quot; price=&quot;20&quot; intro=&quot;老板不在家, 全场1折&quot;&gt;&lt;/Product&gt;</span><br><span class="line">    &lt;Product title=&quot;好贵的北京烤鸭&quot; price=&quot;290&quot; :intro=&quot;str&quot;&gt;&lt;/Product&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 1. 创建组件 (.vue文件)</span><br><span class="line">// 2. 引入组件</span><br><span class="line">import Product from &#x27;./components/MyProduct&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      str: &quot;好贵啊, 快来啊, 好吃&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 3. 注册组件</span><br><span class="line">  components: &#123;</span><br><span class="line">    // Product: Product // key和value变量名同名 - 简写</span><br><span class="line">    Product</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 组件封装复用的标签和样式, 而具体数据要靠外面传入</p></blockquote><h3 id="2-1-vue组件通信-父向子-配合循环"><a href="#2-1-vue组件通信-父向子-配合循环" class="headerlink" title="2.1_vue组件通信_父向子-配合循环"></a>2.1_vue组件通信_父向子-配合循环</h3><blockquote><p>目的: 把数据循环分别传入给组件内显示</p></blockquote><p>数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">list</span>: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">proname</span>: <span class="string">&quot;超级好吃的棒棒糖&quot;</span>, <span class="attr">proprice</span>: <span class="number">18.8</span>, <span class="attr">info</span>: <span class="string">&#x27;开业大酬宾, 全场8折&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">proname</span>: <span class="string">&quot;超级好吃的大鸡腿&quot;</span>, <span class="attr">proprice</span>: <span class="number">34.2</span>, <span class="attr">info</span>: <span class="string">&#x27;好吃不腻, 快来买啊&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">proname</span>: <span class="string">&quot;超级无敌的冰激凌&quot;</span>, <span class="attr">proprice</span>: <span class="number">14.2</span>, <span class="attr">info</span>: <span class="string">&#x27;炎热的夏天, 来个冰激凌了&#x27;</span> &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>正确代码(&#x3D;&#x3D;不可复制&#x3D;&#x3D;)&#96;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyProduct v-for=&quot;obj in list&quot; :key=&quot;obj.id&quot;</span><br><span class="line">    :title=&quot;obj.proname&quot;</span><br><span class="line">    :price=&quot;obj.proprice&quot;</span><br><span class="line">    :intro=&quot;obj.info&quot;</span><br><span class="line">    &gt;&lt;/MyProduct&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 循环使用组件-分别传入数据</span><br><span class="line">// 1. 创建组件</span><br><span class="line">// 2. 引入组件</span><br><span class="line">import MyProduct from &#x27;./components/MyProduct&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line">          proname: &quot;超级好吃的棒棒糖&quot;,</span><br><span class="line">          proprice: 18.8,</span><br><span class="line">          info: &quot;开业大酬宾, 全场8折&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line">          proname: &quot;超级好吃的大鸡腿&quot;,</span><br><span class="line">          proprice: 34.2,</span><br><span class="line">          info: &quot;好吃不腻, 快来买啊&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 3,</span><br><span class="line">          proname: &quot;超级无敌的冰激凌&quot;,</span><br><span class="line">          proprice: 14.2,</span><br><span class="line">          info: &quot;炎热的夏天, 来个冰激凌了&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 3. 注册组件</span><br><span class="line">  components: &#123;</span><br><span class="line">    // MyProduct: MyProduct</span><br><span class="line">    MyProduct</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3></blockquote><p>在vue中需要遵循单向数据流原则</p><pre><code>1. 父组件的数据发生了改变，子组件会自动跟着变2. 子组件不能直接修改父组件传递过来的props  props是只读的</code></pre><p>&#x3D;&#x3D;父组件传给子组件的是一个对象，子组件修改对象的属性，是不会报错的，对象是引用类型, 互相更新&#x3D;&#x3D;</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/02/23-56-01-image-20210423161646951-dfd332.png" alt="image-20210423161646951"></p><blockquote><p>总结: props的值不能重新赋值, 对象引用关系属性值改变, 互相影响</p></blockquote><h3 id="2-2-vue组件通信-单向数据流"><a href="#2-2-vue组件通信-单向数据流" class="headerlink" title="2.2_vue组件通信_单向数据流"></a>2.2_vue组件通信_单向数据流</h3><blockquote><p>目标: props变量本身是只读不能重新赋值</p></blockquote><p>目标：从&#x3D;&#x3D;父到子&#x3D;&#x3D;的数据流向,叫&#x3D;&#x3D;单向数据流&#x3D;&#x3D;</p><p>原因: 子组件修改, 不通知父级, 造成数据不一致性</p><p>如果第一个MyProduct.vue内自己修改商品价格为5.5, 但是App.vue里原来还记着18.8 - 数据 不一致了</p><p>所以: Vue规定&#x3D;&#x3D;props&#x3D;&#x3D;里的变量, &#x3D;&#x3D;本身是只读&#x3D;&#x3D;的</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-35-46-image-20210511143218215-c913e1.png" alt="image-20210511143218215"></p><blockquote><p>总结: 所以props变量本身是不能重新赋值的</p></blockquote><p>问题:  那我怎么才能修改子组件接收到的值呢? - 其实要影响父亲, 然后数据响应式来影响儿子们</p><h3 id="2-3-vue组件通信-子向父"><a href="#2-3-vue组件通信-子向父" class="headerlink" title="2.3_vue组件通信_子向父"></a>2.3_vue组件通信_子向父</h3><blockquote><p>目标: 从子组件把值传出来给外面使用</p></blockquote><p>需求: 课上例子, 砍价功能, 子组件点击实现随机砍价-1功能</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/02/23-58-09-image-20210307134253897-2fd82f.png" alt="image-20210307134253897"></p><p>语法:</p><ul><li>父: @自定义事件名&#x3D;”父methods函数”</li><li>子: this.$emit(“自定义事件名”, 传值) - 执行父methods里函数代码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/02/23-58-08-image-20210217102551882-eed830.png" alt="image-20210217102551882"></p><p>components&#x2F;MyProduct_sub.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-product&quot;&gt;</span><br><span class="line">    &lt;h3&gt;标题: &#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;价格: &#123;&#123; price &#125;&#125;元&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; intro &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;subFn&quot;&gt;宝刀-砍1元&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import eventBus from &#x27;../EventBus&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;index&#x27;, &#x27;title&#x27;, &#x27;price&#x27;, &#x27;intro&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    subFn()&#123;</span><br><span class="line">      this.$emit(&#x27;subprice&#x27;, this.index, 1) // 子向父</span><br><span class="line">      eventBus.$emit(&quot;send&quot;, this.index, 1) // 跨组件</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 目标: 子传父 --&gt;</span><br><span class="line">    &lt;!-- 1. 父组件, @自定义事件名=&quot;父methods函数&quot; --&gt;</span><br><span class="line">    &lt;MyProduct v-for=&quot;(obj, ind) in list&quot; :key=&quot;obj.id&quot;</span><br><span class="line">    :title=&quot;obj.proname&quot;</span><br><span class="line">    :price=&quot;obj.proprice&quot;</span><br><span class="line">    :intro=&quot;obj.info&quot;</span><br><span class="line">    :index=&quot;ind&quot;</span><br><span class="line">    @subprice=&quot;fn&quot;</span><br><span class="line">    &gt;&lt;/MyProduct&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import MyProduct from &#x27;./components/MyProduct_sub&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line">          proname: &quot;超级好吃的棒棒糖&quot;,</span><br><span class="line">          proprice: 18.8,</span><br><span class="line">          info: &quot;开业大酬宾, 全场8折&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line">          proname: &quot;超级好吃的大鸡腿&quot;,</span><br><span class="line">          proprice: 34.2,</span><br><span class="line">          info: &quot;好吃不腻, 快来买啊&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 3,</span><br><span class="line">          proname: &quot;超级无敌的冰激凌&quot;,</span><br><span class="line">          proprice: 14.2,</span><br><span class="line">          info: &quot;炎热的夏天, 来个冰激凌了&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyProduct</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fn(inde, price)&#123;</span><br><span class="line">      // 逻辑代码</span><br><span class="line">      this.list[inde].proprice &gt; 1 &amp;&amp; (this.list[inde].proprice = (this.list[inde].proprice - price).toFixed(2))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 父自定义事件和方法, 等待子组件触发事件给方法传值</p></blockquote><h3 id="2-4-阶段小结"><a href="#2-4-阶段小结" class="headerlink" title="2.4_阶段小结"></a>2.4_阶段小结</h3><blockquote><p>目标: 总结父子组件关系-通信技术口诀</p></blockquote><p>组件是什么?</p><ul><li>是一个vue实例, 封装标签, 样式和JS代码</li></ul><p>组件好处?</p><ul><li>便于复用, 易于扩展</li></ul><p>组件通信哪几种, 具体如何实现?</p><ul><li><p>父 -&gt; 子</p></li><li><p>父 &lt;- 子</p></li></ul><h3 id="2-5-vue组件通信-EventBus"><a href="#2-5-vue组件通信-EventBus" class="headerlink" title="2.5_vue组件通信-EventBus"></a>2.5_vue组件通信-EventBus</h3><blockquote><p>目标: 常用于跨组件通信时使用</p></blockquote><p>两个组件的关系非常的复杂，通过父子组件通讯是非常麻烦的。这时候可以使用通用的组件通讯方案：事件总线（event-bus)</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-03-51-image-20210416122123301-2b3920.png" alt="image-20210416122123301"></p><p>核心语法</p><p>EventBus&#x2F;index.js- 定义事件总线bus对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导出空白vue对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br></pre></td></tr></table></figure><p>List.vue注册事件 - 等待接收要砍价的值 (&#x3D;&#x3D;直接复制&#x3D;&#x3D;) - 准备兄弟页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;my-product&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in arr&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; item.proname &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; item.proprice &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;arr&#x27;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>components&#x2F;MyProduct_sub.vue(&#x3D;&#x3D;带学生主要写触发eventBus身上事件&#x3D;&#x3D;)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-product&quot;&gt;</span><br><span class="line">    &lt;h3&gt;标题: &#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;价格: &#123;&#123; price &#125;&#125;元&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; intro &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;subFn&quot;&gt;宝刀-砍1元&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import eventBus from &#x27;../EventBus&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;index&#x27;, &#x27;title&#x27;, &#x27;price&#x27;, &#x27;intro&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    subFn()&#123;</span><br><span class="line">      this.$emit(&#x27;subprice&#x27;, this.index, 1) // 子向父</span><br><span class="line">      eventBus.$emit(&quot;send&quot;, this.index, 1) // 跨组件</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>List.vue正确代码(&#x3D;&#x3D;EventBus接收方&#x3D;&#x3D;)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;my-product&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item, index) in arr&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; item.proname &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; item.proprice &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 跨组件传值</span><br><span class="line">// 1. 引入空白vue对象(EventBus)</span><br><span class="line">// 2. 接收方 - $on监听事件</span><br><span class="line">import eventBus from &quot;../EventBus&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;arr&quot;],</span><br><span class="line">  // 3. 组件创建完毕, 监听send事件</span><br><span class="line">  created() &#123;</span><br><span class="line">    eventBus.$on(&quot;send&quot;, (index, price) =&gt; &#123;</span><br><span class="line">      this.arr[index].proprice &gt; 1 &amp;&amp;</span><br><span class="line">        (this.arr[index].proprice = (this.arr[index].proprice - price).toFixed(2));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 空的Vue对象, 只负责$on注册事件, $emit触发事件, 一定要确保$on先执行</p></blockquote><h2 id="3-todo案例"><a href="#3-todo案例" class="headerlink" title="3. todo案例"></a>3. todo案例</h2><p>完整效果演示</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-05-16-%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86_%E9%93%BA%E5%A2%9E%E5%88%A0-3a6381.gif" alt="品牌管理_铺增删"></p><h3 id="3-0-todo案例-创建工程和组件"><a href="#3-0-todo案例-创建工程和组件" class="headerlink" title="3.0_todo案例-创建工程和组件"></a>3.0_todo案例-创建工程和组件</h3><blockquote><p>目标: 新建工程, 准备好所需的一切</p></blockquote><ul><li>需求1: 创建新工程</li><li>需求2: 分组件创建 – 准备标签和样式(从.md笔记复制)</li></ul><p>分析：</p><p>​①：初始化todo工程</p><p>​②：创建３个组件和里面代码(在预习资料.md复制)</p><p>​③：把styles的样式文件准备好(从预习资料复制)</p><p>​④:  App.vue引入注册使用, 最外层容器类名todoapp</p><p>预先准备: 把styles的样式文件准备好(从预习资料复制), 在App.vue引入使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.0 样式引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles/base.css&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles/index.css&quot;</span></span><br></pre></td></tr></table></figure><p>根据需求: 我们定义3个组件准备复用</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-33-57-image-20210423162040577-2e008c.png" alt="image-20210423162040577"></p><p>components&#x2F;TodoHeader.vue - 复制标签和类名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">    &lt;h1&gt;todos&lt;/h1&gt;</span><br><span class="line">    &lt;input id=&quot;toggle-all&quot; class=&quot;toggle-all&quot; type=&quot;checkbox&quot; &gt;</span><br><span class="line">    &lt;label for=&quot;toggle-all&quot;&gt;&lt;/label&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      class=&quot;new-todo&quot;</span><br><span class="line">      placeholder=&quot;输入任务名称-回车确认&quot;</span><br><span class="line">      autofocus</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>components&#x2F;TodoMain.vue - 复制标签和类名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">    &lt;!-- completed: 完成的类名 --&gt;</span><br><span class="line">    &lt;li class=&quot;completed&quot; &gt;</span><br><span class="line">      &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">        &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; /&gt;</span><br><span class="line">        &lt;label&gt;任务名&lt;/label&gt;</span><br><span class="line">        &lt;button class=&quot;destroy&quot;&gt;&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>components&#x2F;TodoFooter.vue - 复制标签和类名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;footer class=&quot;footer&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;todo-count&quot;&gt;剩余&lt;strong&gt;数量值&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">    &lt;ul class=&quot;filters&quot;&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a class=&quot;selected&quot; href=&quot;javascript:;&quot; &gt;全部&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot;&gt;未完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; &gt;已完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button class=&quot;clear-completed&quot; &gt;清除已完成&lt;/button&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>App.vue中引入和使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;section class=&quot;todoapp&quot;&gt;</span><br><span class="line">    &lt;!-- 除了驼峰, 还可以使用-转换链接 --&gt;</span><br><span class="line">    &lt;TodoHeader&gt;&lt;/TodoHeader&gt;</span><br><span class="line">    &lt;TodoMain&gt;&lt;/TodoMain&gt;</span><br><span class="line">    &lt;TodoFooter&gt;&lt;/TodoFooter&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 1.0 样式引入</span><br><span class="line">import &quot;./styles/base.css&quot;</span><br><span class="line">import &quot;./styles/index.css&quot;</span><br><span class="line">    </span><br><span class="line">import TodoHeader from &quot;./components/TodoHeader&quot;;</span><br><span class="line">import TodoMain from &quot;./components/TodoMain&quot;;</span><br><span class="line">import TodoFooter from &quot;./components/TodoFooter&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    TodoHeader,</span><br><span class="line">    TodoMain,</span><br><span class="line">    TodoFooter,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-1-todo案例-铺设待办任务"><a href="#3-1-todo案例-铺设待办任务" class="headerlink" title="3.1_todo案例-铺设待办任务"></a>3.1_todo案例-铺设待办任务</h3><blockquote><p>目的: 把待办任务, 展示到页面TodoMain.vue组件上</p></blockquote><ul><li>需求1: 把待办任务, 展示到页面TodoMain.vue组件上</li><li>需求2: 关联选中状态, 设置相关样式</li></ul><p>分析：</p><p>​①: App.vue – 准备数组传入TodoMain.vue内</p><p>​②: v-for循环展示数据</p><p>​③: v-model绑定复选框选中状态</p><p>​④: 根据选中状态, 设置完成划线样式</p><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> &lt;<span class="title class_">TodoMain</span> :arr=<span class="string">&quot;showArr&quot;</span>&gt;&lt;/<span class="title class_">TodoMain</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">list</span>: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;吃饭&quot;</span>, <span class="attr">isDone</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">201</span>, <span class="attr">name</span>: <span class="string">&quot;睡觉&quot;</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&quot;打豆豆&quot;</span>, <span class="attr">isDone</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TodoMain.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">    &lt;!-- 2.2 循环任务-关联选中状态-铺设数据 --&gt;</span><br><span class="line">    &lt;!-- completed: 完成的类名 --&gt;</span><br><span class="line">    &lt;li :class=&quot;&#123;completed: obj.isDone&#125;&quot; v-for=&quot;(obj, index) in arr&quot; :key=&#x27;obj.id&#x27;&gt;</span><br><span class="line">      &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">        &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; v-model=&quot;obj.isDone&quot;/&gt;</span><br><span class="line">        &lt;label&gt;&#123;&#123; obj.name &#125;&#125;&lt;/label&gt;</span><br><span class="line">        &lt;!-- 4.0 注册点击事件 --&gt;</span><br><span class="line">        &lt;button @click=&quot;delFn(index)&quot; class=&quot;destroy&quot;&gt;&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;list&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-todo案例-添加任务"><a href="#3-2-todo案例-添加任务" class="headerlink" title="3.2_todo案例-添加任务"></a>3.2_todo案例-添加任务</h3><blockquote><p>目标: 在顶部输入框输入要完成的任务名, 敲击回车, 完成新增功能</p></blockquote><ul><li>需求: 输入任务敲击回车, 新增待办任务</li></ul><p>分析：</p><p>​①: TodoHeader.vue – 输入框 – 键盘事件 – 回车按键</p><p>​②: 子传父, 把待办任务 – App.vue中 – 加入数组list里</p><p>​③: 原数组改变, 所有用到的地方都会更新</p><p>​④: 输入框为空, 提示用户必须输入内容</p><p>TodoHeader.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">    &lt;h1&gt;todos&lt;/h1&gt;</span><br><span class="line">    &lt;input id=&quot;toggle-all&quot; class=&quot;toggle-all&quot; type=&quot;checkbox&quot; v-model=&quot;isAll&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;toggle-all&quot;&gt;&lt;/label&gt;</span><br><span class="line">    &lt;!-- 3.0 键盘事件-回车按键</span><br><span class="line">         3.1 输入框 - v-model获取值</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      class=&quot;new-todo&quot;</span><br><span class="line">      placeholder=&quot;输入任务名称-回车确认&quot;</span><br><span class="line">      autofocus</span><br><span class="line">      @keydown.enter=&quot;downFn&quot;</span><br><span class="line">      v-model=&quot;task&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 3. 目标 - 新增任务</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      task: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    downFn()&#123;</span><br><span class="line">      if (this.task.trim().length === 0) &#123;</span><br><span class="line">        alert(&quot;任务名不能为空&quot;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      // 3.2(重要) - 当前任务名字要加到list数组里</span><br><span class="line">      // 子传父技术</span><br><span class="line">      this.$emit(&quot;create&quot;, this.task)</span><br><span class="line">      this.task = &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">TodoHeader</span> @create=<span class="string">&quot;createFn&quot;</span>&gt;&lt;/<span class="title class_">TodoHeader</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">   <span class="title function_">createFn</span>(<span class="params">taskName</span>)&#123; <span class="comment">// 添加任务</span></span><br><span class="line">      <span class="comment">// 3.3 push到数组里</span></span><br><span class="line">      <span class="keyword">let</span> id = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">length</span> == <span class="number">0</span> ? <span class="number">100</span> : <span class="variable language_">this</span>.<span class="property">list</span>[<span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: id,</span><br><span class="line">        <span class="attr">name</span>: taskName,</span><br><span class="line">        <span class="attr">isDone</span>: <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-todo案例-删除任务"><a href="#3-3-todo案例-删除任务" class="headerlink" title="3.3_todo案例-删除任务"></a>3.3_todo案例-删除任务</h3><blockquote><p>目标: 实现点x, 删除任务功能</p></blockquote><ul><li>需求: 点击任务后的x, 删除当前这条任务</li></ul><p>分析：</p><p>​①: x标签 – 点击事件 – 传入id区分</p><p>​②: 子传父, 把id传回– App.vue中 – 删除数组list里某个对应的对象</p><p>​③: 原数组改变, 所有用到的地方都会更新</p><p>App.vue - 传入自定义事件等待接收要被删除的序号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">TodoMain</span> :arr=<span class="string">&quot;showArr&quot;</span> @del=<span class="string">&quot;deleteFn&quot;</span>&gt;&lt;/<span class="title class_">TodoMain</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">deleteFn</span>(<span class="params">theId</span>)&#123; <span class="comment">// 删除任务</span></span><br><span class="line">      <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">obj</span> =&gt;</span> obj.<span class="property">id</span> === theId)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>TodoMain.vue - 把id传回去实现删除(想好数据在哪里, 就在哪里删除)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="number">4.0</span> 注册点击事件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;delFn(obj.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">     <span class="title function_">delFn</span>(<span class="params">id</span>)&#123;</span><br><span class="line">      <span class="comment">// 4.1 子传父</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;del&#x27;</span>, id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-todo案例-底部统计"><a href="#3-4-todo案例-底部统计" class="headerlink" title="3.4_todo案例-底部统计"></a>3.4_todo案例-底部统计</h3><blockquote><p>目的: 显示现在任务的总数</p></blockquote><ul><li>需求: 统计当前任务的条数</li></ul><p>分析：</p><p>​①: App.vue中 – 数组list – 传给TodoFooter.vue</p><p>​②: 直接在标签上显示 &#x2F; 定义计算属性用于显示都可以</p><p>​③: 原数组只要改变, 所有用到此数组的地方都会更新</p><p>TodoFooter.vue - 接收list统计直接显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;footer class=&quot;footer&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;todo-count&quot;&gt;剩余&lt;strong&gt;&#123;&#123; count &#125;&#125;&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">    &lt;ul class=&quot;filters&quot;&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a class=&quot;selected&quot; href=&quot;javascript:;&quot;&gt;全部&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot;&gt;未完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot;&gt;已完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button class=&quot;clear-completed&quot;&gt;清除已完成&lt;/button&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 5.0 props定义</span><br><span class="line">  props: [&#x27;farr&#x27;],</span><br><span class="line">  // 5.1 计算属性 - 任务数量</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">      return this.farr.length</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>App.vue - 传入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;TodoFooter :farr=&quot;showArr&quot;&gt;&lt;/TodoFooter&gt;</span><br></pre></td></tr></table></figure><h3 id="3-5-todo案例-数据切换"><a href="#3-5-todo案例-数据切换" class="headerlink" title="3.5_todo案例-数据切换"></a>3.5_todo案例-数据切换</h3><blockquote><p>目的: 点击底部切换数据</p></blockquote><ul><li>需求1: 点击底部切换 – 点谁谁有边框</li><li>需求2: 对应切换不同数据显示</li></ul><p>分析：</p><p>​①: TodoFooter.vue – 定义isSel – 值为all, yes, no其中一种</p><p>​②: 多个class分别判断谁应该有类名selected</p><p>​③: 点击修改isSel的值</p><p>​④: 子传父, 把类型isSel传到App.vue</p><p>​⑤: 定义计算属性showArr, 决定从list里显示哪些数据给TodoMain.vue和TodoFooter.vue</p><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;TodoFooter :farr=&quot;showArr&quot; @changeType=&quot;typeFn&quot;&gt;&lt;/TodoFooter&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">       data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">              // ...其他省略</span><br><span class="line">              getSel: &quot;all&quot; // 默认显示全部</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            // ...其他省略</span><br><span class="line">            typeFn(str)&#123; // &#x27;all&#x27; &#x27;yes&#x27; &#x27;no&#x27; // 修改类型</span><br><span class="line">              this.getSel = str</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 6.5 定义showArr数组 - 通过list配合条件筛选而来</span><br><span class="line">          computed: &#123;</span><br><span class="line">            showArr()&#123;</span><br><span class="line">              if (this.getSel === &#x27;yes&#x27;) &#123; // 显示已完成</span><br><span class="line">                return this.list.filter(obj =&gt; obj.isDone === true)</span><br><span class="line">              &#125; else if (this.getSel === &#x27;no&#x27;) &#123; // 显示未完成</span><br><span class="line">                return this.list.filter(obj =&gt; obj.isDone === false)</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                return this.list // 全部显示</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>TodoFooter.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;footer class=&quot;footer&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;todo-count&quot;&gt;剩余&lt;strong&gt;&#123;&#123; count &#125;&#125;&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">    &lt;ul class=&quot;filters&quot; @click=&quot;fn&quot;&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;!-- 6.1 判断谁应该有高亮样式: 动态class</span><br><span class="line">            6.2 用户点击要切换isSel里保存的值</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;a :class=&quot;&#123;selected: isSel === &#x27;all&#x27;&#125;&quot; href=&quot;javascript:;&quot; @click=&quot;isSel=&#x27;all&#x27;&quot;&gt;全部&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a :class=&quot;&#123;selected: isSel === &#x27;no&#x27;&#125;&quot; href=&quot;javascript:;&quot; @click=&quot;isSel=&#x27;no&#x27;&quot;&gt;未完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;a :class=&quot;&#123;selected: isSel === &#x27;yes&#x27;&#125;&quot; href=&quot;javascript:;&quot; @click=&quot;isSel=&#x27;yes&#x27;&quot;&gt;已完成&lt;/a&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;!-- 7. 目标: 清除已完成 --&gt;</span><br><span class="line">    &lt;!-- 7.0 点击事件 --&gt;</span><br><span class="line">    &lt;button class=&quot;clear-completed&quot; &gt;清除已完成&lt;/button&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 5. 目标: 数量统计</span><br><span class="line">export default &#123;</span><br><span class="line">  // 5.0 props定义</span><br><span class="line">  props: [&#x27;farr&#x27;],</span><br><span class="line">  // 5.1 计算属性 - 任务数量</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">      return this.farr.length</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 6. 目标: 点谁谁亮</span><br><span class="line">  // 6.0 变量isSel</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isSel: &#x27;all&#x27; // 全部:&#x27;all&#x27;, 已完成&#x27;yes&#x27;, 未完成&#x27;no&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fn()&#123; // 切换筛选条件</span><br><span class="line">      // 6.3 子 -&gt; 父 把类型字符串传给App.vue </span><br><span class="line">      this.$emit(&quot;changeType&quot;, this.isSel)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-6-todo案例-清空已完成"><a href="#3-6-todo案例-清空已完成" class="headerlink" title="3.6_todo案例-清空已完成"></a>3.6_todo案例-清空已完成</h3><blockquote><p>目的: 点击右下角按钮- 把已经完成的任务清空了</p></blockquote><ul><li>需求: 点击右下角链接标签, 清除已完成任务</li></ul><p>分析：</p><p>​①: 清空标签 – 点击事件</p><p>​②: 子传父 – App.vue – 一个清空方法</p><p>​③: 过滤未完成的覆盖list数组 (不考虑恢复)</p><p>App.vue - 先传入一个自定义事件-因为得接收TodoFooter.vue里的点击事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;TodoFooter :farr=&quot;showArr&quot; @changeType=&quot;typeFn&quot; @clear=&quot;clearFun&quot;&gt;&lt;/TodoFooter&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // ...省略其他</span><br><span class="line">        clearFun()&#123; // 清除已完成</span><br><span class="line">          this.list = this.list.filter(obj =&gt; obj.isDone == false)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>TodoFooter.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 7. 目标: 清除已完成 --&gt;</span><br><span class="line">&lt;!-- 7.0 点击事件 --&gt;</span><br><span class="line">&lt;button class=&quot;clear-completed&quot; @click=&quot;clearFn&quot;&gt;清除已完成&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">        clearFn()&#123; // 清空已完成任务</span><br><span class="line">          // 7.1 触发App.vue里事件对应clearFun方法</span><br><span class="line">          this.$emit(&#x27;clear&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-7-todo案例-数据缓存"><a href="#3-7-todo案例-数据缓存" class="headerlink" title="3.7_todo案例-数据缓存"></a>3.7_todo案例-数据缓存</h3><blockquote><p>目的: 新增&#x2F;修改状态&#x2F;删除 后, 马上把数据同步到浏览器本地存储</p></blockquote><ul><li>需求: 无论如何变化 – 都保证刷新后数据还在</li></ul><p>分析：</p><p>​①: App.vue – 侦听list数组改变 – 深度</p><p>​②: 覆盖式存入到本地 – 注意本地只能存入JSON字符串</p><p>​③: 刷新页面 – list应该默认从本地取值 – 要考虑无数据情况空数组</p><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                // 8.1 默认从本地取值</span><br><span class="line">                list: JSON.parse(localStorage.getItem(&#x27;todoList&#x27;)) || [],</span><br><span class="line">                // 6.4 先中转接收类型字符串</span><br><span class="line">                getSel: &quot;all&quot; // 默认显示全部</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 8. 目标: 数据缓存</span><br><span class="line">        watch: &#123;</span><br><span class="line">            list: &#123;</span><br><span class="line">                deep: true,</span><br><span class="line">                handler()&#123;</span><br><span class="line">                    // 8.0 只要list变化 - 覆盖式保存到localStorage里</span><br><span class="line">                    localStorage.setItem(&#x27;todoList&#x27;, JSON.stringify(this.list))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-8-todo案例-全选功能"><a href="#3-8-todo案例-全选功能" class="headerlink" title="3.8_todo案例-全选功能"></a>3.8_todo案例-全选功能</h3><blockquote><p>目标: 点击左上角v号, 可以设置一键完成, 再点一次取消全选</p></blockquote><ul><li>需求1: 点击全选 – 小选框受到影响</li><li>需求2: 小选框都选中(手选) – 全选自动选中状态</li></ul><p>分析：</p><p>​①: TodoHeader.vue – 计算属性 - isAll</p><p>​②: App.vue – 传入数组list – 在isAll的set里影响小选框</p><p>​③: isAll的get里统计小选框最后状态, 影响isAll – 影响全选状态</p><p>​④: 考虑无数据情况空数组 – 全选不应该勾选</p><p>提示: 就是遍历所有的对象, 修改他们的完成状态属性的值</p><p>TodoHeader.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 9. 目标: 全选状态</span><br><span class="line">9.0 v-model关联全选状态</span><br><span class="line">页面变化(勾选true, 未勾选false) -&gt; v-model -&gt; isAll变量</span><br><span class="line">--&gt;</span><br><span class="line">&lt;input id=&quot;toggle-all&quot; class=&quot;toggle-all&quot; type=&quot;checkbox&quot; v-model=&quot;isAll&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        // ...其他省略</span><br><span class="line">        // 9.1 定义计算属性</span><br><span class="line">        computed: &#123;</span><br><span class="line">            isAll: &#123;</span><br><span class="line">                set(checked)&#123; // 只有true / false</span><br><span class="line">                    // 9.3 影响数组里每个小选框绑定的isDone属性</span><br><span class="line">                    this.arr.forEach(obj =&gt; obj.isDone = checked)</span><br><span class="line">                &#125;,</span><br><span class="line">                get()&#123;</span><br><span class="line">                    // 9.4 小选框统计状态 -&gt; 全选框</span><br><span class="line">                    // 9.5 如果没有数据, 直接返回false-不要让全选勾选状态</span><br><span class="line">                    return this.arr.length !== 0 &amp;&amp; this.arr.every(obj =&gt; obj.isDone === true)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;TodoHeader :arr=&quot;list&quot; @create=&quot;createFn&quot;&gt;&lt;/TodoHeader&gt;</span><br></pre></td></tr></table></figure><h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ul><li><p><input disabled="" type="checkbox"> 组件概念和作用以及创建和使用方式</p></li><li><p><input disabled="" type="checkbox"> 掌握组件通信包括父向子, 子向父传值</p></li><li><p><input disabled="" type="checkbox"> 熟悉EventBus的使用和原理</p></li><li><p><input disabled="" type="checkbox"> 跟随老师的视频完成todo案例的全部功能</p></li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1-请说下封装-vue-组件的过程"><a href="#1-请说下封装-vue-组件的过程" class="headerlink" title="1. 请说下封装 vue 组件的过程"></a>1. 请说下封装 vue 组件的过程</h3><p>​    首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。</p><ul><li><p>分析需求：确定业务需求，把页面中可以复用的结构，样式以及功能，单独抽离成一个组件，实现复用</p></li><li><p>具体步骤：Vue.component 或者在new Vue配置项components中, 定义组件名, 可以在props中接受给组件传的参数和值，子组件修改好数据后，想把数据传递给父组件。可以采用$emit方法。</p></li></ul><h3 id="2-Vue组件如何进行传值的"><a href="#2-Vue组件如何进行传值的" class="headerlink" title="2. Vue组件如何进行传值的"></a>2. Vue组件如何进行传值的</h3><p>父向子 -&gt; props定义变量 -&gt; 父在使用组件用属性给props变量传值</p><p>子向父 -&gt; $emit触发父的事件 -&gt; 父在使用组件用@自定义事件名&#x3D;父的方法 (子把值带出来)</p><h3 id="3-Vue-组件-data-为什么必须是函数"><a href="#3-Vue-组件-data-为什么必须是函数" class="headerlink" title="3. Vue 组件 data 为什么必须是函数"></a>3. Vue 组件 data 为什么必须是函数</h3><p>每个组件都是 Vue 的实例, 为了独立作用域, 不让变量污染别人的变量</p><h3 id="4-讲一下组件的命名规范"><a href="#4-讲一下组件的命名规范" class="headerlink" title="4. 讲一下组件的命名规范"></a>4. 讲一下组件的命名规范</h3><p>​    给组件命名有两种方式(在Vue.Component&#x2F;components时)，一种是使用链式命名”my-component”，一种是使用大驼峰命名”MyComponent”，</p><p>​因为要遵循W3C规范中的自定义组件名 (字母全小写且必须包含一个连字符)，避免和当前以及未来的 HTML 元素相冲突</p><h2 id="附加练习-1-喜欢小狗狗吗"><a href="#附加练习-1-喜欢小狗狗吗" class="headerlink" title="附加练习_1.喜欢小狗狗吗"></a>附加练习_1.喜欢小狗狗吗</h2><blockquote><p>目标: 封装Dog组件, 用来复用显示图片和标题的</p></blockquote><p>效果:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-34-08-image-20210115103545558-4bfe37.png" alt="image-20210115103545558"></p><hr><p>正确答案(&#x3D;&#x3D;先不要看&#x3D;&#x3D;)</p><p>components&#x2F;practise&#x2F;Dog1.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my_div&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://scpic.chinaz.net/files/pic/pic9/202003/zzpic23514.jpg&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个孤独可怜的狗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.my_div</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.my_div</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在App.vue中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Dog&gt;&lt;/Dog&gt;</span><br><span class="line">    &lt;Dog/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Dog from &#x27;@/components/practise/Dog1&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Dog</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 重复部分封装成组件, 然后注册使用</p></blockquote><h2 id="附加练习-2-点击文字变色"><a href="#附加练习-2-点击文字变色" class="headerlink" title="附加练习_2.点击文字变色"></a>附加练习_2.点击文字变色</h2><blockquote><p>目标: 修改Dog组件, 实现组件内点击变色</p></blockquote><p>提示: 文字在组件内, 所以事件和方法都该在组件内-独立</p><p>图示:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-39-50-10.3.1_%E7%BB%84%E4%BB%B6_%E4%BA%8B%E4%BB%B6%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8-43a170.gif" alt="10.3.1_组件_事件变量使用"></p><p>正确代码(&#x3D;&#x3D;先不要看&#x3D;&#x3D;)</p><p>components&#x2F;practise&#x2F;Dog2.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my_div&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://scpic.chinaz.net/files/pic/pic9/202003/zzpic23514.jpg&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;backgroundColor: colorStr&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>这是一个孤独可怜的狗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">colorStr</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">btn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">colorStr</span> = <span class="string">`rgb(<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>)&#125;</span>, <span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>)&#125;</span>, <span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>)&#125;</span>)`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.my_div</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.my_div</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="附加练习-3-卖狗啦"><a href="#附加练习-3-卖狗啦" class="headerlink" title="附加练习_3.卖狗啦"></a>附加练习_3.卖狗啦</h2><blockquote><p>目标: 把数据循环用组件显示铺设</p></blockquote><p>数据:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">&quot;http://nwzimg.wezhan.cn/contents/sitefiles2029/10146688/images/21129958.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">&quot;博美&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1224576619,1307855467&amp;fm=26&amp;gp=0.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">&quot;泰迪&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2967740259,1518632757&amp;fm=26&amp;gp=0.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">&quot;金毛&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">&quot;https://pic1.zhimg.com/80/v2-7ba4342e6fedb9c5f3726eb0888867da_1440w.jpg?source=1940ef5c&quot;</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">&quot;哈士奇&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813435580&amp;di=946902d419c3643e33a0c9113fc8d780&amp;imgtype=0&amp;src=http%3A%2F%2Fvpic.video.qq.com%2F3388556%2Fd0522aynh3x_ori_3.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">&quot;阿拉斯加&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">dogImgUrl</span>:</span><br><span class="line">        <span class="string">&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813454815&amp;di=ecdd2ebf479568453d704dffacdfa12c&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.officedoyen.com%2Fuploads%2Fallimg%2F150408%2F1-15040Q10J5B0.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">dogName</span>: <span class="string">&quot;萨摩耶&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>图示:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-39-54-image-20210115112811452-7c1063.png" alt="image-20210115112811452"></p><p>正确代码(&#x3D;&#x3D;不可复制&#x3D;&#x3D;)</p><p>components&#x2F;practise&#x2F;Dog3.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my_div&quot;&gt;</span><br><span class="line">    &lt;img :src=&quot;imgurl&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">    &lt;p :style=&quot;&#123; backgroundColor: colorStr &#125;&quot; @click=&quot;btn&quot;&gt;&#123;&#123; dogname &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;imgurl&quot;, &quot;dogname&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      colorStr: &quot;&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btn() &#123;</span><br><span class="line">      this.colorStr = `rgb($&#123;Math.floor(Math.random() * 256)&#125;, $&#123;Math.floor(</span><br><span class="line">        Math.random() * 256</span><br><span class="line">      )&#125;, $&#123;Math.floor(Math.random() * 256)&#125;)`;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.my_div &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  text-align: center;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.my_div img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>App.vue引入使用把数据循环传给组件显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Dog v-for=&quot;(obj, index) in arr&quot;</span><br><span class="line">    :key=&quot;index&quot;</span><br><span class="line">    :imgurl=&quot;obj.dogImgUrl&quot;</span><br><span class="line">    :dogname=&quot;obj.dogName&quot;</span><br><span class="line">    &gt;&lt;/Dog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Dog from &#x27;@/components/practise/Dog3&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 1. 准备数据</span><br><span class="line">      arr: [</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;http://nwzimg.wezhan.cn/contents/sitefiles2029/10146688/images/21129958.jpg&quot;,</span><br><span class="line">          dogName: &quot;博美&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1224576619,1307855467&amp;fm=26&amp;gp=0.jpg&quot;,</span><br><span class="line">          dogName: &quot;泰迪&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2967740259,1518632757&amp;fm=26&amp;gp=0.jpg&quot;,</span><br><span class="line">          dogName: &quot;金毛&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;https://pic1.zhimg.com/80/v2-7ba4342e6fedb9c5f3726eb0888867da_1440w.jpg?source=1940ef5c&quot;,</span><br><span class="line">          dogName: &quot;哈士奇&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813435580&amp;di=946902d419c3643e33a0c9113fc8d780&amp;imgtype=0&amp;src=http%3A%2F%2Fvpic.video.qq.com%2F3388556%2Fd0522aynh3x_ori_3.jpg&quot;,</span><br><span class="line">          dogName: &quot;阿拉斯加&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813454815&amp;di=ecdd2ebf479568453d704dffacdfa12c&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.officedoyen.com%2Fuploads%2Fallimg%2F150408%2F1-15040Q10J5B0.jpg&quot;,</span><br><span class="line">          dogName: &quot;萨摩耶&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Dog</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="附加练习-4-选择喜欢的狗"><a href="#附加练习-4-选择喜欢的狗" class="headerlink" title="附加练习_4.选择喜欢的狗"></a>附加练习_4.选择喜欢的狗</h2><blockquote><p>目标: 用户点击狗狗的名字, 在右侧列表显示一次名字</p></blockquote><p>效果:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-34-22-11.5_%E5%96%9C%E6%AC%A2%E7%9A%84%E7%8B%97%E7%8B%97-a5116d.gif" alt="11.5_喜欢的狗狗"></p><p>正确代码(&#x3D;&#x3D;不可复制&#x3D;&#x3D;)</p><p>components&#x2F;practise&#x2F;Dog4.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my_div&quot;&gt;</span><br><span class="line">    &lt;img :src=&quot;imgurl&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">    &lt;p :style=&quot;&#123; backgroundColor: colorStr &#125;&quot; @click=&quot;btn&quot;&gt;&#123;&#123; dogname &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;imgurl&quot;, &quot;dogname&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      colorStr: &quot;&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btn() &#123;</span><br><span class="line">      this.colorStr = `rgb($&#123;Math.floor(Math.random() * 256)&#125;, $&#123;Math.floor(</span><br><span class="line">        Math.random() * 256</span><br><span class="line">      )&#125;, $&#123;Math.floor(Math.random() * 256)&#125;)`;</span><br><span class="line"></span><br><span class="line">      // 补充: 触发父级事件</span><br><span class="line">      this.$emit(&quot;love&quot;, this.dogname);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.my_div &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  text-align: center;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.my_div img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Dog</span><br><span class="line">      v-for=&quot;(obj, index) in arr&quot;</span><br><span class="line">      :key=&quot;index&quot;</span><br><span class="line">      :imgurl=&quot;obj.dogImgUrl&quot;</span><br><span class="line">      :dogname=&quot;obj.dogName&quot;</span><br><span class="line">      @love=&quot;fn&quot;</span><br><span class="line">    &gt;&lt;/Dog&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;p&gt;显示喜欢的狗:&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in loveArr&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Dog from &quot;@/components/practise/Dog4&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 1. 准备数据</span><br><span class="line">      arr: [</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;http://nwzimg.wezhan.cn/contents/sitefiles2029/10146688/images/21129958.jpg&quot;,</span><br><span class="line">          dogName: &quot;博美&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1224576619,1307855467&amp;fm=26&amp;gp=0.jpg&quot;,</span><br><span class="line">          dogName: &quot;泰迪&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2967740259,1518632757&amp;fm=26&amp;gp=0.jpg&quot;,</span><br><span class="line">          dogName: &quot;金毛&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;https://pic1.zhimg.com/80/v2-7ba4342e6fedb9c5f3726eb0888867da_1440w.jpg?source=1940ef5c&quot;,</span><br><span class="line">          dogName: &quot;哈士奇&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813435580&amp;di=946902d419c3643e33a0c9113fc8d780&amp;imgtype=0&amp;src=http%3A%2F%2Fvpic.video.qq.com%2F3388556%2Fd0522aynh3x_ori_3.jpg&quot;,</span><br><span class="line">          dogName: &quot;阿拉斯加&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          dogImgUrl:</span><br><span class="line">            &quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563813454815&amp;di=ecdd2ebf479568453d704dffacdfa12c&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.officedoyen.com%2Fuploads%2Fallimg%2F150408%2F1-15040Q10J5B0.jpg&quot;,</span><br><span class="line">          dogName: &quot;萨摩耶&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      loveArr: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Dog,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fn(dogName) &#123;</span><br><span class="line">      this.loveArr.push(dogName)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style &gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="附加练习-5-卖完了"><a href="#附加练习-5-卖完了" class="headerlink" title="附加练习_5.卖完了"></a>附加练习_5.卖完了</h2><blockquote><p>目标: 完成图示的卖完了效果</p></blockquote><p>需求: </p><ul><li>如果为0了后面显示卖光了!!!</li><li>如果库存有值, 后面就不显示卖光了!!!</li><li>如果库存有值, 累计商品总数量</li></ul><p>要求: 一行是一个组件进行复用, 这里要求必须用table&gt;tr (也就是封装tr组件)</p><p>组件使用注意: html正常解析, table&gt;tr或者select&gt;option, 虽然vue渲染页面可以自定义, 但是还需要遵循浏览器的标签关系</p><ul><li>table&gt;tr中不能直接使用组件, 需要在tr的is属性指定组件名</li><li>select&gt;option 也不能封装options组件, 需要在option的is属性指定组件名</li></ul><p>效果演示:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-40-00-11.7_%E8%AF%BE%E4%B8%8A%E7%BB%83%E4%B9%A0-eae4ae.gif" alt="11.7_课上练习"></p><p>vue实例data里的数组如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">goodsArr</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">goodsName</span>: <span class="string">&quot;Watermelon&quot;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">goodsName</span>: <span class="string">&quot;Banana&quot;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">goodsName</span>: <span class="string">&quot;Orange&quot;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">goodsName</span>: <span class="string">&quot;Pineapple&quot;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">goodsName</span>: <span class="string">&quot;Strawberry&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>正确代码(不可复制)</p><p>components&#x2F;practise&#x2F;MyTr.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;obj[&#x27;count&#x27;]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; obj[&quot;goodsName&quot;] &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;obj[&#x27;count&#x27;] == 0&quot;</span>&gt;</span>卖光了!!!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 传入对象有风险, 但是如果是一对一关系可以传入对象-直接修改对象里的值影响外部效果</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">&quot;obj&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>App.vue使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">      &lt;!-- 2. 使用tr组件, 传入需要的数据 --&gt;</span><br><span class="line">      &lt;tr</span><br><span class="line">        is=&quot;myTr&quot;</span><br><span class="line">        v-for=&quot;(item, index) in goodsArr&quot;</span><br><span class="line">        :key=&quot;index&quot;</span><br><span class="line">        :obj=&quot;item&quot;</span><br><span class="line">        :index=&quot;index&quot;</span><br><span class="line">      &gt;&lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;p&gt;All Number:&#123;&#123; sumNumber &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyTr from &#x27;@/components/practise/MyTr&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      goodsArr: [</span><br><span class="line">        &#123;</span><br><span class="line">          count: 0,</span><br><span class="line">          goodsName: &quot;Watermelon&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          count: 0,</span><br><span class="line">          goodsName: &quot;Banana&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          count: 0,</span><br><span class="line">          goodsName: &quot;Orange&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          count: 0,</span><br><span class="line">          goodsName: &quot;Pineapple&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          count: 0,</span><br><span class="line">          goodsName: &quot;Strawberry&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyTr</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    sumNumber()&#123;</span><br><span class="line">      return this.goodsArr.reduce((sum, obj) =&gt; sum += obj.count * 1, 0)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="附加练习-6-买点好吃的"><a href="#附加练习-6-买点好吃的" class="headerlink" title="附加练习_6.买点好吃的"></a>附加练习_6.买点好吃的</h2><blockquote><p>目标: 商品列表显示一下, 然后封装组件实现增加减少功能并在最后统计总价</p></blockquote><p>要求: 商品名, 增加 数量, 减少这一条封装成组件使用</p><p>效果演示:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-34-34-11.6_%E8%AF%BE%E4%B8%8A%E7%BB%83%E4%B9%A0-ee9594.gif" alt="11.6_课上练习"></p><p>数据:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;shopName&quot;</span>: <span class="string">&quot;可比克薯片&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">5.5</span>,</span><br><span class="line">        <span class="string">&quot;count&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;shopName&quot;</span>: <span class="string">&quot;草莓酱&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">3.5</span>,</span><br><span class="line">        <span class="string">&quot;count&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;shopName&quot;</span>: <span class="string">&quot;红烧肉&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">55</span>,</span><br><span class="line">        <span class="string">&quot;count&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;shopName&quot;</span>: <span class="string">&quot;方便面&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="string">&quot;count&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>正确代码(&#x3D;&#x3D;不可复制&#x3D;&#x3D;)</p><p>components&#x2F;practise&#x2F;Food.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; goodsname &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(ind)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123; count &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sec(ind)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">&#x27;goodsname&#x27;</span>, <span class="string">&#x27;ind&#x27;</span>, <span class="string">&#x27;count&#x27;</span>], <span class="comment">// 商品名,索引,数量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">add</span>(<span class="params">ind</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;addE&#x27;</span>, ind)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">sec</span>(<span class="params">ind</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;secE&quot;</span>, ind)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;商品清单如下:&lt;/p&gt;</span><br><span class="line">    &lt;div v-for=&quot;(obj, index) in shopData&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &#123;&#123; obj.shopName &#125;&#125; -- &#123;&#123; obj.price &#125;&#125;元/份</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;请选择购买数量:&lt;/p&gt;</span><br><span class="line">    &lt;Food</span><br><span class="line">      v-for=&quot;(obj, index) in shopData&quot;</span><br><span class="line">      :key=&quot;index + &#x27; &#x27;&quot;</span><br><span class="line">      :goodsname=&quot;obj.shopName&quot;</span><br><span class="line">      :ind=&quot;index&quot;</span><br><span class="line">      :count=&quot;obj.count&quot;</span><br><span class="line">      @addE=&quot;addFn&quot;</span><br><span class="line">      @secE=&quot;secFn&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/Food&gt;</span><br><span class="line">    &lt;p&gt;总价为: &#123;&#123; allPrice &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Food from &quot;@/components/practise/Food&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 商品数据</span><br><span class="line">      shopData: [</span><br><span class="line">        &#123;</span><br><span class="line">          shopName: &quot;可比克薯片&quot;,</span><br><span class="line">          price: 5.5,</span><br><span class="line">          count: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          shopName: &quot;草莓酱&quot;,</span><br><span class="line">          price: 3.5,</span><br><span class="line">          count: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          shopName: &quot;红烧肉&quot;,</span><br><span class="line">          price: 55,</span><br><span class="line">          count: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          shopName: &quot;方便面&quot;,</span><br><span class="line">          price: 12,</span><br><span class="line">          count: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Food,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addFn(ind)&#123;</span><br><span class="line">      this.shopData[ind].count++</span><br><span class="line">    &#125;,</span><br><span class="line">    secFn(ind)&#123;</span><br><span class="line">      this.shopData[ind].count &gt; 0 &amp;&amp; this.shopData[ind].count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    allPrice()&#123;</span><br><span class="line">      return this.shopData.reduce((sum, obj) =&gt; sum += obj.count * obj.price, 0)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h2><p>&#x3D;&#x3D;课上练习和案例主要&#x3D;&#x3D;</p><h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><p>目的: 把一行tr封装成一个组件, 然后v-for循环复用传值</p><blockquote><p>提示: 对象类型传入到子组件, 内部修改也会相应外部这个对象 (对象是引用关系哦)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-40-09-image-20210115195904519-5a4874.png" alt="image-20210115195904519"></p><p>不带vue代码的标签结构(&#x3D;&#x3D;可以复制&#x3D;&#x3D;)接着写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;table</span><br><span class="line">      border=&quot;1&quot;</span><br><span class="line">      width=&quot;700&quot;</span><br><span class="line">      style=&quot;border-collapse: collapse&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;caption&gt;</span><br><span class="line">        购物车</span><br><span class="line">      &lt;/caption&gt;</span><br><span class="line">      &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;th&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; /&gt; &lt;span&gt;全选&lt;/span&gt;</span><br><span class="line">          &lt;/th&gt;</span><br><span class="line">          &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;数量&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;总价&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/thead&gt;</span><br><span class="line">      &lt;tbody&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/tbody&gt;</span><br><span class="line">      &lt;tfoot&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;合计:&lt;/td&gt;</span><br><span class="line">          &lt;td colspan=&quot;5&quot;&gt;</span><br><span class="line">            </span><br><span class="line">          &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/tfoot&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      goodList: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: &quot;诸葛亮&quot;,</span><br><span class="line">          price: 1000,</span><br><span class="line">          num: 1,</span><br><span class="line">          checked: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &quot;蔡文姬&quot;,</span><br><span class="line">          price: 1500,</span><br><span class="line">          num: 1,</span><br><span class="line">          checked: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &quot;妲己&quot;,</span><br><span class="line">          price: 2000,</span><br><span class="line">          num: 1,</span><br><span class="line">          checked: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &quot;鲁班&quot;,</span><br><span class="line">          price: 2200,</span><br><span class="line">          num: 1,</span><br><span class="line">          checked: false,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="做数学题"><a href="#做数学题" class="headerlink" title="做数学题"></a>做数学题</h3><p>目的: 随机产生数学题, 输入答案提交后, 在下面对应序号显示结果</p><blockquote><p>数字输入框按钮是一个组件, 下面每个序号和提示是一个组件</p></blockquote><p>图示:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-34-40-Day04_%E4%BD%9C%E4%B8%9A_%E6%95%B0%E5%AD%A6%E9%A2%98-990288.gif" alt="Day04_作业_数学题"></p><p>Subject.vue - 题目一行组件 (样式和标签)(&#x3D;&#x3D;可以复制接着写&#x3D;&#x3D;)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;subject&quot;&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;+&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;=&lt;/span&gt;</span><br><span class="line">    &lt;input type=&quot;number&quot; /&gt;</span><br><span class="line">    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.subject &#123;</span><br><span class="line">  margin: 5px;</span><br><span class="line">  padding: 5px;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.subject span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  text-align: center;</span><br><span class="line">  width: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.subject input &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>Flag.vue - 下面结果一条的组件 (复制标签和样式)(&#x3D;&#x3D;可以复制&#x3D;&#x3D;)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;span &gt;1: 未完成&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.right &#123;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br><span class="line">.error &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">.undo &#123;</span><br><span class="line">  color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>App.vue - 复制标签和样式</p><p>无vue代码的标签(&#x3D;&#x3D;可以复制&#x3D;&#x3D;)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subject</span> &gt;</span><span class="tag">&lt;/<span class="name">subject</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">flag</span>&gt;</span><span class="tag">&lt;/<span class="name">flag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue 组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue脚手架基础</title>
      <link href="/2024/07/03/Vue%E8%84%9A%E6%89%8B%E6%9E%B6%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/07/03/Vue%E8%84%9A%E6%89%8B%E6%9E%B6%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="铺垫-自学"><a href="#铺垫-自学" class="headerlink" title="铺垫(自学)"></a>铺垫(自学)</h2><blockquote><p>涉及到的资源下载地址：<a href="https://www.123pan.com/s/eeJbVv-O0lUA.html">https://www.123pan.com/s/eeJbVv-O0lUA.html</a><br>提取码:qrC6</p></blockquote><h3 id="可选安装-谷歌访问助手"><a href="#可选安装-谷歌访问助手" class="headerlink" title="可选安装 - 谷歌访问助手"></a>可选安装 - 谷歌访问助手</h3><p>这是一个谷歌浏览器上的插件</p><p>安装</p><ol><li>必安插件(文件夹)下的 &#x3D;&#x3D;google-access-helper-2.3.0(文件夹)&#x3D;&#x3D;  复制到你想放的文件夹下(&#x3D;&#x3D;安装后不可以挪动位置&#x3D;&#x3D;)</li></ol><blockquote><p>建议D盘下, 弄一个专门按软件的文件夹</p></blockquote><ol start="2"><li><p>打开谷歌浏览器-扩展程序-开发者模式打开-把文件夹拖进来就安装完毕</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-11-49-%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8C%E5%8A%A9%E6%89%8B%E6%8F%92%E4%BB%B6-6bf761.gif" alt="安装谷歌助手插件"></p></li></ol><p>功能如下:</p><p>谷歌浏览器上</p><ul><li>同步书签(需要注册和登录, 开启同步功能) - 可以暂不使用(因为有的手机号可能注册不了谷歌账号)</li><li>谷歌商店(无需登录, 安装其他插件)</li></ul><h3 id="必安装-vue-devtools"><a href="#必安装-vue-devtools" class="headerlink" title="必安装 - vue-devtools"></a>必安装 - vue-devtools</h3><p>学习, 调试vue必备之利器 - 官方提供的呦</p><p>右上角-插件-谷歌访问助手-打开Chrome商店-搜索vue-devtools回车-然后添加至Chrome等待下载后自动安装-右上角显示已经添加即代表成功</p><p>如果实在打不开谷歌商店, 换个网 &#x2F; 直接用备用文件夹里的vue-devtools插件包安装到浏览器扩展程序也一样用</p><p>&#x3D;&#x3D;不要图标上带橘黄色beta的&#x3D;&#x3D;</p><p>&#x3D;&#x3D;如果这个网址打不开, 就用预习资料里备用的本地版安装也可以, 安装过程和上个插件安装过程一致&#x3D;&#x3D;</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-12-11-%E5%AE%89%E8%A3%85vue_devtools%E6%8F%92%E4%BB%B6%E5%88%B0%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8-ecc52e.gif" alt="安装vue_devtools插件到谷歌浏览器"></p><h3 id="vscode-插件补充"><a href="#vscode-插件补充" class="headerlink" title="vscode-插件补充"></a>vscode-插件补充</h3><p>vue文件代码高亮插件-vscode中安装</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-12-00-image-20210212192713936-edb57e.png" alt="image-20210212192713936"></p><p>代码提示插件-vscode中安装</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-12-00-image-20210304223236080-6041b6.png" alt="image-20210304223236080"></p><h2 id="知识点自测"><a href="#知识点自测" class="headerlink" title="知识点自测"></a>知识点自测</h2><p>想学会今天的内容, 先测测这几个会不会</p><ul><li><input disabled="" type="checkbox"> 表达式, 变量是什么</li><li><input disabled="" type="checkbox"> new的作用和含义</li><li><input disabled="" type="checkbox"> 实例化对象</li><li><input disabled="" type="checkbox"> 什么是对象上的, 属性和方法</li><li><input disabled="" type="checkbox"> 对象的赋值和取值</li><li><input disabled="" type="checkbox"> this的指向</li><li><input disabled="" type="checkbox"> npm&#x2F;yarn是什么, package.json干什么的, 下载包的命令是什么, 什么是模块化开发</li><li><input disabled="" type="checkbox"> 函数的形参实参, 得马上反应过来, 哪个是变量哪个是值, 谁传给谁了</li></ul><p>如果通不过, 请记住口诀:</p><ol><li><p>变量是一个容器, 表达式原地都有返回结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// a就是变量, 运行后使用变量里的值再原地打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> + <span class="number">50</span>); <span class="comment">// 10 + 50 就是表达式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a &gt; <span class="number">9</span>); <span class="comment">// 这叫判断表达式, 原地结果是true</span></span><br></pre></td></tr></table></figure></li><li><p>new 类名() - 原地得到一个实例对象 - 对象身上有key(或叫属性, 叫键都行), 对应的值是我们要使用的</p></li><li><p>实例化对象就是new 类名() 创造出来的对象, 身上包含属性(key, 键) 对应的 值</p></li><li><p>什么是属性和方法(固定格式)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="comment">// 属性指的是a, b, c, d, e这些名字</span></span><br><span class="line">    <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">b</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="attr">c</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    d () &#123;&#125;,</span><br><span class="line">    <span class="attr">e</span>: <span class="function">() =&gt;</span> &#123;&#125; <span class="comment">// 值是冒号:右边的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个格式是固定的, 必须张口就来, 张手就写, 准确率100%</span></span><br></pre></td></tr></table></figure></li><li><p>对象的复制和取值(固定格式)</p><p>有&#x3D;(赋值运算符) 就是赋值, 没有就是取值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>); <span class="comment">// 从obj对象的a上取值, 原地打印10</span></span><br><span class="line">obj.<span class="property">b</span> = <span class="number">100</span>; <span class="comment">// 有=, 固定把右侧的值赋予给左侧的键, 再打印obj这个对象, b的值是100了</span></span><br></pre></td></tr></table></figure></li><li><p>this指向口诀</p><p>在function函数中, this默认指向当前函数的调用者  调用者.函数名()</p><p>在箭头函数中, this指向外层”函数”作用域this的值</p></li></ol><h2 id="今日学习目标"><a href="#今日学习目标" class="headerlink" title="今日学习目标"></a>今日学习目标</h2><ol><li>能够理解vue的概念和作用</li><li>能够理解vuecli脚手架工程化开发</li><li>能够使用vue指令</li></ol><h2 id="1-Vue基本概念"><a href="#1-Vue基本概念" class="headerlink" title="1. Vue基本概念"></a>1. Vue基本概念</h2><h3 id="1-0-为何学Vue"><a href="#1-0-为何学Vue" class="headerlink" title="1.0_为何学Vue"></a>1.0_为何学Vue</h3><blockquote><p>目标: 更少的时间,干更多的活. 开发网站速度, 快</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-12-47-image-20210317180201113-2f1b8c.png" alt="image-20210317180201113"></p><p>例如: 把数组数据-循环铺设到li中, 看看分别如何做的?</p><p>原生js做法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;myUl&quot;&gt;&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let arr = [&quot;春天&quot;, &quot;夏天&quot;, &quot;秋天&quot;, &quot;冬天&quot;];</span><br><span class="line">    let myUl = document.getElementById(&quot;myUl&quot;);</span><br><span class="line">    for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        let theLi = document.createElement(&quot;li&quot;);</span><br><span class="line">        theLi.innerHTML = arr[i];</span><br><span class="line">        myUl.appendChild(theLi);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Vue.js做法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in arr&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        // ...</span><br><span class="line">        data: &#123;</span><br><span class="line">            arr: [&quot;春天&quot;, &quot;夏天&quot;, &quot;秋天&quot;, &quot;冬天&quot;] </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意: 虽然vue写起来很爽, 但是一定不要忘记, vue的底层还是原生js</p><p>开发更加的效率和简洁, 易于维护, 快!快!快!就是块 (甚至测试, Java, Python工程师都要学点vue, 方便与前端沟通)</p><p>现在很多项目都是用vue开发的</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-13-20-image-20210317180240323-bf35d2.png" alt="image-20210317180240323"></p><p>市场上90%工作都要求会vue, 会vue拿高薪, 甚至java或测试都要学点vue</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-13-22-image-20210317180255055-39b7af.png" alt="image-20210317180255055"></p><h3 id="1-1-Vue是什么"><a href="#1-1-Vue是什么" class="headerlink" title="1.1_Vue是什么"></a>1.1_Vue是什么</h3><p>logo镇楼</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-13-38-VUE-logo-f7aed8.png" alt="Vue"></p><p>&#x3D;&#x3D;渐进式&#x3D;&#x3D;javacript&#x3D;&#x3D;框架&#x3D;&#x3D;, 一套拥有自己规则的语法</p><p>官网地址: <a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a> (作者: 尤雨溪)</p><blockquote><h3 id="什么是渐进式"><a href="#什么是渐进式" class="headerlink" title="什么是渐进式"></a>什么是渐进式</h3></blockquote><p>渐进式: 逐渐进步, 想用什么就用什么, 不必全都使用<br><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-13-57-image-20210314200521109-9959ca.png" alt="image-20210314200521109"></p><p>Vue渐进式: Vue从基础开始, 会循序渐进向前学习, 如下知识点可能你现在不明白, 但是学完整个vue回过头来看, 会很有帮助</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-14-06-%E6%B8%90%E8%BF%9B%E5%BC%8F-1613206784433-eb53db.png"></p><blockquote><h3 id="什么是库和框架"><a href="#什么是库和框架" class="headerlink" title="什么是库和框架"></a>什么是库和框架</h3></blockquote><p>补充概念:</p><p>库:  封装的属性或方法 (例jquery.js)</p><p>框架: 拥有自己的规则和元素, 比库强大的多 (例vue.js)</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-14-26-image-20210111215624065-f0aa00.png" alt="image-20210111215624065"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-14-28-image-20210212141558460-081ca8.png" alt="image-20210212141558460"></p><h3 id="1-2-Vue学习的方式"><a href="#1-2-Vue学习的方式" class="headerlink" title="1.2_Vue学习的方式"></a>1.2_Vue学习的方式</h3><ul><li><p>传统开发模式：基于html&#x2F;css&#x2F;js文件开发vue</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-14-40-image-20210228083641377-49480b.png" alt="image-20210228083641377"></p></li><li><p>工程化开发方式：在webpack环境中开发vue，这是最推荐, 企业常用的方式</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-14-42-image-20210228083746746-a64ffe.png" alt="image-20210228083746746"></p></li></ul><blockquote><h3 id="Vue如何学"><a href="#Vue如何学" class="headerlink" title="Vue如何学"></a>Vue如何学</h3></blockquote><ol><li>每天的知识点自测最好做到了如指掌 - 做不到只能花30分钟去记住结论和公式</li><li>记住vue指令作用, 基础语法 - 弄一个字典(一一映射关系)</li><li>在课上例子, 练习, 案例, 作业, 项目中, 反复磨炼使用</li><li>学会查找问题的方式和解决方式(弄个报错总结.md, 避免反复进坑)</li></ol><blockquote><p>总结: vue是渐进式框架, 有自己的规则, 我们要记住语法, 特点和作用, 反复磨炼使用, 多总结</p></blockquote><h2 id="2-vue-cli脚手架"><a href="#2-vue-cli脚手架" class="headerlink" title="2. @vue&#x2F;cli脚手架"></a>2. @vue&#x2F;cli脚手架</h2><h3 id="2-0-vue-cli-脚手架介绍"><a href="#2-0-vue-cli-脚手架介绍" class="headerlink" title="2.0_@vue&#x2F;cli 脚手架介绍"></a>2.0_@vue&#x2F;cli 脚手架介绍</h3><blockquote><p>目标: webpack自己配置环境很麻烦, 下载@vue&#x2F;cli包,用vue命令创建脚手架项目</p></blockquote><ul><li><p>@vue&#x2F;cli是Vue官方提供的一个全局模块包(得到vue命令), 此包用于创建脚手架项目</p><p>脚手架是为了保证各施工过程顺利进行而搭设的工作平台</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-15-02-1586936282638-4d64da.png" alt="1586936282638"></p><blockquote><h3 id="vue-cli的好处"><a href="#vue-cli的好处" class="headerlink" title="@vue&#x2F;cli的好处"></a>@vue&#x2F;cli的好处</h3></blockquote><ul><li><p>开箱即用</p><p>0配置webpack</p><p>babel支持</p><p>css, less支持</p><p>开发服务器支持</p></li></ul><h3 id="2-1-vue-cli安装"><a href="#2-1-vue-cli安装" class="headerlink" title="2.1_@vue&#x2F;cli安装"></a>2.1_@vue&#x2F;cli安装</h3><blockquote><p>目标: 把@vue&#x2F;cli模块包按到全局, 电脑拥有vue命令, 才能创建脚手架工程</p></blockquote><ul><li>全局安装命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn global add @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>注意: 如果半天没动静(95%都是网速问题), 可以ctrl c </p><ol><li><p>停止重新来</p></li><li><p>换一个网继续重来</p></li></ol><ul><li>查看<code>vue</code>脚手架版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure><blockquote><p>总结: 如果出现版本号就安装成功, 否则失败</p></blockquote><h3 id="2-2-vue-cli-创建项目启动服务"><a href="#2-2-vue-cli-创建项目启动服务" class="headerlink" title="2.2_@vue&#x2F;cli 创建项目启动服务"></a>2.2_@vue&#x2F;cli 创建项目启动服务</h3><blockquote><p>目标: 使用vue命令, 创建脚手架项目</p></blockquote><p>&#x3D;&#x3D;注意: 项目名不能带大写字母, 中文和特殊符号&#x3D;&#x3D;</p><ol><li>创建项目</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vue和create是命令, vuecli-demo是文件夹名</span></span><br><span class="line">vue create vuecli-demo</span><br></pre></td></tr></table></figure><ol start="2"><li><p>选择模板</p><p>&#x3D;&#x3D;可以上下箭头选择, 弄错了ctrl+c重来&#x3D;&#x3D;</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-16-07-image-20210116230221236-c34508.png" alt="image-20210116230221236"></p><p>​ 选择用什么方式下载脚手架项目需要的依赖包<img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-16-09-Snipaste_2021-03-26_15-24-14-e2d9b0.png" alt="Snipaste_2021-03-26_15-24-14"></p><ol start="3"><li>回车等待生成项目文件夹+文件+下载必须的第三方包们</li></ol><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-16-14-image-20210212174314768-e6d6ec.png" alt="image-20210212174314768"></p><ol start="4"><li>进入脚手架项目下, 启动内置的热更新本地服务器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vuecil-demo</span><br><span class="line"></span><br><span class="line">npm run serve</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure><p>只要看到绿色的 - 啊. 你成功了(底层node+webpack热更新服务)</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-16-33-image-20210116231815543-6ad27c.png" alt="image-20210116231815543"></p><p>打开浏览器输入上述地址</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-16-36-image-20210116233035582-456966.png" alt="image-20210116233035582"></p><blockquote><p>总结: vue命令创建工程目录, 项目内置webpack本地热更新服务器, 帮我们打包项目预览项目</p></blockquote><h3 id="2-3-vue-cli-目录和代码分析"><a href="#2-3-vue-cli-目录和代码分析" class="headerlink" title="2.3 @vue&#x2F;cli 目录和代码分析"></a>2.3 @vue&#x2F;cli 目录和代码分析</h3><blockquote><p>目标: 讲解重点文件夹, 文件的作用, 以及文件里代码的意思</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vuecil-demo        <span class="comment"># 项目目录</span></span><br><span class="line">   ├── node_modules <span class="comment"># 项目依赖的第三方包</span></span><br><span class="line">   ├── public       <span class="comment"># 静态文件目录</span></span><br><span class="line">     ├── favicon.ico<span class="comment"># 浏览器小图标</span></span><br><span class="line">     └── index.html <span class="comment"># 单页面的html文件(网页浏览的是它)</span></span><br><span class="line">   ├── src          <span class="comment"># 业务文件夹</span></span><br><span class="line">     ├── assets     <span class="comment"># 静态资源</span></span><br><span class="line">       └── logo.png <span class="comment"># vue的logo图片</span></span><br><span class="line">     ├── components <span class="comment"># 组件目录</span></span><br><span class="line">       └── HelloWorld.vue <span class="comment"># 欢迎页面vue代码文件 </span></span><br><span class="line">     ├── App.vue    <span class="comment"># 整个应用的根组件</span></span><br><span class="line">     └── main.js    <span class="comment"># 入口js文件</span></span><br><span class="line">   ├── .gitignore   <span class="comment"># git提交忽略配置</span></span><br><span class="line">   ├── babel.config.js  <span class="comment"># babel配置</span></span><br><span class="line">   ├── package.json  <span class="comment"># 依赖包列表</span></span><br><span class="line">   ├── README.md    <span class="comment"># 项目说明</span></span><br><span class="line">└── yarn.lock    <span class="comment"># 项目包版本锁定和缓存地址</span></span><br></pre></td></tr></table></figure><p>主要文件及含义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node_modules下都是下载的第三方包</span><br><span class="line">public/index.<span class="property">html</span> – 浏览器运行的网页</span><br><span class="line">src/main.<span class="property">js</span> – webpack打包的入口文件</span><br><span class="line">src/<span class="title class_">App</span>.<span class="property">vue</span> – vue项目入口页面</span><br><span class="line">package.<span class="property">json</span> – 依赖包列表文件</span><br></pre></td></tr></table></figure><h3 id="2-4-vue-cli-项目架构了解"><a href="#2-4-vue-cli-项目架构了解" class="headerlink" title="2.4_@vue&#x2F;cli 项目架构了解"></a>2.4_@vue&#x2F;cli 项目架构了解</h3><blockquote><p>目标: 知道项目入口, 以及代码执行顺序和引入关系</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-17-04-image-20210317201811310-5a3c2a.png" alt="image-20210317201811310"></p><h3 id="2-5-vue-cli-自定义配置"><a href="#2-5-vue-cli-自定义配置" class="headerlink" title="2.5_@vue&#x2F;cli 自定义配置"></a>2.5_@vue&#x2F;cli 自定义配置</h3><blockquote><p>目标：项目中没有webpack.config.js文件，因为@vue&#x2F;cli用的vue.config.js</p></blockquote><p>src并列处新建vue.config.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 覆盖webpack的配置 */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123; <span class="comment">// 自定义服务配置</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-eslint了解"><a href="#2-6-eslint了解" class="headerlink" title="2.6_eslint了解"></a>2.6_eslint了解</h3><blockquote><p>目标: 知道eslint的作用, 和如何暂时关闭, 它是一个&#x3D;&#x3D;代码检查工具&#x3D;&#x3D;</p></blockquote><p>例子: 先在main.js 随便声明个变量, 但是不要使用</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-17-33-image-20210326165406694-b51b3c.png" alt="image-20210326165406694"></p><p>观察发现, 终端和页面都报错了</p><p>&#x3D;&#x3D;记住以后见到这样子的错误, 证明你的代码不严谨&#x3D;&#x3D;</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-17-35-image-20210326165544865-4c948c.png" alt="image-20210326165544865"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-17-40-image-20210326165606191-ba11d3.png" alt="image-20210326165606191"></p><p>方式1: 手动解决掉错误, 以后项目中会讲如何自动解决</p><p>方式2: 暂时关闭eslint检查(因为现在主要精力在学习Vue语法上), 在vue.config.js中配置后重启服务</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-17-46-image-20210511112152702-e0a63c.png" alt="image-20210511112152702"></p><h3 id="2-7-vue-cli-单vue文件讲解"><a href="#2-7-vue-cli-单vue文件讲解" class="headerlink" title="2.7_@vue&#x2F;cli 单vue文件讲解"></a>2.7_@vue&#x2F;cli 单vue文件讲解</h3><blockquote><p>目标: 单vue文件好处, 独立作用域互不影响</p></blockquote><p>Vue推荐采用.vue文件来开发项目</p><p>template里只能有一个根标签</p><p>vue文件-独立模块-作用域互不影响</p><p>style配合scoped属性, 保证样式只针对当前template内标签生效</p><p>vue文件配合webpack, 把他们打包起来插入到index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- template必须, 只能有一个根标签, 影响渲染到页面的标签结构 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;欢迎使用vue&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- js相关 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 当前组件的样式, 设置scoped, 可以保证样式只对当前页面有效 --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终: Vue文件配合webpack, 把他们打包起来插入到index.html, 然后在浏览器运行</p><h3 id="2-8-vue-cli-欢迎界面清理"><a href="#2-8-vue-cli-欢迎界面清理" class="headerlink" title="2.8_@vue&#x2F;cli 欢迎界面清理"></a>2.8_@vue&#x2F;cli 欢迎界面清理</h3><blockquote><p>目标: 我们开始写我们自己的代码, 无需欢迎页面</p></blockquote><ul><li>src&#x2F;App.vue默认有很多内容, 可以全部删除留下框</li><li>assets 和 components 文件夹下的一切都删除掉 (不要默认的欢迎页面)</li></ul><h2 id="3-Vue指令"><a href="#3-Vue指令" class="headerlink" title="&#x3D;&#x3D;3. Vue指令&#x3D;&#x3D;"></a>&#x3D;&#x3D;3. Vue指令&#x3D;&#x3D;</h2><h3 id="3-0-vue基础-插值表达式"><a href="#3-0-vue基础-插值表达式" class="headerlink" title="3.0_vue基础-插值表达式"></a>3.0_vue基础-插值表达式</h3><blockquote><p>目的: 在dom标签中, 直接插入内容</p></blockquote><p>又叫: 声明式渲染&#x2F;文本插值</p><p>语法: </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; obj.age &gt; 18 ? &#x27;成年&#x27; : &#x27;未成年&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123; <span class="comment">// 格式固定, 定义vue数据之处</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;  <span class="comment">// key相当于变量名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&quot;hello, vue&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">obj</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;小vue&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>: <span class="number">5</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结: dom中插值表达式赋值, vue的变量必须在data里声明</p></blockquote><h3 id="3-1-vue基础-MVVM设计模式"><a href="#3-1-vue基础-MVVM设计模式" class="headerlink" title="3.1_vue基础-MVVM设计模式"></a>3.1_vue基础-MVVM设计模式</h3><blockquote><p>目的: 转变思维, 用数据驱动视图改变, 操作dom的事, vue源码内干了</p></blockquote><p>设计模式: 是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。</p><p>演示: 在上个代码基础上, 在devtool工具改变M层的变量, 观察V层(视图的自动同步)</p><p>等下面学了v-model再观察V改变M的效果</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-18-23-1-72de75.gif" alt="1"></p><ul><li>MVVM，一种软件架构模式，决定了写代码的思想和层次<ul><li>M：   model数据模型          (data里定义)</li><li>V：    view视图                   （html页面）</li><li>VM： ViewModel视图模型  (vue.js源码)</li></ul></li></ul><ul><li>MVVM通过<code>数据双向绑定</code>让数据自动地双向同步  <strong>不再需要操作DOM</strong><ul><li>V（修改视图） -&gt; M（数据自动同步）</li><li>M（修改数据） -&gt; V（视图自动同步）</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-18-57-MVVM-cb1cfc.png"></p><p><strong>1. 在vue中，不推荐直接手动操作DOM！！！</strong>  </p><p><strong>2. 在vue中，通过数据驱动视图，不要在想着怎么操作DOM，而是想着如何操作数据！！</strong>(思想转变)</p><p><img src="/images/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.png"></p><blockquote><p>总结: vue源码内采用MVVM设计模式思想, 大大减少了DOM操作, 提高开发效率</p></blockquote><h3 id="3-2-vue指令-v-bind"><a href="#3-2-vue指令-v-bind" class="headerlink" title="3.2_vue指令-v-bind"></a>3.2_vue指令-v-bind</h3><blockquote><p>目标: 给标签属性设置vue变量的值</p></blockquote><p><strong>vue指令, 实质上就是特殊的 html 标签属性, 特点:  v- 开头</strong></p><p>每个指令, 都有独立的作用</p><ul><li>语法：<code>v-bind:属性名=&quot;vue变量&quot;</code></li><li>简写：<code>:属性名=&quot;vue变量&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue指令-v-bind属性动态赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>我是a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结: 把vue变量的值, 赋予给dom属性上, 影响标签显示效果</p></blockquote><h3 id="3-3-vue指令-v-on"><a href="#3-3-vue指令-v-on" class="headerlink" title="3.3_vue指令-v-on"></a>3.3_vue指令-v-on</h3><blockquote><p>目标: 给标签绑定事件</p></blockquote><ul><li>语法<ul><li>v-on:事件名&#x3D;”要执行的&#x3D;&#x3D;少量代码&#x3D;&#x3D;”</li><li>v-on:事件名&#x3D;”methods中的函数”</li><li>v-on:事件名&#x3D;”methods中的函数(实参)”</li></ul></li><li>简写: @事件名&#x3D;”methods中的函数”</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue指令:   v-on事件绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你要买商品的数量: &#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count = count + 1&quot;</span>&gt;</span>增加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addFn&quot;</span>&gt;</span>增加1个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCountFn(5)&quot;</span>&gt;</span>一次加5件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;subFn&quot;</span>&gt;</span>减少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ...其他省略</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addFn</span>(<span class="params"></span>)&#123; <span class="comment">// this代表export default后面的组件对象(下属有data里return出来的属性)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addCountFn</span>(<span class="params">num</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> += num</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">subFn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>--</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结: 常用@事件名, 给dom标签绑定事件, 以及&#x3D;右侧事件处理函数</p></blockquote><h3 id="3-4-vue指令-v-on事件对象"><a href="#3-4-vue指令-v-on事件对象" class="headerlink" title="3.4_vue指令-v-on事件对象"></a>3.4_vue指令-v-on事件对象</h3><blockquote><p>目标: vue事件处理函数中, 拿到事件对象</p></blockquote><ul><li>语法:<ul><li>无传参, 通过形参直接接收</li><li>传参, 通过$event指代事件对象传给事件处理函数</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;a @click=&quot;one&quot; href=&quot;http://www.baidu.com&quot;&gt;阻止百度&lt;/a&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;a @click=&quot;two(10, $event)&quot; href=&quot;http://www.baidu.com&quot;&gt;阻止去百度&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    one(e)&#123;</span><br><span class="line">      e.preventDefault()</span><br><span class="line">    &#125;,</span><br><span class="line">    two(num, e)&#123;</span><br><span class="line">      e.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-5-vue指令-v-on修饰符"><a href="#3-5-vue指令-v-on修饰符" class="headerlink" title="3.5_vue指令-v-on修饰符"></a>3.5_vue指令-v-on修饰符</h3><blockquote><p>目的: 在事件后面.修饰符名 - 给事件带来更强大的功能</p></blockquote><ul><li>语法:<ul><li>@事件名.修饰符&#x3D;”methods里函数”<ul><li>.stop - 阻止事件冒泡</li><li>.prevent - 阻止默认行为</li><li>.once - 程序运行期间, 只触发一次事件处理函数</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;fatherFn&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue对事件进行了修饰符设置, 在事件后面.修饰符名即可使用更多的功能 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>.stop阻止事件冒泡<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>.prevent阻止默认行为<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>.once程序运行期间, 只触发一次事件处理函数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fatherFn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;father被触发&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">btn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结: 修饰符给事件扩展额外功能</p></blockquote><h3 id="3-6-vue指令-v-on按键修饰符"><a href="#3-6-vue指令-v-on按键修饰符" class="headerlink" title="3.6_vue指令-v-on按键修饰符"></a>3.6_vue指令-v-on按键修饰符</h3><blockquote><p>目标: 给键盘事件, 添加修饰符, 增强能力</p></blockquote><ul><li>语法:<ul><li>@keyup.enter  -  监测回车按键</li><li>@keyup.esc     -   监测返回按键</li></ul></li></ul><p><a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">更多修饰符</a> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;enterFn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keydown.esc</span>=<span class="string">&quot;escFn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"> <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">enterFn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;enter回车按键了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   &#125;,</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">escFn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;esc按键了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结: 多使用事件修饰符, 可以提高开发效率, 少去自己判断过程</p></blockquote><h3 id="3-7-课上练习-翻转世界"><a href="#3-7-课上练习-翻转世界" class="headerlink" title="3.7_课上练习-翻转世界"></a>3.7_课上练习-翻转世界</h3><blockquote><p>目标: 点击按钮 - 把文字取反显示 - 再点击取反显示(回来了)</p></blockquote><blockquote><p>提示: 把字符串取反赋予回去</p></blockquote><p>效果演示:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-20-07-2.8.0_%E7%BB%83%E4%B9%A0_%E7%BF%BB%E8%BD%AC%E4%B8%96%E7%95%8C-0a3fd7.gif" alt="练习1_翻转世界"></p><p>正确代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>逆转世界<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;HELLO, WORLD&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">btn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结: 记住方法特点, 多做需求, vue是数据变化视图自动更新, 减少操作DOM时间, 提高开发效率</p></blockquote><h3 id="3-8-vue指令-v-model"><a href="#3-8-vue指令-v-model" class="headerlink" title="3.8_vue指令 v-model"></a>3.8_vue指令 v-model</h3><blockquote><p>目标: 把value属性和vue数据变量, 双向绑定到一起</p></blockquote><ul><li>语法: v-model&#x3D;”vue数据变量”</li><li>双向数据绑定<ul><li>数据变化 -&gt; 视图自动同步</li><li>视图变化 -&gt; 数据自动同步</li></ul></li><li>演示: 用户名绑定 - vue内部是MVVM设计模式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">    v-model:是实现vuejs变量和表单标签value属性, 双向绑定的指令</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;用户名:&lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;username&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;密码:&lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;password&quot; v-model=&quot;pass&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;来自于: &lt;/span&gt;</span><br><span class="line">      &lt;!-- 下拉菜单要绑定在select上 --&gt;</span><br><span class="line">      &lt;select v-model=&quot;from&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;北京市&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;南京市&quot;&gt;南京&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;天津市&quot;&gt;天津&lt;/option&gt;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;!-- (重要)</span><br><span class="line">      遇到复选框, v-model的变量值</span><br><span class="line">      非数组 - 关联的是复选框的checked属性</span><br><span class="line">      数组   - 关联的是复选框的value属性</span><br><span class="line">       --&gt;</span><br><span class="line">      &lt;span&gt;爱好: &lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;抽烟&quot;&gt;抽烟</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;喝酒&quot;&gt;喝酒</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;写代码&quot;&gt;写代码</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;性别: &lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;radio&quot; value=&quot;男&quot; name=&quot;sex&quot; v-model=&quot;gender&quot;&gt;男</span><br><span class="line">      &lt;input type=&quot;radio&quot; value=&quot;女&quot; name=&quot;sex&quot; v-model=&quot;gender&quot;&gt;女</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;自我介绍&lt;/span&gt;</span><br><span class="line">      &lt;textarea v-model=&quot;intro&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      username: &quot;&quot;,</span><br><span class="line">      pass: &quot;&quot;,</span><br><span class="line">      from: &quot;&quot;,</span><br><span class="line">      hobby: [], </span><br><span class="line">      sex: &quot;&quot;,</span><br><span class="line">      intro: &quot;&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">    // 总结:</span><br><span class="line">    // 特别注意: v-model, 在input[checkbox]的多选框状态</span><br><span class="line">    // 变量为非数组, 则绑定的是checked的属性(true/false) - 常用于: 单个绑定使用</span><br><span class="line">    // 变量为数组, 则绑定的是他们的value属性里的值 - 常用于: 收集勾选了哪些值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 本阶段v-model只能用在表单元素上, 以后学组件后讲v-model高级用法</p></blockquote><h3 id="3-9-vue指令-v-model修饰符"><a href="#3-9-vue指令-v-model修饰符" class="headerlink" title="3.9_vue指令 v-model修饰符"></a>3.9_vue指令 v-model修饰符</h3><blockquote><p>目标: 让v-model拥有更强大的功能</p></blockquote><ul><li>语法:<ul><li>v-model.修饰符&#x3D;”vue数据变量”<ul><li>.number   以parseFloat转成数字类型</li><li>.trim          去除首尾空白字符</li><li>.lazy           在change时触发而非inupt时</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;年龄:&lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model.number=&quot;age&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;人生格言:&lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model.trim=&quot;motto&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;自我介绍:&lt;/span&gt;</span><br><span class="line">      &lt;textarea v-model.lazy=&quot;intro&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      age: &quot;&quot;,</span><br><span class="line">      motto: &quot;&quot;,</span><br><span class="line">      intro: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: v-model修饰符, 可以对值进行预处理, 非常高效好用</p></blockquote><h3 id="3-10-vue指令-v-text和v-html"><a href="#3-10-vue指令-v-text和v-html" class="headerlink" title="3.10_vue指令 v-text和v-html"></a>3.10_vue指令 v-text和v-html</h3><blockquote><p>目的: 更新DOM对象的innerText&#x2F;innerHTML</p></blockquote><ul><li>语法:<ul><li>v-text&#x3D;”vue数据变量”    </li><li>v-html&#x3D;”vue数据变量”</li></ul></li><li>注意: 会覆盖插值表达式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p v-text=&quot;str&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p v-html=&quot;str&quot;&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      str: &quot;&lt;span&gt;我是一个span标签&lt;/span&gt;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: v-text把值当成普通字符串显示, v-html把值当做html解析</p></blockquote><h3 id="3-11-vue指令-v-show和v-if"><a href="#3-11-vue指令-v-show和v-if" class="headerlink" title="3.11_vue指令 v-show和v-if"></a>3.11_vue指令 v-show和v-if</h3><blockquote><p>目标: 控制标签的隐藏或出现</p></blockquote><ul><li>语法:<ul><li>v-show&#x3D;”vue变量”            </li><li>v-if&#x3D;”vue变量”</li></ul></li><li>原理<ul><li>v-show 用的display:none隐藏   (频繁切换使用)</li><li>v-if  直接从DOM树上移除</li></ul></li><li>高级<ul><li>v-else使用</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isOk&quot;</span>&gt;</span>v-show的盒子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;isOk&quot;</span>&gt;</span>v-if的盒子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;age &gt; 18&quot;</span>&gt;</span>我成年了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>还得多吃饭<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isOk</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">15</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结: 使用v-show和v-if以及v-else指令, 方便通过变量控制一套标签出现&#x2F;隐藏</p></blockquote><h3 id="3-12-案例-折叠面板"><a href="#3-12-案例-折叠面板" class="headerlink" title="3.12_案例-折叠面板"></a>3.12_案例-折叠面板</h3><blockquote><p>目标: 点击展开或收起时，把内容区域显示或者隐藏</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-20-19-%E6%A1%88%E4%BE%8B_%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF-0425aa.gif" alt="案例_折叠面板"></p><p>此案例使用了less语法, 项目中下载模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add less@3.0.4 less-loader@5.0.0 -D</span><br></pre></td></tr></table></figure><p>只有标签和样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">        &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">        &lt;span class=&quot;btn&quot; &gt;</span><br><span class="line">          收起</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;p&gt;寒雨连江夜入吴,&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background-color: #ccc;</span><br><span class="line">  #app &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border: 4px solid blueviolet;</span><br><span class="line">    border-radius: 1em;</span><br><span class="line">    box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.5);</span><br><span class="line">    padding: 1em 2em 2em;</span><br><span class="line">    h3 &#123;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    .title &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: space-between;</span><br><span class="line">      align-items: center;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      padding: 0 1em;</span><br><span class="line">    &#125;</span><br><span class="line">    .title h4 &#123;</span><br><span class="line">      line-height: 2;</span><br><span class="line">      margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .container &#123;</span><br><span class="line">      border: 1px solid #ccc;</span><br><span class="line">      padding: 0 1em;</span><br><span class="line">    &#125;</span><br><span class="line">    .btn &#123;</span><br><span class="line">      /* 鼠标改成手的形状 */</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>正确答案:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">        &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">        &lt;span class=&quot;btn&quot; @click=&quot;isShow = !isShow&quot;&gt;</span><br><span class="line">          &#123;&#123; isShow ? &#x27;收起&#x27; : &#x27;展开&#x27; &#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;container&quot; v-show=&quot;isShow&quot;&gt;</span><br><span class="line">        &lt;p&gt;寒雨连江夜入吴, &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-13-vue指令-v-for"><a href="#3-13-vue指令-v-for" class="headerlink" title="3.13_vue指令-v-for"></a>3.13_vue指令-v-for</h3><blockquote><p>目标: 列表渲染, 所在标签结构, 按照数据数量, 循环生成</p></blockquote><ul><li><p>语法</p><ul><li>v-for&#x3D;”(值, 索引) in 目标结构”</li><li>v-for&#x3D;”值 in 目标结构”</li></ul></li><li><p>目标结构:</p><ul><li>可以遍历数组 &#x2F; 对象 &#x2F; 数字 &#x2F; 字符串 (可遍历结构)</li></ul></li><li><p>注意:</p><p>v-for的临时变量名不能用到v-for范围外</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;!-- v-for 把一组数据, 渲染成一组DOM --&gt;</span><br><span class="line">      &lt;!-- 口诀: 让谁循环生成, v-for就写谁身上 --&gt;</span><br><span class="line">      &lt;p&gt;学生姓名&lt;/p&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(item, index) in arr&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">          &#123;&#123; index &#125;&#125; - &#123;&#123; item &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;学生详细信息&lt;/p&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;obj in stuArr&quot; :key=&quot;obj.id&quot;&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; obj.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; obj.sex &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; obj.hobby &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- v-for遍历对象(了解) --&gt;</span><br><span class="line">      &lt;p&gt;老师信息&lt;/p&gt;</span><br><span class="line">      &lt;div v-for=&quot;(value, key) in tObj&quot; :key=&quot;value&quot;&gt;</span><br><span class="line">        &#123;&#123; key &#125;&#125; -- &#123;&#123; value &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- v-for遍历整数(了解) - 从1开始 --&gt;</span><br><span class="line">      &lt;p&gt;序号&lt;/p&gt;</span><br><span class="line">      &lt;div v-for=&quot;i in count&quot; :key=&quot;i&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      arr: [&quot;小明&quot;, &quot;小欢欢&quot;, &quot;大黄&quot;],</span><br><span class="line">      stuArr: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1001,</span><br><span class="line">          name: &quot;孙悟空&quot;,</span><br><span class="line">          sex: &quot;男&quot;,</span><br><span class="line">          hobby: &quot;吃桃子&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1002,</span><br><span class="line">          name: &quot;猪八戒&quot;,</span><br><span class="line">          sex: &quot;男&quot;,</span><br><span class="line">          hobby: &quot;背媳妇&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      tObj: &#123;</span><br><span class="line">        name: &quot;小黑&quot;,</span><br><span class="line">        age: 18,</span><br><span class="line">        class: &quot;1期&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      count: 10,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: vue最常用指令, 铺设页面利器, 快速把数据赋予到相同的dom结构上循环生成</p></blockquote><h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ul><li><input disabled="" type="checkbox"> Vue是什么</li><li><input disabled="" type="checkbox"> Vue-cli作用以及简单使用</li><li><input disabled="" type="checkbox"> 插值表达式</li><li><input disabled="" type="checkbox"> MVVM设计模式</li><li><input disabled="" type="checkbox"> v-bind作用</li><li><input disabled="" type="checkbox"> v-on作用和事件对象以及修饰符使用</li><li><input disabled="" type="checkbox"> v-model的作用以及双向数据绑定解释</li><li><input disabled="" type="checkbox"> v-if和v-show的区别和本质</li><li><input disabled="" type="checkbox"> v-for的作用和使用</li><li><input disabled="" type="checkbox"> vue的特点<ul><li>渐进式</li><li>声明式渲染</li><li>数据驱动视图 (响应式)</li><li>极少的去写DOM操作相关代码</li><li>双向绑定</li><li>组件系统</li><li>不兼容IE8及以下浏览器</li></ul></li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1-Vue的最大优势是什么"><a href="#1-Vue的最大优势是什么" class="headerlink" title="1. Vue的最大优势是什么?"></a>1. Vue的最大优势是什么?</h3><p>​简单易学, 轻量级整个源码js文件不大, 双向数据绑定, 数据驱动视图, 组件化, 数据和视图分离, </p><p>​vue负责关联视图和数据, 作者中国人(尤雨溪), 文档都是中文的, 入门教程非常多, 上手简单. </p><p>​相比传统网页, vue是单页面可以只刷新某一部分</p><h3 id="2-Vue和jQuery区别是什么"><a href="#2-Vue和jQuery区别是什么" class="headerlink" title="2. Vue和jQuery区别是什么?"></a>2. Vue和jQuery区别是什么?</h3><p>​jQuery应该算是一个插件, 里面封装了各种易用的方法, 方便你使用更少的代码来操作dom标签</p><p>​Vue是一套框架, 有自己的规则和体系与语法, 特别是设计思想MVVM, 让数据和视频关联绑定, 省略了很多DOM操作. 然后指令还给标签注入了更多的功能</p><h3 id="3-mvvm和mvc区别是什么"><a href="#3-mvvm和mvc区别是什么" class="headerlink" title="3. mvvm和mvc区别是什么?"></a>3. mvvm和mvc区别是什么?</h3><p>​MVC: 也是一种设计模式, 组织代码的结构, 是model数据模型, view视图, Controller控制器, 在控制器这层里编写js代码, 来控制数据和视图关联</p><p>​MVVM: 即Model-View-ViewModel的简写。即模型-视图-视图模型, VM是这个设计模式的核心, 连接v和m的桥梁, 内部会监听DOM事件, 监听数据对象变化来影响对方. 我们称之为数据绑定</p><h3 id="4-Vue常用修饰符有哪些"><a href="#4-Vue常用修饰符有哪些" class="headerlink" title="4. Vue常用修饰符有哪些?"></a>4. Vue常用修饰符有哪些?</h3><p>​    .prevent: 提交事件不再重载页面；</p><p>​.stop: 阻止单击事件冒泡；</p><p>​.once: 只执行一次这个事件</p><h3 id="5-Vue2-x兼容IE哪个版本以上"><a href="#5-Vue2-x兼容IE哪个版本以上" class="headerlink" title="5. Vue2.x兼容IE哪个版本以上"></a>5. Vue2.x兼容IE哪个版本以上</h3><p>​不支持ie8及以下，部分兼容ie9 ，完全兼容10以上， 因为vue的响应式原理是基于es5的Object.defineProperty(),而这个方法不支持ie8及以下。</p><h3 id="6-对Vue渐进式的理解"><a href="#6-对Vue渐进式的理解" class="headerlink" title="6. 对Vue渐进式的理解"></a>6. 对Vue渐进式的理解</h3><p>​渐进式代表的含义是：主张最少, 自底向上, 增量开发, 组件集合, 便于复用</p><h3 id="7-v-show和v-if的区别"><a href="#7-v-show和v-if的区别" class="headerlink" title="7. v-show和v-if的区别"></a>7. v-show和v-if的区别</h3><p>​v-show和v-if的区别? 分别说明其使用场景?</p><p>​v-show 和v-if都是true的时候显示，false的时候隐藏</p><p>​但是：false的情况下，</p><p>​v-show是采用的display:none   </p><p>​v-if采用惰性加载</p><p>​如果需要频繁切换显示隐藏需要使用v-show</p><h3 id="8-说出至少4个Vue指令及作用"><a href="#8-说出至少4个Vue指令及作用" class="headerlink" title="8. 说出至少4个Vue指令及作用"></a>8. 说出至少4个Vue指令及作用</h3><p>​v-for 根据数组的个数, 循环数组元素的同时还生成所在的标签</p><p>​v-show 显示内容</p><p>​v-if    显示与隐藏  </p><p>​v-else  必须和v-if连用  不能单独使用  否则报错  </p><p>​v-bind  动态绑定  作用： 及时对页面的数据进行更改, 可以简写成:分号</p><p>​v-on  给标签绑定函数，可以缩写为@，例如绑定一个点击函数  函数必须写在methods里面</p><p>​v-text  解析文本</p><p>​v-html   解析html标签</p><h3 id="9-为什么避免v-for和v-if在一起使用"><a href="#9-为什么避免v-for和v-if在一起使用" class="headerlink" title="9. 为什么避免v-for和v-if在一起使用"></a>9. 为什么避免v-for和v-if在一起使用</h3><p>​Vue 处理指令时，v-for 比 v-if 具有更高的优先级, 虽然用起来也没报错好使, 但是性能不高, 如果你有5个元素被v-for循环, v-if也会分别执行5次.</p><h2 id="附加练习-1-帅哥美女走一走"><a href="#附加练习-1-帅哥美女走一走" class="headerlink" title="附加练习-1.帅哥美女走一走"></a>附加练习-1.帅哥美女走一走</h2><blockquote><p>目标: 点击按钮, 改变3个li的顺序, 在头上的就到末尾.</p></blockquote><blockquote><p>提示: 操作数组里的顺序, v-for就会重新渲染li</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-21-01-2.8.1_%E7%BB%83%E4%B9%A0_%E5%B8%85%E5%93%A5%E7%BE%8E%E5%A5%B3%E8%B5%B0%E4%B8%80%E8%B5%B0-583a1c.gif" alt="练习2_改变数组顺序_影响vfor指令的标签"></p><p>正确代码(&#x3D;&#x3D;先不要看&#x3D;&#x3D;)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in myArr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>走一走<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">myArr</span>: [<span class="string">&quot;帅哥&quot;</span>, <span class="string">&quot;美女&quot;</span>, <span class="string">&quot;程序猿&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">btn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 头部数据加入到末尾</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">myArr</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">myArr</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 再把头部的数据删除掉</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">myArr</span>.<span class="title function_">shift</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="附加练习-2-加加减减"><a href="#附加练习-2-加加减减" class="headerlink" title="附加练习-2.加加减减"></a>附加练习-2.加加减减</h2><blockquote><p>目标: 点击生成按钮, 新增一个li(随机数字)和删除按钮, 点击删除按钮, 删除对应的li和值</p></blockquote><blockquote><p>提示: 数组渲染列表, 生成和删除都围绕数组操作</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-21-51-2.8.2_%E7%BB%83%E4%B9%A0_%E4%BA%BA%E7%94%9F%E5%8A%A0%E5%8A%A0%E5%87%8F%E5%87%8F-d56998.gif" alt="练习3_点击生成_点击删除"></p><p>正确代码:(&#x3D;&#x3D;先不要看&#x3D;&#x3D;)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, ind) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(ind)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>生成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">20</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">del</span>(<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="附加练习-3-购物车"><a href="#附加练习-3-购物车" class="headerlink" title="附加练习-3.购物车"></a>附加练习-3.购物车</h2><blockquote><p>目标: 完成商品浏览和删除功能, 当无数据给用户提示</p></blockquote><ul><li>需求1: 根据给的初始数据, 把购物车页面铺设出来</li><li>需求2: 点击对应删除按钮, 删除对应数据</li><li>需求3: 当数据没有了, 显示一条提示消息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-22-01-3.0_%E6%A1%88%E4%BE%8B_%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%88%A0%E9%99%A4_%E5%B9%B2%E5%87%80%E4%BA%86%E8%BF%98%E6%9C%89%E6%8F%90%E7%A4%BA-2a12b1.gif" alt="3.0_案例_购物车删除_干净了还有提示"></p><p>html+css和数据代码结构(&#x3D;&#x3D;可复制接着写&#x3D;&#x3D;)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;table class=&quot;tb&quot;&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;创立时间&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;!-- 循环渲染的元素tr --&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;车名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;2020-08-09&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;button&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td colspan=&quot;4&quot;&gt;没有数据咯~&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123; id: 1, name: &quot;奔驰&quot;, time: &quot;2020-08-01&quot; &#125;,</span><br><span class="line">        &#123; id: 2, name: &quot;宝马&quot;, time: &quot;2020-08-02&quot; &#125;,</span><br><span class="line">        &#123; id: 3, name: &quot;奥迪&quot;, time: &quot;2020-08-03&quot; &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  width: 600px;</span><br><span class="line">  margin: 10px auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tb &#123;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tb th &#123;</span><br><span class="line">  background-color: #0094ff;</span><br><span class="line">  color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tb td,</span><br><span class="line">.tb th &#123;</span><br><span class="line">  padding: 5px;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.add &#123;</span><br><span class="line">  padding: 5px;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正确代码(&#x3D;&#x3D;先不要看&#x3D;&#x3D;)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;table class=&quot;tb&quot;&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;创立时间&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;!-- 循环渲染的元素tr --&gt;</span><br><span class="line">      &lt;tr v-for=&quot;(item,index) in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.time&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;button @click=&quot;del(index)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;tr v-if=&quot;list.length === 0&quot;&gt;</span><br><span class="line">        &lt;td colspan=&quot;4&quot;&gt;没有数据咯~&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123; id: 1, name: &quot;奔驰&quot;, time: &quot;2020-08-01&quot; &#125;,</span><br><span class="line">        &#123; id: 2, name: &quot;宝马&quot;, time: &quot;2020-08-02&quot; &#125;,</span><br><span class="line">        &#123; id: 3, name: &quot;奥迪&quot;, time: &quot;2020-08-03&quot; &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    del(index) &#123;</span><br><span class="line">      // 删除按钮 - 得到索引, 删除数组里元素</span><br><span class="line">      this.list.splice(index, 1);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h2><p>课上案例先来一遍</p><h3 id="作业1-逛水果店"><a href="#作业1-逛水果店" class="headerlink" title="作业1-逛水果店"></a>作业1-逛水果店</h3><p>从0开始新建一个vuecli脚手架项目</p><p>本店收银系统采用vue开发, 冲这点, 你不来买点试试?</p><p>先看效果 - 无css(你想美化下, 你就写点哈哈)</p><blockquote><p>提示: v-model&#x3D;”变量” 输入框的值会绑定给vue的这个变量(别忘了在data里先声明哦)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-22-10-Day01_%E4%BD%9C%E4%B8%9A_%E4%B9%B0%E6%B0%B4%E6%9E%9C-769157.gif" alt="Day01_作业_买水果"></p><p>只要你实现了功能 你就是对的 (只不过每个程序员的想法都不太一样)</p><h3 id="作业2-选择喜欢的"><a href="#作业2-选择喜欢的" class="headerlink" title="作业2-选择喜欢的"></a>作业2-选择喜欢的</h3><p>目标: 用户选择栏目, 把用户选中的栏目信息在下面列表显示出来</p><blockquote><p>提示: vue变量是数组类型, 绑定在checkbox标签上</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据在这里</span></span><br><span class="line">[<span class="string">&quot;科幻&quot;</span>, <span class="string">&quot;喜剧&quot;</span>, <span class="string">&quot;动漫&quot;</span>, <span class="string">&quot;冒险&quot;</span>, <span class="string">&quot;科技&quot;</span>, <span class="string">&quot;军事&quot;</span>, <span class="string">&quot;娱乐&quot;</span>, <span class="string">&quot;奇闻&quot;</span>]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/03/00-22-12-4.9.1_%E7%BB%83%E4%B9%A0_%E9%80%89%E6%8B%A9%E5%96%9C%E6%AC%A2%E7%9A%84%E6%A0%8F%E7%9B%AE-68b95b.gif" alt="4.9.1_练习_选择喜欢的栏目"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins+Gitlab+自动发布系统</title>
      <link href="/2024/07/01/Jenkins%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2024/07/01/Jenkins%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><strong>学习目标</strong></p><ul><li><p><input checked="" disabled="" type="checkbox"> 知道jenkins应用场景</p></li><li><p><input checked="" disabled="" type="checkbox"> 能够安装部署jenkins服务器</p></li><li><p><input checked="" disabled="" type="checkbox"> 能够实现git+github+jenkins手动构建</p></li><li><p><input checked="" disabled="" type="checkbox"> 能够实现git+gitlab+jenkins自动发布系统</p></li></ul><h1 id="认识jenkins"><a href="#认识jenkins" class="headerlink" title="认识jenkins"></a>认识jenkins</h1><p>​       Jenkins是一个可扩展的持续集成引擎，是一个开源软件项目，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。Jenkins非常易于安装和配置，简单易用。</p><p>官网：<a href="https://jenkins.io/">https://jenkins.io/</a></p><h1 id="jenkins应用场景"><a href="#jenkins应用场景" class="headerlink" title="jenkins应用场景"></a>jenkins应用场景</h1><p>场景1: </p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-56-25-%E5%9C%BA%E6%99%AF1-552c2c.png" alt="1553085139748"></p><ul><li>研发人员上传开发好的代码到github代码仓库</li><li>需要将代码下载到nginx服务器部署<ul><li>运维人员手动下载再部署</li><li>运维人员使用脚本下载再部署</li></ul></li></ul><p>场景2:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-57-10-%E5%9C%BA%E6%99%AF2-ab3f9a.png" alt="1553085753649"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-57-23-%E5%9C%BA%E6%99%AF2-2-beffa8.png" alt="1553085793824"></p><h1 id="jenkins下载"><a href="#jenkins下载" class="headerlink" title="jenkins下载"></a>jenkins下载</h1><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-57-30-jenkins%E4%B8%8B%E8%BD%BD1-fa7179.png" alt="1552997312959"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-57-32-jenkins%E4%B8%8B%E8%BD%BD2-a97f1b.png" alt="1552997516046"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-57-37-jenkins%E4%B8%8B%E8%BD%BD3-9045b8.png" alt="1552997762840"></p><h1 id="jenkins安装"><a href="#jenkins安装" class="headerlink" title="jenkins安装"></a>jenkins安装</h1><p>准备一台服务器安装jenkins（我这里IP为10.1.1.13)</p><ul><li>静态IP（要求能上外网)</li><li>主机名</li><li>关闭防火墙,selinux</li><li>时间同步</li><li>确认openjdk1.8版本已经安装</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># java -version</span></span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_161&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build <span class="number">1.8</span>.<span class="number">0</span>_161<span class="literal">-b14</span>)</span><br><span class="line">OpenJDK <span class="number">64</span><span class="literal">-Bit</span> Server VM (build <span class="number">25.161</span><span class="literal">-b14</span>, mixed mode)</span><br></pre></td></tr></table></figure><p>第1步: 将下载好的软件包拷贝到jenkins服务器上直接rpm命令安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># rpm -ivh jenkins-2.150.3-1.1.noarch.rpm</span></span><br></pre></td></tr></table></figure><p>第2步: 启动服务并验证端口</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># systemctl start jenkins</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># chkconfig jenkins on</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># lsof -i:8080</span></span><br><span class="line">COMMAND  PID    USER   FD   <span class="built_in">TYPE</span> DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    <span class="number">4334</span> jenkins  <span class="number">163</span>u  IPv6  <span class="number">45095</span>      <span class="number">0</span>t0  TCP *:webcache (LISTEN)</span><br></pre></td></tr></table></figure><p>第3步: 查看密码文件里的密码(此为初始管理员用户admin的密码)。通过浏览器访问填上密码(地址为服务器ip的8080端口)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># cat /var/lib/jenkins/secrets/initialAdminPassword</span></span><br><span class="line">d750b101634b453b87deccfd06365fc9</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-58-24-jenkins%E7%95%8C%E9%9D%A21-6aa8c6.png" alt="1552918042530"></p><p>第4步: 选择安装推荐的插件(<strong>如果是offline状态,或者报错找不到XXX插件,请参考下面的插件安装小节</strong>)</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-58-26-jenkins%E7%95%8C%E9%9D%A22-29360e.png" alt="1552918596047"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-58-37-jenkins%E7%95%8C%E9%9D%A23-4d8857.png" alt="1552922174952"></p><p>第5步: 创建新管理员用户(创建了新的管理员用户后，原来的admin用户就不能用了)，也可直接使用初始管理员admin登录</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-58-39-jenkins%E7%95%8C%E9%9D%A24-78f1de.png" alt="1552922392772"></p><p>第6步:确认访问地址</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-58-43-jenkins%E7%95%8C%E9%9D%A25-cbf1cb.png" alt="1552922907022"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-58-46-jenkins%E7%95%8C%E9%9D%A26-5493bd.png" alt="1552922960030"></p><p>第7步: 进入jenkins主页面</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-23-50-jenkins%E7%95%8C%E9%9D%A27-ad6fdd.png" alt="1552923661333"></p><h2 id="退出登录的密码问题"><a href="#退出登录的密码问题" class="headerlink" title="退出登录的密码问题"></a>退出登录的密码问题</h2><p>1, log out登出后,再次登录使用admin用户, 密码为<code>cat /var/lib/jenkins/secrets/initialAdminPassword</code>得到字符串</p><p>2, 如果要修改密码,按下面图示操作:</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-58-56-jenkins%E7%9A%84admin%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B91-b26f73.png" alt="1562551310213"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/14-58-58-jenkins%E7%9A%84admin%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B92-8a37b5.png" alt="1562551428466"></p><p>3, 如果忘记密码, 按下面方法可以免出验证进行登录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># cp  /var/lib/jenkins/config.xml /备份目录/config.xml.bak</span></span><br><span class="line">先备份一下</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># vim /var/lib/jenkins/config.xml</span></span><br><span class="line">打开此文件,然后把下面的一段注释(使用&lt;!<span class="literal">--</span>  <span class="literal">--</span>&gt;来注释)或删除</span><br><span class="line"></span><br><span class="line">  <span class="number">8</span>   &lt;useSecurity&gt;true&lt;/useSecurity&gt;</span><br><span class="line">  <span class="number">9</span>   &lt;authorizationStrategy <span class="class"><span class="keyword">class</span>=&quot;<span class="title">hudson</span>.<span class="title">security</span>.<span class="title">FullControlOnceLoggedInAuthorizationStrategy</span>&quot;&gt;</span></span><br><span class="line"><span class="class"> 10     &lt;<span class="title">denyAnonymousReadAccess</span>&gt;<span class="title">true</span>&lt;/<span class="title">denyAnonymousReadAccess</span>&gt;</span></span><br><span class="line"><span class="class"> 11   &lt;/<span class="title">authorizationStrategy</span>&gt;</span></span><br><span class="line"><span class="class"> 12   &lt;<span class="title">securityRealm</span> <span class="title">class</span>=&quot;<span class="title">hudson</span>.<span class="title">security</span>.<span class="title">HudsonPrivateSecurityRealm</span>&quot;&gt;</span></span><br><span class="line"><span class="class"> 13     &lt;<span class="title">disableSignup</span>&gt;<span class="title">true</span>&lt;/<span class="title">disableSignup</span>&gt;</span></span><br><span class="line"><span class="class"> 14     &lt;<span class="title">enableCaptcha</span>&gt;<span class="title">false</span>&lt;/<span class="title">enableCaptcha</span>&gt;</span></span><br><span class="line"><span class="class"> 15   &lt;/<span class="title">securityRealm</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">[<span class="title">root</span>@<span class="title">jenkins_server</span> ~]# <span class="title">systemctl</span> <span class="title">stop</span> <span class="title">jenkins</span></span></span><br><span class="line"><span class="class">[<span class="title">root</span>@<span class="title">jenkins_server</span> ~]# <span class="title">systemctl</span> <span class="title">start</span> <span class="title">jenkins</span></span></span><br><span class="line"><span class="class">重启服务后,<span class="title">web</span>访问就不需要密码验证了</span></span><br></pre></td></tr></table></figure><h2 id="插件安装-拓展"><a href="#插件安装-拓展" class="headerlink" title="插件安装(拓展)"></a>插件安装(拓展)</h2><p>1, 因为下载插件的官方在国外,网络可能会不稳定。如果在安装插件那一步出现offline或者找不到XXX插件的报错,可以换个网络试试。或者休息一下,换个时间再试。还不行可以试试下面的方法</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># vim /var/lib/jenkins/hudson.model.UpdateCenter.xml</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&#x27;1.1&#x27;</span> encoding=<span class="string">&#x27;UTF-8&#x27;</span>?&gt;</span><br><span class="line">&lt;sites&gt;</span><br><span class="line">  &lt;site&gt;</span><br><span class="line">    &lt;id&gt;default&lt;/id&gt;</span><br><span class="line">    &lt;url&gt;https://updates.jenkins.io/<span class="built_in">update-center</span>.json&lt;/url&gt;</span><br><span class="line">  &lt;/site&gt;</span><br><span class="line">&lt;/sites&gt;</span><br><span class="line"></span><br><span class="line">把上面的https改为http的访问</span><br><span class="line">保存后重启jenkins服务再尝试</span><br></pre></td></tr></table></figure><p>2, 如果实在是无法下载插件,可以将别人下载好的插件打包给你，解压到&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;plugins&#x2F;目录。需要重启jenkins服务,才能在web界面读取到解压的插件。</p><p>3, 可以在下面地址下载插件(插件为.hpi结尾的文件), 然后上传到jenkins.(这种方法适合单个插件安装)</p><p>插件地址：<a href="http://updates.jenkins-ci.org/download/plugins">http://updates.jenkins-ci.org/download/plugins</a></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/15-03-16-jenkins%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6-a7793d.png" alt="1553504433537"></p><h1 id="git-github-jenkins"><a href="#git-github-jenkins" class="headerlink" title="git+github+jenkins"></a>git+github+jenkins</h1><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-30-jenkins%E7%89%A9%E7%90%86%E6%9E%B6%E6%9E%84-e305a2.png" alt="1552924791657"></p><p><strong>实验架构图</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-32-git+github+jenkins%E5%AE%9E%E9%AA%8C%E6%9E%B6%E6%9E%84%E8%A7%84%E5%88%92%E5%9B%BE-09fa63.png" alt="1553086621836"></p><h2 id="开发者电脑准备"><a href="#开发者电脑准备" class="headerlink" title="开发者电脑准备"></a>开发者电脑准备</h2><p>第1步: 在开发者电脑上安装git工具</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># yum install git -y</span></span><br></pre></td></tr></table></figure><p>第2步: 在开发者电脑上创建空密码密钥对</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-34-jenkins%E5%AF%86%E9%92%A5%E5%B7%A5%E4%BD%9C%E5%9B%BE-bf2f33.png" alt="1553006798473"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># ssh-keygen -t rsa -f /root/.ssh/id_rsa -C &quot;dev1@itcast.cn&quot; -N &quot;&quot;</span></span><br></pre></td></tr></table></figure><p>第3步: 在开发者电脑上查看并复制公钥</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># cat /root/.ssh/id_rsa.pub </span></span><br><span class="line">ssh<span class="literal">-rsa</span> AAAAB3NzaC1yc2EAAAADAQABAAABAQC+<span class="number">8</span>f9vVJ8kskBojsxqaA95DQzLemCuA3o9nWE1sCjHHy/xxT4Ev57WbVCCPnCy3/pR49o5i7RE+<span class="number">5</span>/dA4Ct+QXpj02pE2mPiehMIGFmjolhYFqIq7lnTSQ+zVtetIxnn2zmOx0qz+Zdr/wSCh/Czl7+Y2RClSq2sgD80/eF/uBpdlku2ejXAnIKFn3NekbqM4gYao/XTDLMW7D7pyQ0CFaI0xwEdXroy7ozAyFo76kvxs4IztAslcUeEj/CGha3WsLATRTeDNK5YGlI8jcw0WEcZocEhbS2RhkikQjACGgrae3WpJY/szH9BQeH8rIF2vR5s0DlPy9PJtBAxuUe8hJ/ dev1@itcast.cn</span><br></pre></td></tr></table></figure><p>第4步: 将开发者公钥添加到github</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-37-github%E6%B7%BB%E5%8A%A0%E5%BC%80%E5%8F%91%E8%80%85%E5%AF%86%E9%92%A5-3f564b.png" alt="1553007869603"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-39-github%E6%B7%BB%E5%8A%A0%E5%BC%80%E5%8F%91%E8%80%85%E5%AF%86%E9%92%A52-608d04.png" alt="1553007983358"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-42-github%E6%B7%BB%E5%8A%A0%E5%BC%80%E5%8F%91%E8%80%85%E5%AF%86%E9%92%A53-f21f54.png" alt="1553008141619"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-44-github%E6%B7%BB%E5%8A%A0%E5%BC%80%E5%8F%91%E8%80%85%E5%AF%86%E9%92%A54-81d56e.png" alt="1553008207784"></p><h2 id="github上新建项目仓库"><a href="#github上新建项目仓库" class="headerlink" title="github上新建项目仓库"></a>github上新建项目仓库</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-51-github%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93-19ac64.png" alt="1552927158944"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-49-github%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%932-e81e71.png" alt="1552927865360"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-47-github%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%933-592c29.png" alt="1552927958538"></p><h2 id="开发者提交文件测试"><a href="#开发者提交文件测试" class="headerlink" title="开发者提交文件测试"></a>开发者提交文件测试</h2><p>第1步: 在github上获取ssh免密地址</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-05-%E8%8E%B7%E5%8F%96github%E5%85%8D%E5%AF%86%E5%9C%B0%E5%9D%80-bbf843.png" alt="1553009294980"></p><p>第2步: 开发者电脑上设置开发者身份</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># git config --global user.name &quot;dev&quot;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># git config --global user.email &quot;dev@itcast.cn&quot;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># git config --global color.ui true</span></span><br></pre></td></tr></table></figure><p>第3步: clone项目到开发者本地电脑</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm1</span>~]<span class="comment"># git clone git@github.com:linux-daniel/jenkins.git</span></span><br><span class="line">Cloning into <span class="string">&#x27;jenkins&#x27;</span>...</span><br><span class="line">The authenticity of host <span class="string">&#x27;github.com (52.74.223.119)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class="line"><span class="string">RSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>github.com,<span class="number">52.74</span>.<span class="number">223.119</span><span class="string">&#x27; (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">warning: You appear to have cloned an empty repository.</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>第4步: 提交测试代码文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># cd jenkins/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">jenkins</span>]<span class="comment"># echo &quot;test&quot; &gt;&gt; README.md</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">jenkins</span>]<span class="comment"># git add README.md</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">jenkins</span>]<span class="comment"># git commit -m &quot;add README.md&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">jenkins</span>]<span class="comment"># git push -u origin master</span></span><br></pre></td></tr></table></figure><p>第5步: github上验证</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-09-github%E4%B8%8A%E9%AA%8C%E8%AF%81push%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F-c31bac.png" alt="1553010362245"></p><h2 id="nginx服务器准备"><a href="#nginx服务器准备" class="headerlink" title="nginx服务器准备"></a>nginx服务器准备</h2><p>在nginx服务器上安装nginx,并启动服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先要安装 EPEL 存储库</span></span><br><span class="line">sudo yum install epel<span class="literal">-release</span></span><br><span class="line">sudo yum install <span class="literal">-y</span> yum<span class="literal">-utils</span></span><br><span class="line">sudo yum<span class="literal">-config-manager</span> <span class="literal">--enable</span> epel</span><br><span class="line">sudo yum install epel<span class="literal">-release</span></span><br><span class="line">sudo yum update</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># yum install epel-release</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># yum install nginx -y</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># systemctl start nginx</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># systemctl enable nginx</span></span><br></pre></td></tr></table></figure><h2 id="jenkins安装插件"><a href="#jenkins安装插件" class="headerlink" title="jenkins安装插件"></a>jenkins安装插件</h2><p>jenkins图形确认安装<strong>git plugin</strong>和<strong>publish over ssh</strong>插件</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-14-jenkins%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE1-0b1414.png" alt="1553010890677"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-17-jenkins%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE2-793f82.png" alt="1553010947301"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-21-jenkins%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE3-ca0f66.png" alt="1553011281250"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-26-jenkins%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE4-3b0741.png" alt="1553011546506"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-25-jenkins%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE5-a73cec.png" alt="1553011660527"></p><h2 id="配置jenkins通过publish-over-ssh免密连接nginx"><a href="#配置jenkins通过publish-over-ssh免密连接nginx" class="headerlink" title="配置jenkins通过publish over ssh免密连接nginx"></a>配置jenkins通过publish over ssh免密连接nginx</h2><p>第1步: 在jenkins服务器上生成空密码密钥对</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># ssh-keygen -t rsa -f /root/.ssh/id_rsa -C &quot;jenkins-server@itcast.cn&quot; -N &quot;&quot;</span></span><br></pre></td></tr></table></figure><p>第2步: 查看并复制私钥</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># cat /root/.ssh/id_rsa</span></span><br><span class="line"><span class="literal">-----BEGIN</span> RSA PRIVATE KEY<span class="literal">-----</span></span><br><span class="line">MIIEpQIBAAKCAQEAvWekHSkS23a/<span class="number">8</span>kN6SkDTjFdcdw5zuupaVY9KJd2Ejnfg7/ZU</span><br><span class="line"><span class="number">6</span>fqOO1b8bAzYMkf8aKTcStKEwBWV6TYA/ljGG/<span class="number">6</span>oAz1UGwBke/Sw6wASp7wN4MUQ</span><br><span class="line">HQDeHKv+odPHuSloK47e3LrjzCssXYPrvNmzsLKXIzbmiGJNAZYznYMBtnDNxpiy</span><br><span class="line"><span class="number">1</span>L+<span class="number">4</span>zQeSTOfT0MCbF/KTgbyffRCNHC/m8Ow89NF1XW37he3XV8wimM6NrGtndw1N</span><br><span class="line">YVZMyx85xEsK9m2Wxee+P7KgIdL5nmbGJOBbTUi4dlt9j4T+mOxr4AF9oaZKS0o2</span><br><span class="line">oJlJyyl9TKtHQM6d2Qw8BGXOGMDVSB8WT1Q5UwIDAQABAoIBAHsCS4iQu2mDBwhN</span><br><span class="line">IKgG0B2OQ0QjQ7A6Ma7tn6dV5ZgtbQ4Lenx3OFZ7mPaHpQWK0PgZUeTaMlMZ8cGD</span><br><span class="line">TEPj3c4ipnVsKCpdJ+WFNj15T6RWMuEuutdLT/VpEreA9m5f4QKhCEZsrjNUOr0F</span><br><span class="line">R13gOZ5hblz1c+VRilekeCMtCTi1jKkDdVNFRcdQe8m8kttFVC2hSPB7tJxEoxmp</span><br><span class="line">kAPkPBwU0E/<span class="number">6</span>pA591JYCUk7lNQ9eBDgoBbb9cglEa4tn3Hh7AoyXcJTvYoC1vH1M</span><br><span class="line">zN/<span class="number">1</span>MLHyME76a/intrQM9frYwgM1gUdZU5i5kt4/SFQfd/qM8Axvy7s0qcFf5jxo</span><br><span class="line">Ey4Ob4kCgYEA9HkCeBMexLZnVbZrDNiaapANdPafY9PILduZ9nVQmWh4rRcu47r0</span><br><span class="line">D1V6yDtBS8+p/sPJu/<span class="number">4</span>KYEn/<span class="number">8</span>yDWHjxd3O194XaAKl9xgqUPP23txohp99pHy2mL</span><br><span class="line"><span class="number">21</span>eqthC0QKk2bH23jAQxjd0MAz5mK4uO1<span class="built_in">r</span>/BFhSnJpK4i5/jVIHqm3cCgYEAxlXq</span><br><span class="line">lqSruCYzwzMX/<span class="number">7</span>Gv1lqexmUGmXiqQ4LWtOlQIaL+BoPOajp2mJjJMsIF1qkQwZnp</span><br><span class="line">L+WdP02j7esBD1hI9G+lISCyqjTG+OCdNFiQ3SFJDZoLrcBN1uByjgANPleMiP9y</span><br><span class="line">zq+xa+zBQ2YEtAEA8gp37QzfA2P6zihCNQqmUAUCgYEAgcrFHs635SQaFI12pClT</span><br><span class="line">QgQcwN42nR9RBdezFAAQvIGUoADQ6iLVdFajiy66ae9kh1eXAPHMvHZNJt1mEENo</span><br><span class="line">aeTEkjEBtn1ZnEzZnYlVVbQS3n3K5BmzIM6YWXTg3ft4Y30TN4j6biDPQeGdCL1d</span><br><span class="line">JnJDpt9sJrR6udY3MSSQU90CgYEAnqnkvRaG+Q42opWhQUAYdtaP5g6ztNq++rsU</span><br><span class="line">oC11mTMXHIcc/gY/EdxIOH7WxN8DNJ232kVKAnZOCerSMkBiPImEBHhv9ZG7CyZF</span><br><span class="line">HLctTHlwQ51Ucm9A1gFAIzEPZywKlR4l7grHWJtSEGTwpj+XTgnp3o1JayD0Zy/<span class="number">1</span></span><br><span class="line">pxEZ8zECgYEAnS/PHs+<span class="number">164</span>GYPkWlYxGw04UE4SlQGa0QqT1WfctFPctU5PVqpwHi</span><br><span class="line">imEFS+V89p1N+bQpgEI+WqlRGgODcjIE0ho8DqhsKaqu0AeVPN91Dgi20giJE8xo</span><br><span class="line">TnYioS3qpxXtPiwrVR8PUZ/WZ/YtM0jwvYXowsSHeqVfCUBNGHqvwEA=</span><br><span class="line"><span class="literal">-----END</span> RSA PRIVATE KEY<span class="literal">-----</span></span><br></pre></td></tr></table></figure><p>第3步: 在jenkins中添加ssh私钥</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-32-jenkins%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE6-5f9875.png" alt="1553012342059"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-34-jenkins%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE7-5e2f9b.png" alt="1553658190008"></p><p>第4步: 在jenkins服务器上配置对nginx服务器的免密登录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins_server</span> ~]<span class="comment"># ssh-copy-id -i 192.168.15.126</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">15.126</span>为nginx服务器的IP</span><br></pre></td></tr></table></figure><p>第5步: 然后填写连接nginx信息，测试连接成功后保存</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-27-20-jenkins%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE8-16f233.png" alt="1553013194254"></p><h2 id="添加Jenkins服务器公钥到github"><a href="#添加Jenkins服务器公钥到github" class="headerlink" title="添加Jenkins服务器公钥到github"></a>添加Jenkins服务器公钥到github</h2><p>添加过程见上面笔记(这里省略，直接看下面结果)</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-27-25-%E6%B7%BB%E5%8A%A0jenkins%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%AC%E9%92%A5%E5%88%B0github-23a577.png" alt="1553013462165"></p><h2 id="为jenkins服务器添加凭据"><a href="#为jenkins服务器添加凭据" class="headerlink" title="为jenkins服务器添加凭据"></a>为jenkins服务器添加凭据</h2><p>凭据是jenkins给自己的构建项目授权用的。</p><p>我们本项目案例里jenkins是通过ssh免密去找github的项目仓库clone或pull项目代码。</p><p>在前面的配置里已经把jenkins服务器的公钥添加到了github仓库上, 在jenkins服务器上root用户使用<code>git clone 项目地址</code>都可以成功。</p><p>但是jenkins服务本身并不允许使用自己的私钥去访问github的公钥, 给个凭据, 让它能做就解决问题了</p><p><strong>总结:</strong> **&#x3D;&#x3D;凭据是一种和第三方程序(如github,gitlab等)通讯的权限授权。本案例的凭据就是允许使用ssh免密&#x3D;&#x3D;**。</p><p>​         你可以把这个凭据在jenkins里授予给任何需要ssh免密通讯的构建项目。</p><p>第1步: 在jenkins界面添加凭据</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-39-jenkins%E6%B7%BB%E5%8A%A0%E5%87%AD%E6%8D%AE-78d78a.png" alt="1553013641895"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-41-jenkins%E6%B7%BB%E5%8A%A0%E5%87%AD%E6%8D%AE2-220e81.png" alt="1553013717332"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-45-jenkins%E6%B7%BB%E5%8A%A0%E5%87%AD%E6%8D%AE3-498364.png" alt="1553013776330"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-49-jenkins%E6%B7%BB%E5%8A%A0%E5%87%AD%E6%8D%AE4-dc4a8b.png" alt="1553013819399"></p><p>第2步: 添加凭据信息</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-53-jenkins%E6%B7%BB%E5%8A%A0%E5%87%AD%E6%8D%AE5-95a5b2.png" alt="1553014084926"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-55-jenkins%E6%B7%BB%E5%8A%A0%E5%87%AD%E6%8D%AE6-09e30a.png" alt="1553014143212"></p><h2 id="jenkins任务创建"><a href="#jenkins任务创建" class="headerlink" title="jenkins任务创建"></a>jenkins任务创建</h2><p>第1步: 创建新任务</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-15-jenkins%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A11-d7c56c.png" alt="1553078055293"></p><p>第2步: 自定义任务名称与风格</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-18-jenkins%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A12-e91cc4.png" alt="1553078335434"></p><p>第3步: 自定义任务描述</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/18-46-24-jenkins%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A13-0cb4de.png" alt="1553078510045"></p><p>第4步: 定义源码管理</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-24-59-jenkins%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A14-6db340.png" alt="1553079064976"></p><p>第5步:定义构建方法</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-01-jenkins%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A15-c45242.png" alt="1553079481477"></p><p>第6步: 定义构建的源码,目标主机和目标目录</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-03-jenkins%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A16-0d447e.png" alt="1562558046005"></p><p>第7步: 设置完毕，保存，并验证</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-08-jenkins%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A17-024d6d.png" alt="1553079846398"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-13-jenkins%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A18-84b8fd.png" alt="1553080073223"></p><h2 id="手动构建"><a href="#手动构建" class="headerlink" title="手动构建"></a>手动构建</h2><p>第1步: 立即构建</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-17-jenkins%E6%9E%84%E5%BB%BA1-2c5d6e.png" alt="1553082456795"></p><p>第2步: 在workspace工作区间查看</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-19-jenkins%E6%9E%84%E5%BB%BA2-8162ff.png" alt="1553082562299"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-24-jenkins%E6%9E%84%E5%BB%BA3-0b406f.png" alt="1553082689184"></p><p>第3步: 查看控制台输出信息</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-28-jenkins%E6%9E%84%E5%BB%BA4-ea60fc.png" alt="1553083607694"></p><p>第4步: nginx服务器上验证文件是否被传到nginx家目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># ls /usr/share/nginx/html/</span></span><br><span class="line"><span class="number">404</span>.html  index.html      poweredby.png</span><br><span class="line"><span class="number">50</span>x.html  nginx<span class="literal">-logo</span>.png  README.md</span><br><span class="line">可以看到README.md被传过来了</span><br></pre></td></tr></table></figure><p><strong>练习:</strong> 在开发者电脑上再次上传文件,并构建测试</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-35-git+github+jenkins%E8%BF%87%E7%A8%8B%E5%B0%8F%E7%BB%93%E5%9B%BE-ea05b4.png" alt="1562567947685"></p><p>1</p><h1 id="自动发布系统"><a href="#自动发布系统" class="headerlink" title="自动发布系统"></a>自动发布系统</h1><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/22-41-04-%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E5%9B%BE-3351f1.png" alt="1553098138330"></p><h2 id="Gitlab上创建自动构建仓库"><a href="#Gitlab上创建自动构建仓库" class="headerlink" title="Gitlab上创建自动构建仓库"></a>Gitlab上创建自动构建仓库</h2><p>第1步: gitlab上创建新仓库</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/22-41-07-gitlab%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAweb1-e8c5e6.png" alt="1553174861062"></p><p>第2步: 自定义项目名称等</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/22-41-15-gitlab%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAweb2-f84040.png" alt="1553174585594"></p><p>第3步: 确认创建成功</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/29/22-41-18-gitlab%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAweb3-0e6b23.png" alt="1553175117175"></p><p>在开发者电脑clone创建好的项目,进行开发</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone git@10.1.1.12:root/auto_build_web.git</span></span><br><span class="line"><span class="comment"># cd auto_build_web</span></span><br></pre></td></tr></table></figure><p>开发者要产生ssh空密码密钥对,把公钥添加到gitlab(过程省略)</p><h2 id="jenkins安装对应插件"><a href="#jenkins安装对应插件" class="headerlink" title="jenkins安装对应插件"></a>jenkins安装对应插件</h2><p>jenkins安装gitlab与gitlab hook插件</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-42-jenkins%E5%AE%89%E8%A3%85gitlab%E4%B8%8Egitlab_hook%E6%8F%92%E4%BB%B6-18a2cd.png" alt="1553176922376"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-44-jenkins%E5%AE%89%E8%A3%85gitlab%E4%B8%8Egitlab_hook%E6%8F%92%E4%BB%B62-eed9d5.png" alt="1553185157195"></p><h2 id="添加Jenkins服务器公钥到gitlab"><a href="#添加Jenkins服务器公钥到gitlab" class="headerlink" title="添加Jenkins服务器公钥到gitlab"></a>添加Jenkins服务器公钥到gitlab</h2><p>第1步: jenkins产生root用户的ssh空密码密钥对(步骤省略)</p><p>添加公钥到gitlab</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-49-%E6%B7%BB%E5%8A%A0jenkins%E5%85%AC%E9%92%A5%E5%88%B0gitlab-ab4166.png" alt="1553185839595"></p><p>第2步: 复制gitlab上自动发布项目地址</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-51-%E8%8E%B7%E5%8F%96%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80-bf60f7.png" alt="1553183183209"></p><p>第3步: 在jenkins服务器上克隆仓库，确认连接OK</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># git clone git@10.1.1.12:root/auto_build_web.git</span></span><br><span class="line">Cloning into <span class="string">&#x27;auto_build_web&#x27;</span>...</span><br><span class="line">The authenticity of host <span class="string">&#x27;10.1.1.12 (10.1.1.12)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:Sp1FZaHscluT1mTIKFUiFQPoqcsSL2urGiujjlUN4lE.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:8b:95:f9:83:8c:ea:e8:43:e4:58:36:9b:8f:c5:ba:96.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span><span class="number">10.1</span>.<span class="number">1.12</span><span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">remote: Enumerating objects: 3, done.</span></span><br><span class="line"><span class="string">remote: Counting objects: 100% (3/3), done.</span></span><br><span class="line"><span class="string">remote: Total 3 (delta 0), reused 0 (delta 0)</span></span><br><span class="line"><span class="string">Receiving objects: 100% (3/3), done.</span></span><br></pre></td></tr></table></figure><h2 id="jenkins创建自动构建任务"><a href="#jenkins创建自动构建任务" class="headerlink" title="jenkins创建自动构建任务"></a>jenkins创建自动构建任务</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-25-56-jenkins%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E4%BB%BB%E5%8A%A1-88386a.png" alt="1553184493070"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-01-jenkins%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E4%BB%BB%E5%8A%A12-23d521.png" alt="1553184602674"></p><p><strong>&#x3D;&#x3D;凭据使用的是上面实验的凭据(如果ssh密钥对重新产生了,就需要重配置凭据)&#x3D;&#x3D;</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-03-jenkins%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E4%BB%BB%E5%8A%A13-ec0610.png" alt="1553186294154"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-05-jenkins%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E4%BB%BB%E5%8A%A14-abab0a.png" alt="1553186616179"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-07-jenkins%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E4%BB%BB%E5%8A%A15-95750f.png" alt="1553224131699"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-12-jenkins%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E4%BB%BB%E5%8A%A16-725a73.png" alt="1553186863931"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-15-jenkins%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E4%BB%BB%E5%8A%A17-133d3f.png" alt="1553187361214"></p><p>注意: 执行此脚本不再是使用publish over ssh插件,而是**&#x3D;&#x3D;使用jenkins服务器上的jenkins用户来执行的&#x3D;&#x3D;**</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#源目录为jenkins存放任务文件的目录 </span></span><br><span class="line">SOURCE_DIR=/var/lib/jenkins/workspace/<span class="variable">$JOB_NAME</span>/</span><br><span class="line"><span class="comment">#目标目录为nginx服务器的家目录</span></span><br><span class="line">DEST_DIR=/usr/share/nginx/html</span><br><span class="line"><span class="comment">#使用rsync同步源到nginx服务器家目录(需要免密登录)，IP为nginx服务器IP</span></span><br><span class="line">/usr/bin/rsync <span class="literal">-av</span> <span class="literal">--delete</span> <span class="variable">$SOURCE_DIR</span> root@<span class="number">192.168</span>.<span class="number">15.126</span>:<span class="variable">$DEST_DIR</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题: 既然是使用jenkins服务器上的jenkins用户来执行，为什么rsync不传给192.168.15.126的jenkins用户，而是传给它的root用户?</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答: 因为<span class="number">192.168</span>.<span class="number">15.126</span>上没有jenkins用户,就算有jenkins用户,对/usr/share/nginx/html也没有写权限</span><br></pre></td></tr></table></figure><h2 id="配置jenkins服务器上的jenkins用户"><a href="#配置jenkins服务器上的jenkins用户" class="headerlink" title="配置jenkins服务器上的jenkins用户"></a>配置jenkins服务器上的jenkins用户</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># grep jenkins /etc/passwd</span></span><br><span class="line">jenkins:x:<span class="number">988</span>:<span class="number">982</span>:Jenkins Automation Server:/var/lib/jenkins:/bin/false</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># usermod -s /bin/bash jenkins</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># grep jenkins /etc/passwd</span></span><br><span class="line">jenkins:x:<span class="number">988</span>:<span class="number">982</span>:Jenkins Automation Server:/var/lib/jenkins:/bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">jenkins</span>-<span class="type">server</span> ~]<span class="comment"># su - jenkins</span></span><br><span class="line"><span class="literal">-bash-4</span>.<span class="number">2</span><span class="variable">$</span> ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;jenkins user&quot;</span> <span class="literal">-N</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="literal">-bash-4</span>.<span class="number">2</span><span class="variable">$</span> ssh<span class="literal">-copy-id</span> <span class="literal">-i</span> root@<span class="number">192.168</span>.<span class="number">15.126</span></span><br></pre></td></tr></table></figure><h2 id="jenkins全局安全配置"><a href="#jenkins全局安全配置" class="headerlink" title="jenkins全局安全配置"></a>jenkins全局安全配置</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-20-jenkins%E5%85%A8%E5%B1%80%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE-c5eae0.png" alt="1553228664875"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-23-jenkins%E5%85%A8%E5%B1%80%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE2-c07331.png" alt="1553228811977"></p><h2 id="配置gitlab允许本地网络使用webhook"><a href="#配置gitlab允许本地网络使用webhook" class="headerlink" title="配置gitlab允许本地网络使用webhook"></a>配置gitlab允许本地网络使用webhook</h2><p>gitlab默认在本地网络不能使用webhook，所以需要我们配置允许（注意要使用管理员配置,普通用户看不到下图的扳手图标)</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-28-%E9%85%8D%E7%BD%AEgitlab%E5%85%81%E8%AE%B8%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8webhook1-0ae9a5.png" alt="1553229742769"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-30-%E9%85%8D%E7%BD%AEgitlab%E5%85%81%E8%AE%B8%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8webhook2-8e82c0.png" alt="1553229844953"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-27-33-%E9%85%8D%E7%BD%AEgitlab%E5%85%81%E8%AE%B8%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8webhook3-184536.png" alt="1553229928009"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-33-%E9%85%8D%E7%BD%AEgitlab%E5%85%81%E8%AE%B8%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8webhook4-e3993f.png" alt="1553229997098"></p><h2 id="为gitlab自动构建项目添加webhook"><a href="#为gitlab自动构建项目添加webhook" class="headerlink" title="为gitlab自动构建项目添加webhook"></a>为gitlab自动构建项目添加webhook</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-37-%E4%B8%BAgitlab%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0webhook%E6%94%AF%E6%8C%811-dc4780.png" alt="1553230226025"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-38-%E4%B8%BAgitlab%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0webhook%E6%94%AF%E6%8C%812-a6b1fc.png" alt="1553230580824"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-27-38-%E4%B8%BAgitlab%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0webhook%E6%94%AF%E6%8C%813-3cb5d7.png" alt="1553230666947"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-39-%E4%B8%BAgitlab%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0webhook%E6%94%AF%E6%8C%814-1f8c5b.png" alt="1553230778636"></p><h2 id="代码自动发布测试"><a href="#代码自动发布测试" class="headerlink" title="代码自动发布测试"></a>代码自动发布测试</h2><p>开发者电脑上使用git提交测试文件（确认前面clone过项目仓库)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># cd auto_build_web/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">auto_build_web</span>]<span class="comment"># echo &quot;auto_build_web&quot; &gt; index.html</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">auto_build_web</span>]<span class="comment"># git add index.html</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">auto_build_web</span>]<span class="comment"># git commit -m &quot;add index.html&quot;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">auto_build_web</span>]<span class="comment"># git push -u origin master</span></span><br></pre></td></tr></table></figure><p>在nginx服务器上验证</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># cat /usr/share/nginx/html/index.html </span></span><br><span class="line">auto_build_web</span><br></pre></td></tr></table></figure><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a><strong>小结</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-43-%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F%E5%B0%8F%E7%BB%93%E5%9B%BE-ad6acf.png" alt="1562578462093"></p><h1 id="pycharm与自动发布系统结合-拓展"><a href="#pycharm与自动发布系统结合-拓展" class="headerlink" title="pycharm与自动发布系统结合(拓展)"></a>pycharm与自动发布系统结合(拓展)</h1><p>开发者开发代码一般会使用IDE集成开发工具（比如pycharm这种),那么使用pycharm开发的代码能否直接利用自动发布系统发布到业务服务器上呢？ 答案是肯定的。</p><p>这次使用windows模拟开发者电脑</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-50-windows%E4%B8%8A%E4%BD%BF%E7%94%A8git-7d474a.png" alt="1553236082137"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-51-windows%E4%B8%8A%E4%BA%A7%E7%94%9F%E7%A9%BA%E5%AF%86%E7%A0%81%E5%AF%86%E9%92%A5%E5%AF%B9-b930f4.png" alt="1553240986320"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-53-gitlab%E4%B8%8A%E6%B7%BB%E5%8A%A0windows%E5%BC%80%E5%8F%91%E8%80%85%E5%85%AC%E9%92%A5-63bb61.png" alt="1553241082141"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-56-windows%E5%BC%80%E5%8F%91%E8%80%85%E5%85%8B%E9%9A%86%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95-d710ab.png" alt="1553241253905"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-26-58-pycharm%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%85%B3%E8%BF%9E-8ec8cb.png" alt="1553241573165"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-27-00-pycharm%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%85%B3%E8%BF%9E2-86b605.png" alt="1553242156637"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-27-12-pycharm%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%85%B3%E8%BF%9E3-93d816.png" alt="1553242357090"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-27-01-pycharm%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%85%B3%E8%BF%9E4-022201.png" alt="1553243341039"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-27-06-pycharm%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%85%B3%E8%BF%9E5-b3a22d.png" alt="1553242657428"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/07/01/11-27-04-pycharm%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%85%B3%E8%BF%9E6-18f053.png" alt="1553243402693"></p><p>nginx服务器上测试验证</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># cat /usr/share/nginx/html/index.html </span></span><br><span class="line">auto_build_web</span><br><span class="line">pycharm测试</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Jenkins </tag>
            
            <tag> 自动发布系统 </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VRRP协议详解</title>
      <link href="/2024/06/30/VRR%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/06/30/VRR%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前提：<br> VRRP是Virtual Router RedundancyProtocol(虚拟路由器冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。</p><p> 虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master。这样的话就可以保证路由器的高可用了。<br>文章地址：<a href="/2024/06/30/%E4%BC%81%E4%B8%9A%E6%9E%B6%E6%9E%84%E5%8F%8C%E7%82%B9%E6%9C%8D%E5%8A%A1%E5%99%A8HA/" title="企业架构双点服务器HA">企业架构双点服务器HA</a></p></blockquote><h2 id="什么是VRRP"><a href="#什么是VRRP" class="headerlink" title="什么是VRRP"></a>什么是VRRP</h2><p>VRRP（Virtual Router Redundancy Protocol，虚拟路由冗余协议）是一种用于提高路由器高可用性的协议。其主要目的是解决静态路由的单点故障问题，确保即使某个节点出现故障，整个网络仍然可以不间断地运行。</p><h3 id="VRRP的工作原理"><a href="#VRRP的工作原理" class="headerlink" title="VRRP的工作原理"></a>VRRP的工作原理</h3><p>VRRP协议将多台提供相同功能的路由器组成一个路由器组。在这个组中，有一个Master和多个Backup。Master路由器对外提供服务，并拥有一个虚拟IP地址（VIP）。局域网内的其他设备将此VIP设为其默认网关。当Master正常工作时，会定期发送VRRP包，通知Backup路由器自己处于工作状态。</p><p>如果Backup路由器在设定的时间内未收到来自Master的VRRP包，则认为Master已经宕机。此时，Backup路由器会根据VRRP的优先级进行选举，选出新的Master路由器，接管虚拟IP地址并继续对外提供服务。</p><h2 id="VRRP包"><a href="#VRRP包" class="headerlink" title="VRRP包"></a>VRRP包</h2><p>VRRP包是VRRP协议中传递信息的重要载体。主要用于Master路由器向Backup路由器通告其存活状态。VRRP包包含以下几个关键字段：</p><ul><li><strong>版本号（Version）</strong>：标识VRRP协议的版本，目前普遍使用的是VRRPv2和VRRPv3。</li><li><strong>类型（Type）</strong>：标识VRRP包的类型，如广告包（Advertisement）。</li><li><strong>虚拟路由器标识符（VRID）</strong>：唯一标识一个VRRP路由器组。</li><li><strong>优先级（Priority）</strong>：用于选举Master路由器，优先级越高，路由器越有可能成为Master。</li><li><strong>组号（Group）</strong>：标识属于哪个虚拟路由器组。</li><li><strong>校验和（Checksum）</strong>：用于校验VRRP包的完整性。</li></ul><h2 id="VRRP的优先级"><a href="#VRRP的优先级" class="headerlink" title="VRRP的优先级"></a>VRRP的优先级</h2><p>VRRP的优先级决定了在Master路由器宕机时，哪个Backup路由器会被选举为新的Master。优先级的取值范围是1到254，其中255保留给当前Master路由器使用。优先级越高的路由器越有可能成为新的Master。一般情况下，优先级的设置需要考虑路由器的性能、可靠性等因素。</p><p>优先级为0的路由器表示其不参与选举，用于临时退出组或维护操作。</p><h2 id="解决静态路由单点故障问题"><a href="#解决静态路由单点故障问题" class="headerlink" title="解决静态路由单点故障问题"></a>解决静态路由单点故障问题</h2><p>静态路由单点故障问题指的是，当网络中某台路由器发生故障时，依赖于该路由器的所有通信都会中断。VRRP通过引入虚拟IP地址和路由器组的概念，有效地解决了这一问题。当Master路由器宕机时，Backup路由器会迅速接管虚拟IP地址，保证网络通信的连续性。</p><h2 id="保证网络不间断运行"><a href="#保证网络不间断运行" class="headerlink" title="保证网络不间断运行"></a>保证网络不间断运行</h2><p>VRRP通过以下机制保证网络在个别节点宕机时仍能不间断运行：</p><ol><li><strong>虚拟路由器组</strong>：多个路由器组成一个虚拟路由器组，提供冗余。</li><li><strong>Master和Backup角色划分</strong>：只有Master路由器对外提供服务，Backup路由器处于待命状态。</li><li><strong>定期发送VRRP包</strong>：Master路由器定期发送VRRP包，通知Backup路由器其存活状态。</li><li><strong>优先级选举</strong>：当Backup路由器收不到VRRP包时，会根据优先级进行选举，选出新的Master路由器。</li><li><strong>快速切换</strong>：Backup路由器迅速接管虚拟IP地址，继续对外提供服务，保证网络通信不中断。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>VRRP协议通过引入虚拟IP地址和路由器组的概念，有效地提高了网络的可靠性和可用性。通过Master和Backup的角色划分及优先级选举机制，VRRP能够在个别节点宕机时，迅速切换至新的Master路由器，确保网络通信的连续性。VRRP的应用对于需要高可用性的网络环境具有重要意义。</p><h2 id="1-产生背景及应用环境"><a href="#1-产生背景及应用环境" class="headerlink" title="1. 产生背景及应用环境"></a>1. 产生背景及应用环境</h2><h3 id="1-1-为什么要用VRRP"><a href="#1-1-为什么要用VRRP" class="headerlink" title="1.1 为什么要用VRRP"></a>1.1 为什么要用VRRP</h3><p>VRRP（Virtual Router Redundancy Protocol）——虚拟路由器冗余协议，其最新技术标准是RFC3768。</p><p>为什么要用VRRP呢？主要是为了实现数据链路层互通设备的冗余备份功能。来看图一：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/09-06-08-20160115121006438-98da9a.jpeg" alt="常规网络架构">  </p><p>图一（常规网络架构）</p><p>从图中可以看到，常规的局域网一般都是多个终端接到交换机上，然后通过单独的出口路由器连接到Internet。如果这个出口路由器坏掉了，那么整个上行的流量就会全部断掉，这就是传说中的单点故障。</p><p>为了避免这种情况，我们对上面的网络进行物理改造，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/09-06-10-20160115121157560-efbbf2.jpeg" alt="消除了单点故障的常规网络架构"></p><p>图二（消除了单点故障的常规网络架构）</p><p>现在，这个网络有两个Internet出口，这样任何一个出口路由器出现故障都不会导致终端用户的上行流量断掉。</p><p><strong>问题是：怎么让终端PC知道局域网中有两个出口路由器，并在其中一个出现故障后自动选择另外一个呢？</strong> 可采用的方案包括让终端PC运行动态路由协议，比如RIP、OSPF，或者ICMP router Discovery client（DISC），或者指定一条静态缺省路由。</p><p>这三种实现方法都有其劣势和不可行之处，具体分析如下：</p><ul><li>在每一个终端PC上运行动态路由协议几乎是不可能的，牵涉到网管的技术能力和日常维护、安全性问题、以及某些终端平台不支持动态路由协议，比如我们常用的XP、Windows7都不支持，而Windows Server系列OS支持。</li><li>DISC等邻居或路由器发现协议也存在种种问题，例如在网络内存在大量主机，每一台都需要运行DISC，增加主机的处理负担，导致协议收敛缓慢，不能及时发现不可用邻居路由器，产生路由黑洞。</li><li>配置静态缺省路由（设置网关）在终端上配置多个默认网关也存在以下两个问题：<ol><li>对于PC，配置多个默认网关后，一个会作为活动默认网关，其它作为备份默认网关。TCP&#x2F;IP在通信失败后切换默认网关，但切换后不会自动恢复原始默认网关，除非重启计算机。</li><li>对于路由器，不会切换默认路由，只会按照配置好的缺省路由优先级进行流量转发，导致路由黑洞。</li></ol></li></ul><p>以上方法均不可行，因此开发出了一种全新的协议：VRRP。无需下行设备与出口路由器进行交互操作，却完全实现了网络出口的冗余备份。接下来详细讨论VRRP的基本原理及实现过程。</p><blockquote><p>假定我们在终端PC上部署了动态路由协议，那么每一个终端用户都会遇到下面这种情况：</p><p>10086：尊敬的用户您好，申报RIP故障请按1，申报OSPF故障请按2，申报ISIS故障请按3……….</p><p>用户：( ⊙ o ⊙ )啊！我家是OSPF，按2。</p><p>10086：您好，您申报的故障是OSPF，请进一步选择，OSPF邻居无法建立请按1，OSPF密钥不对请按2，链路状态数据库异常请按3，路由表错误请按4…………..</p><p>用户：( ⊙ o ⊙ )啊！……………然后吐血身亡………….</p><p>所以说，N多现实问题和困难导致在终端PC上部署动态路由协议具有不可行性。</p></blockquote><p><strong>那么对于在终端PC上部署DISC等邻居或路由器发现协议呢？</strong>也存在种种问题，例如在网络内存在大量主机，每一台都需要运行DISC，除了增加主机的处理负担外，也会导致协议收敛缓慢，从而不能及时发现不可用邻居路由器，产生路由黑洞，这是不可接受的。</p><p> 现在只剩下在终端PC上配置静态缺省路由了（其具体表现形式一般是设置网关），这是几乎每一个IP平台都支持的配置功能，即使是一部IP电话机，根据这个思路，我们在终端上配置多个默认网关即可实现路由备份了，但是存在以下两个问题：</p><ol><li><strong>对于下行设备是PC来讲，配置了多个默认网关之后，其中一个会作为活动默认</strong></li></ol><p>网关，其它的作为备份默认网关，其按照下列过程执行流量转发和失效网关检测：</p><p>当TCP&#x2F;IP在通过活动默认网关向某个目标IP地址进行TCP通信时，如果失败的尝试次数达到TcpMaxDataRetransmissions注册表值(默认为5)的一半(即3次)还没有收到响应，TCP&#x2F;IP将到达该目标IP地址的通信改为使用列表中的下一默认网关，这一步是通过更改该远程IP地址的路由缓存项（Route Cache Entry，RCE）来实现的，从而使用列表中的下一个默认网关来作为下一跳地址。其中RCE是路由表中的一个条目，用于存储目的地的下一跳IP地址。当超过25%的TCP连接转向下一默认网关时，TCP&#x2F;IP将活动默认网关修改为这些连接当前使用的默认网关。</p><p>　　如果此时原始默认网关从故障中回复，TCP&#x2F;IP将继续使用当前的活动默认网关，而不会转移到原始默认网关，除非重启计算机。如果当前的活动默认网关也出现故障，那么TCP&#x2F;IP就会继续尝试使用列表中的下一个默认网关，在尝试完整个列表后将返回到列表的开始，又从第一个默认网关开始进行尝试。</p><p>　　死网关检测仅监视TCP流量，如果其他类型的流量连接失败，不会切换默认网关。另外TCP是端到端的协议，因此即使当前默认网关完全正常，本地计算机的TCP通信失败也可能会导致切换默认网关。</p><p> 当不同网络接口所连接的网络之间没有连接性时(如一个网络接口连接到Internet，而一个网络接口连接到内部网络)，如果在多个网络接口上同时配置默认网关，在活动默认网关出现故障导致切换默认网关时，就可能会引起连接性故障。比如活动默认网关为Internet连接，当它出现问题时，此时默认网关切换为内部连接，此时，本地计算机将无法再访问位于Internet连接上的主机。对于这种情况，微软建议使用 route add 来添加对应目的网络的匹配路由，而不是设置多个默认网关，这其实就是最长匹配原则，精确路由优先于缺省路由。</p><p> <strong>2．对于下行设备是路由器的情况，其不会切换默认路由，只会按照配置好的缺省</strong></p><p>路由优先级进行流量转发，从而导致路由黑洞。</p><p>结合上面两个原因，在网络出口路由器的下行设备上配置缺省路由的方法也不可行。</p><p>综上所述，要想消除单点故障，又同时实现下行设备在故障发生时的流量无障碍</p><p>转发，以上的三个方法均不可行，所以人们开发出了一种全新的协议：VRRP，这</p><p>种协议无需下行设备与出口路由器进行交互性操作，却完全实现了网络出口的冗</p><p>余备份。</p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VRRP协议 </tag>
            
            <tag> keepalive </tag>
            
            <tag> 企业级运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业架构双点服务器HA</title>
      <link href="/2024/06/30/%E4%BC%81%E4%B8%9A%E6%9E%B6%E6%9E%84%E5%8F%8C%E7%82%B9%E6%9C%8D%E5%8A%A1%E5%99%A8HA/"/>
      <url>/2024/06/30/%E4%BC%81%E4%B8%9A%E6%9E%B6%E6%9E%84%E5%8F%8C%E7%82%B9%E6%9C%8D%E5%8A%A1%E5%99%A8HA/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>学习目标和内容</strong></p><p>1、能够描述高可用HA的作用</p><p>2、能够理解VIP的切换</p><p>3、能够描述keepalived作用</p><p>4、能够理解主master和备backup服务器关系</p><p>5、能够实现主备服务器高可用配置</p><p>6、能够实现模拟业务宕机服务切换</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/00-32-56-b54fe7431eeb65418205dcf2c205c2b-f99977.png" alt="b54fe7431eeb65418205dcf2c205c2b"></p><h1 id="一、背景描述及其方案设计"><a href="#一、背景描述及其方案设计" class="headerlink" title="一、背景描述及其方案设计"></a>一、背景描述及其方案设计</h1><h2 id="1、业务背景描述"><a href="#1、业务背景描述" class="headerlink" title="1、业务背景描述"></a>1、业务背景描述</h2><blockquote><p>时间：2009.6-2010.9</p><p>发布产品类型：互联网动态站点 商城</p><p>⽤户数量： 2000-4000（⽤户量猛增 翻了4倍）</p><p>PV ： 8000-50000（24⼩时访问次数总和）</p><p>QPS： 50-100*（每秒访问次数）</p><p>DAU： 200-400（每⽇活跃⽤户数）</p></blockquote><p>​         随着用户量增多，单台WEB服务器，压力越来越大。虽然单台WEB服务器，目前可以完成工作任务。但是如果一旦宕机，用户就完全失去服务了，用户体验特别不好。需要备用一台服务器进行使用，主服务器宕机之后，快速切换为备用服务器</p><h2 id="2、模拟运维设计方案"><a href="#2、模拟运维设计方案" class="headerlink" title="2、模拟运维设计方案"></a>2、模拟运维设计方案</h2><p>在之前架构中，先将数据库服务器单独迁移</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/00-28-29-1-04dfc8.jpg" alt="img"></p><p>针对web服务器单点故障，升级为主备服务器架构</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/00-28-32-2-fb4221.jpg" alt="img"></p><h1 id="二、数据库服务器迁移"><a href="#二、数据库服务器迁移" class="headerlink" title="二、数据库服务器迁移"></a>二、数据库服务器迁移</h1><h2 id="1、克隆复制虚拟机"><a href="#1、克隆复制虚拟机" class="headerlink" title="1、克隆复制虚拟机"></a>1、克隆复制虚拟机</h2><blockquote><p>server01 WEB服务器  master   192.168.17.102</p><p>server02 数据库服务器   192.168.17.100</p><p>server03 WEB服务器  backup   192.168.17.101</p></blockquote><h2 id="2、服务器基本配置"><a href="#2、服务器基本配置" class="headerlink" title="2、服务器基本配置"></a>2、服务器基本配置</h2><p>根据之前的服务器基本环境的要求进行配置</p><p>因为是克隆获取虚拟机，所以只需要进行IP和MAC地址的修改即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、删除原有网卡mac地址记录信息</span></span><br><span class="line">shell &gt; cd /etc/udev/rules.d</span><br><span class="line">shell &gt; rm -rf 70-persistent-net.rules</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2、删除eth0里的mac地址项 HWADDR参数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3、修改主机名称</span></span><br><span class="line">shell &gt; sed -i &quot;s/server01/server02/&quot; /etc/sysconfig/network;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4、启动之后，把hosts文件对应也做解析</span></span><br></pre></td></tr></table></figure><h2 id="3、数据备份和迁移"><a href="#3、数据备份和迁移" class="headerlink" title="3、数据备份和迁移"></a>3、数据备份和迁移</h2><p><strong>①源数据库服务器导出数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">源数据库是server01 在server01上操作</span></span><br><span class="line">shell &gt; mysqldump -uroot -p --database tp5shop &gt; /root/tp5shop.sql</span><br></pre></td></tr></table></figure><p><strong>②导入数据到新数据库服务器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#因为数据库服务器克隆来的，所有本身具有数据 可以删除了库，模拟新机器，重新导入</span><br><span class="line">mysql &gt; drop database tp5shop;</span><br><span class="line">#创建数据库并导入数据</span><br><span class="line">mysql &gt; create database tp5shop;</span><br><span class="line">mysql &gt; use tp5shop;</span><br><span class="line">mysql &gt; source /root/tp5shop.sql;</span><br></pre></td></tr></table></figure><p><strong>③在server02 MySQL服务器中建立远程连接用户并授予权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; grant all on tp5shop.* to &#x27;tp5shop&#x27;@&#x27;192.168.17.%&#x27; identified by &#x27;$Abc3721&#x27;;</span><br></pre></td></tr></table></figure><p><strong>④修改项目数据库配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell &gt; vim /usr/local/nginx/html/tp5shop/application/database.php</span><br></pre></td></tr></table></figure><p>修改参考示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 数据库类型</span></span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>            =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">    <span class="comment">// 服务器地址</span></span><br><span class="line">    <span class="string">&#x27;hostname&#x27;</span>        =&gt; <span class="string">&#x27;192.168.17.100&#x27;</span>,</span><br><span class="line">    <span class="comment">// 数据库名</span></span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>        =&gt; <span class="string">&#x27;tp5shop&#x27;</span>,</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>        =&gt; <span class="string">&#x27;tp5shop&#x27;</span>,</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>        =&gt; <span class="string">&#x27;$Abc3721&#x27;</span>,</span><br><span class="line">    <span class="comment">// 端口</span></span><br><span class="line">    <span class="string">&#x27;hostport&#x27;</span>        =&gt; <span class="string">&#x27;3306&#x27;</span>,</span><br></pre></td></tr></table></figure><p><strong>⑤访问页面，查看业务使用情况</strong> </p><h1 id="三、高可用服务搭建"><a href="#三、高可用服务搭建" class="headerlink" title="三、高可用服务搭建"></a>三、高可用服务搭建</h1><h2 id="1、HA高可用"><a href="#1、HA高可用" class="headerlink" title="1、HA高可用"></a>1、HA高可用</h2><p>​        高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指通过设计，减少系统服务不可用的时间。假设系统一直能够提供服务，我们说系统的可用性是100%。如果系统每运行100个时间单位，会有1个时间单位无法提供服务，我们说系统的可用性是99%。&#x3D;&#x3D;很多公司的高可用目标是4个9，也就是99.99%，这就意味着，系统的年停机时间为0.876个小时&#x3D;&#x3D;。</p><table><thead><tr><th><strong>描述</strong></th><th><strong>通俗叫法</strong></th><th><strong>可用性级别</strong></th><th><strong>年度停机时间</strong></th></tr></thead><tbody><tr><td>基本可用性</td><td>2个9</td><td>99%</td><td>87.6小时</td></tr><tr><td>较高可用性</td><td>3个9</td><td>99.9%</td><td>8.8小时</td></tr><tr><td><strong>具有故障自动恢复能力的可用性</strong></td><td><strong>4个9</strong></td><td><strong>99.99%</strong></td><td><strong>53分钟</strong></td></tr><tr><td>极高可用性</td><td>5个9</td><td>99.999%</td><td>5分钟</td></tr></tbody></table><blockquote><p><strong>实现高可用的核心点：</strong></p><p>①冗余（多台服务器）</p><p>②自动切换</p></blockquote><p>备份服务器：</p><p>冷备  服务器不启用（域名不解析），使用的时候再开启，需要手动切换</p><p>热备  服务器在等待状态（监控主服务器状态），一旦主宕机，备就接管，自动切换</p><p>实现热备，引入VIP的切换</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/00-29-19-3-b2bf0e.jpg" alt="img"></p><p><strong>通过VIP的方式，切换主备服务器</strong></p><p>①默认VIP绑定在主服务器（master）</p><p>②master不可用，就切换VIP到备份服务器（backup）</p><p>③用户可以使用到连续性更好的服务，通过VIP访问服务器</p><p><strong>常用来单独实现高可用的软件：</strong></p><p>&#x3D;&#x3D;①keepalived&#x3D;&#x3D;</p><p>②heartbeat  较早  属于redhat HA工程的一部分</p><h2 id="2、keepalived介绍"><a href="#2、keepalived介绍" class="headerlink" title="2、keepalived介绍"></a>2、keepalived介绍</h2><p>​     Keepalived软件起初是专为LVS负载均衡软件设计的，用来管理并监控LVS集群系统中各个服务节点的状态，后来又加入了可以实现高可用的VRRP功能。因此，Keepalived除了能够管理LVS软件外，还可以作为其他服务（例如：Nginx、Haproxy、MySQL等）的高可用解决方案软件</p><blockquote><p>关于VRRP：<a href="/2024/06/30/VRR%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/" title="VRRP协议详解">VRRP协议详解</a></p></blockquote><h2 id="3、keepalived组成和原理"><a href="#3、keepalived组成和原理" class="headerlink" title="3、keepalived组成和原理"></a>3、keepalived组成和原理</h2><p>​         Keepalived软件主要是通过VRRP协议实现高可用功能的。</p><p>​          VRRP是Virtual Router RedundancyProtocol(虚拟路由器冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。</p><p>​         虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master。这样的话就可以保证路由器的高可用了。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/00-29-22-4-712ec8.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/30/00-29-24-5-ded655.png" alt="img"></p><p>Keepalived的功能体系结构，大致分两层：<strong>用户空间（user space）和内核空间（kernel space）</strong>。</p><p><strong>内核空间：</strong></p><p>主要包括IPVS（IP虚拟服务器，用于实现网络服务的负载均衡）和NETLINK（提供高级路由及其他相关的网络功能）两个部份。</p><p><strong>用户空间：</strong></p><blockquote><p>WatchDog：负载监控checkers和VRRP进程的状况</p><p>VRRP Stack：负载均衡器之间的失败切换FailOver，如果只用一个负载均衡器，则VRRP不是必须的。</p><p>Checkers：负责真实服务器的健康检查healthchecking，是keepalived最主要的功能。换言之，可以没有VRRP Stack，但健康检查healthchecking是一定要有的。</p><p>IPVS wrapper：用户发送设定的规则到内核ipvs代码</p><p>Netlink Reflector：用来设定vrrp的vip地址等。</p></blockquote><p>keepalived主要使用三个模块，分别是core、check和vrrp。</p><p>core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。</p><p>check负责健康检查，包括常见的各种检查方式。</p><p>vrrp模块是来实现VRRP协议的。</p><h2 id="4、安装配置启动keepalived"><a href="#4、安装配置启动keepalived" class="headerlink" title="4、安装配置启动keepalived"></a>4、安装配置启动keepalived</h2><p>master和backup都需要进行安装，也就是server01和server03机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装keepalived</span></span><br><span class="line">shell &gt; yum -y install keepalived</span><br></pre></td></tr></table></figure><table><thead><tr><th>主机名称</th><th>服务器IP</th><th></th></tr></thead><tbody><tr><td>server01</td><td>192.168.17.102</td><td>master</td></tr><tr><td>server03</td><td>192.168.17.101</td><td>backup</td></tr></tbody></table><p><strong>keepalived需要使用的目录和文件：</strong></p><table><thead><tr><th>文件或者目录</th><th>作用</th></tr></thead><tbody><tr><td>&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</td><td>生效的配置文件</td></tr><tr><td>&#x2F;etc&#x2F;init.d&#x2F;keepalived</td><td>服务器管理脚本</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;messages</td><td>日志信息</td></tr></tbody></table><p><strong>配置keepalived</strong></p><p><strong>①备份主备服务器的配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell &gt; cd  /etc/keepalived</span><br><span class="line">shell &gt; cp keepalived.conf keepalived.conf_bak</span><br></pre></td></tr></table></figure><p><strong>②分别修改主备服务器配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell &gt; vim keepalived.conf</span><br></pre></td></tr></table></figure><p><strong>示例配置文件说明</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">发送邮件的配置</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">vrrp协议的配置</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    #工作模式</span><br><span class="line">    state MASTER</span><br><span class="line">    #监听的网卡</span><br><span class="line">    interface eth0</span><br><span class="line">    #虚拟路由id 需要和备服务器一致</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    #权重 优先级</span><br><span class="line">    priority 100</span><br><span class="line">    #vrrp包的发送周期  1s</span><br><span class="line">    advert_int 1</span><br><span class="line">    #权限验证</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    #需要绑定切换的VIP</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.16</span><br><span class="line">        192.168.200.17</span><br><span class="line">        192.168.200.18</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    #master默认只需要修改使用VIP即可</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.17.200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    #修改工作模式为备</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    #注意修改VIP</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.17.200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③分别按照顺序启动主服务器和备服务器的keepalived</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell &gt; service keepalived start</span><br></pre></td></tr></table></figure><p><strong>④查看主备服务器的网卡信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要通过ip a命令查看  分别在server01和server03查看</span></span><br><span class="line">shell &gt; ip a</span><br></pre></td></tr></table></figure><p>##5、模拟服务器不可用VIP切换</p><p>服务器整机不可用，常见于服务器断网，或者断电关机等。</p><p><strong>方法一：模拟主服务器断电关闭</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭主服务器  VIP所在服务器</span></span><br><span class="line">shell &gt; poweroff</span><br></pre></td></tr></table></figure><p><strong>方法二：模拟主服务器断网</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭VIP所在服务器的网卡  使其不能够联网</span></span><br><span class="line">shell &gt; service network stop</span><br></pre></td></tr></table></figure><p>通过以上实验检测，发现当主服务器整机不可用时，VIP会切换到备用服务器</p><h1 id="四、实现服务HA"><a href="#四、实现服务HA" class="headerlink" title="四、实现服务HA"></a>四、实现服务HA</h1><p>​         通过keepalived可以直接实现主服务器整机不可用，实现VIP的切换。保证用户可以通过VIP进行访问服务。</p><p>但是实际情况下，往往并不是服务器整机不可用，只是对应的服务或者软件不可用。</p><p>比如说：nginx提供的web服务，nginx进程关闭</p><p>就需要检测当nginx不可用时，就切换VIP</p><p><strong>实现过程分析：</strong></p><p>VIP实际是由keepalived进行绑定的，所以当nginx服务不可用时，就关闭当前机器的keepalived即可，释放VIP。进而绑定到其他备用服务器。</p><p>①编写服务检测脚本，实现检测nginx是否可用，不可用则关闭当前所在主机的keepalived</p><p>②在keepalived配置中调用检测服务脚本</p><h2 id="1、Nginx服务可用检测脚本"><a href="#1、Nginx服务可用检测脚本" class="headerlink" title="1、Nginx服务可用检测脚本"></a>1、Nginx服务可用检测脚本</h2><p>主备服务器都要实现此脚本</p><p><strong>①编写测试脚本  赋予执行权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell &gt; cd /etc/keepalived</span><br><span class="line">shell &gt; vim check_nginx.sh</span><br></pre></td></tr></table></figure><p><strong>脚本内容：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">nginx_status=`ps -C nginx --no-header | wc -l`</span><br><span class="line">if [ $nginx_status -eq 0 ];then</span><br><span class="line">   service keepalived stop</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>赋予脚本执行权限    方便之后其他软件调用执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell &gt; chmod +x check_nginx.sh</span><br></pre></td></tr></table></figure><p><strong>②测试脚本可用性</strong></p><p>启动nginx和keepalived  </p><p>关闭nginx   执行脚本  查看keepalived是否也关闭</p><h2 id="2、模拟宕机实现服务切换"><a href="#2、模拟宕机实现服务切换" class="headerlink" title="2、模拟宕机实现服务切换"></a>2、模拟宕机实现服务切换</h2><p>在多台服务器中配置keepalived定时触发检测nginx的脚本模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在vrrp_instance外上面定义</span></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line"><span class="meta prompt_">   #</span><span class="language-bash">调用脚本地址</span></span><br><span class="line">   script  /etc/keepalived/check_nginx.sh</span><br><span class="line"><span class="meta prompt_">   #</span><span class="language-bash">检测间隔时间</span></span><br><span class="line">   interval 3</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在vrrp_instance里调用</span></span><br><span class="line">track_script &#123;</span><br><span class="line">    #上线定义的名称</span><br><span class="line">    check_nginx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、实现web服务器高可用"><a href="#3、实现web服务器高可用" class="headerlink" title="3、实现web服务器高可用"></a>3、实现web服务器高可用</h2><p>以上案例已经实现了，服务不可用VIP切换到可用服务器。</p><p>现在需求用户的服务是连续不间断的，故<strong>用户需要通过VIP进行访问</strong></p><p><strong>①解析域名到VIP</strong></p><p><strong>②模拟用户访问</strong></p><h1 id="五、keepalived的配置补充"><a href="#五、keepalived的配置补充" class="headerlink" title="五、keepalived的配置补充"></a>五、keepalived的配置补充</h1><blockquote><p>脑裂（裂脑）：vip出现在了多台机器上。网络不通畅，禁用了数据包，主备服务器没法通讯，造成备服务器认为主服务器不可用，绑定VIP，主服务器VIP不会释放。</p><p>解决方案：</p><p>①双备或者多备模式  BACKUP  通过priority权重来区分谁的优先级更高</p><p>②单播(定向广播)的方式 (一些特定环境禁用了组播方式)</p><p>③时间不同步  服务器时间校时</p></blockquote><h2 id="1、非抢占模式"><a href="#1、非抢占模式" class="headerlink" title="1、非抢占模式"></a>1、非抢占模式</h2><p><strong>①nopreempt</strong></p><p>在主备服务器的配置文件，vrrp_instance段中</p><p><strong>②设置state工作模式为BACKUP</strong><br>两个keepalived节点都启动后，默认都是BACKUP状态，双方在发送组播信息后，会根据优先级来选举一个MASTER出来。由于两者都配置了nopreempt，所以MASTER从故障中恢复后，不会抢占vip。这样会避免VIP切换可能造成的服务延迟。</p><h2 id="2、单播模式"><a href="#2、单播模式" class="headerlink" title="2、单播模式"></a>2、单播模式</h2><p>一些特定环境下不允许发送组播，造成备服务器无法收到vrrp包，可能会造成脑裂现象。可以通过单播的方式解决。</p><p><strong>单播示例配置：</strong>注意此语法在keepalived1.2.11版本以上支持</p><blockquote><p>unicast_src_ip 192.168.1.21##（本地IP地址）</p><p>unicast_peer {</p><p>​192.168.1.22##（对端IP地址）此地址一定不能忘记</p><p>}</p></blockquote><p><strong>主服务器server01配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在vrrp_instace段中加入</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">本地IP</span></span><br><span class="line">unicast_src_ip 192.168.17.102</span><br><span class="line">unicast_peer &#123;</span><br><span class="line">    #对象IP  发送vrrp包给备服务器</span><br><span class="line">    192.168.17.101</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>备服务器server03配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在vrrp_instace段中加入</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">本地IP</span></span><br><span class="line">unicast_src_ip 192.168.17.101</span><br><span class="line">unicast_peer &#123;</span><br><span class="line">    #对象IP  发送vrrp包给备服务器</span><br><span class="line">    192.168.17.102</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>tcpdump抓vrrp包的方式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell &gt; tcpdump vrrp -n</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 企业级运维 </tag>
            
            <tag> HA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码更新方法</title>
      <link href="/2024/06/29/%E4%BB%A3%E7%A0%81%E6%9B%B4%E6%96%B0%E6%96%B9%E6%B3%95/"/>
      <url>/2024/06/29/%E4%BB%A3%E7%A0%81%E6%9B%B4%E6%96%B0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝绿部署"><a href="#蓝绿部署" class="headerlink" title="蓝绿部署"></a>蓝绿部署</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-13-43-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-1-77583f.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-13-47-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-2-7a57cd.jpg" alt="蓝绿部署-2"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-13-54-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-3-30bca9.jpg" alt="蓝绿部署-3"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-13-56-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-4-1fec63.jpg" alt="蓝绿部署-4"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-14-19-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-5-a6a790.jpg" alt="蓝绿部署-5"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-14-07-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-6-4a8b8d.jpg" alt="蓝绿部署-6"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-14-28-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-7-876ad0.jpg" alt="蓝绿部署-7"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-14-13-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-8-2a35e1.jpg" alt="蓝绿部署-8"></p><p>海豚的秘密</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-14-41-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-9-aa14fe.jpg"></p><p>大家都知道海豚是一种可爱的海洋动物。但又有多少人知道，海豚可以<strong>永远不睡觉</strong>。</p><p>是什么样的能力，使得海豚可以永远保持清醒呢？</p><p>依靠的是海豚大脑特殊的运作方式。</p><p>像人一样，海豚的大脑也分为左脑和右脑两个部分。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-15-22-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-10-92af36.jpg"></p><p>在海豚活跃的状态下，左脑和右脑都是清醒的：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-15-34-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-11-88f686.jpg"></p><p>当然，海豚也是血肉之躯，也是需要休息的。在海豚休息的状态下，其中一半大脑会进入睡眠，另一半大脑仍然保持清醒，以面对各种外界情况。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-15-24-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-12-cf8988.jpg"></p><p>每隔两个小时，这种一半睡眠一半清醒的状态会进行交替，比如这一刻左脑睡眠右脑清醒，下一刻左脑清醒右脑睡眠。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-15-26-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-13-4d27fb.jpg"></p><p>这就是海豚永远不会真正睡觉的秘密。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-15-44-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-14-b6f45e.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-15-49-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-15-f56ba8.jpg" alt="蓝绿部署-15"></p><p>蓝绿部署，英文名Blue Green Deployment，是一种可以保证系统在不间断提供服务的情况下上线代码的部署方式。</p><p>如何保证系统不间断提供服务呢？</p><p>蓝绿部署的模型中包含两个集群，就好比海豚的左脑和右脑。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-16-00-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-16-523fc2.jpg"></p><p>在正常情况下（没有上线操作），集群A和集群B的代码版本是一致的，并且同时对外提供服务。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-16-08-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-17jpg-b0fc6b.jpg"></p><p>在有项目代码上线的时候，我们首先把一个集群（比如集群A）从负载列表中摘除，进行新版本的部署。集群B仍然继续提供服务。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-16-23-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-18-64a87d.jpg"></p><p>当集群A升级完毕，我们把负载均衡重新指向集群A，再把集群B从负载列表中摘除，进行新版本的部署。集群A重新提供服务。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-16-29-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-19-5fcff3.jpg"></p><p>最后，当集群B也升级完成，我们把集群B也恢复到负载列表当中。这个时候，两个集群的版本都已经升级，并且对外的服务几乎没有间断过。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-16-36-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-20-b56285.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-16-38-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2-21-6ef25f.jpg" alt="蓝绿部署-21"></p><h2 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h2><p>滚动更新，英文Rolling update，同样是一种可以保证系统在不间断提供服务的情况下上线代码的部署方式。</p><p>和蓝绿部署不同的是，滚动部署对外提供服务的版本并不是非此即彼，而是在更细的粒度下平滑完成版本的升级。</p><p>如何做到细粒度平滑升级版本呢？</p><p>滚动部署只需要一个集群，集群下的不同节点可以独立进行版本升级。比如在一个16节点的集群中，我们选择每次升级4个节点：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-32-39-%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0-1-571456.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-32-46-%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0-2-b72209.jpg" alt="滚动更新-2"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-32-43-%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0-3-20f4c0.jpg" alt="滚动更新-3"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-32-51-%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0-4-eaba4e.jpg" alt="滚动更新-4"></p><p>以此类推，最终所有的节点都升级了版本。</p><p><strong>蓝绿部署与滚动更新对比</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-33-00-%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0%E7%9A%84%E5%8C%BA%E5%88%AB-421a58.jpg"></p><h2 id="灰度发布（A-B测试、金丝雀部署）"><a href="#灰度发布（A-B测试、金丝雀部署）" class="headerlink" title="灰度发布（A&#x2F;B测试、金丝雀部署）"></a>灰度发布（A&#x2F;B测试、金丝雀部署）</h2><p>灰度发布是指在黑与白之间，能够平滑过渡的一种发布方式。</p><p>AB test就是一种灰度发布方式，让一部分用户继续用A，一部分用户开始用B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。</p><p>灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度，而我们平常所说的金丝雀部署也就是灰度发布的一种方式。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-35-49-%E9%87%91%E4%B8%9D%E9%9B%80%E9%83%A8%E7%BD%B2-e746bd.png" alt="1553356965915"></p><p>灰度发布&#x2F;金丝雀部署步骤：</p><ol><li><p>准备好部署各个阶段的工件，包括：构建工件，测试脚本，配置文件和部署清单文件。</p></li><li><p>从负载均衡列表中移除掉“金丝雀”服务器。</p></li><li><p>升级“金丝雀”应用（排掉原有流量并进行部署）。</p></li><li><p>对应用进行自动化测试。</p></li><li><p>将“金丝雀”服务器重新添加到负载均衡列表中（连通性和健康检查）。</p></li><li><p>如果“金丝雀”在线使用测试成功，升级剩余的其他服务器。（否则就回滚）</p></li></ol><p>除此之外灰度发布还可以设置路由权重，动态调整不同的权重来进行新老版本的验证。</p><blockquote><p>17世纪，英国矿井工人发现，金丝雀对瓦斯这种气体十分敏感。空气中哪怕有极其微量的瓦斯，金丝雀也会停止歌唱；而当瓦斯含量超过一定限度时，虽然鲁钝的人类毫无察觉，金丝雀却早已毒发身亡。当时在采矿设备相对简陋的条件下，工人们每次下井都会带上一只金丝雀作为“瓦斯检测指标”，以便在危险状况下紧急撤离。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 灰度发布 </tag>
            
            <tag> 自动化运维 </tag>
            
            <tag> 蓝绿部署 </tag>
            
            <tag> 滚动更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>持续交付(CD)</title>
      <link href="/2024/06/29/%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98-CD/"/>
      <url>/2024/06/29/%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98-CD/</url>
      
        <content type="html"><![CDATA[<h1 id="持续交付-CD"><a href="#持续交付-CD" class="headerlink" title="持续交付(CD)"></a>持续交付(CD)</h1><p><strong>Continuous Delivery，简称CD</strong></p><p>​       持续交付是指软件开发过程，从原始需求到最终产品开发过程中，较短周期内以需求的小颗粒度（小批量）频繁提交的过程。主要指集成后的代码在类生产环境(测试环境,预发布环境等)中测试并及时反馈的过程.</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-12-03-%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98-8e4cf0.png"></p><p><strong>目的</strong></p><ol><li>开发过程的快速迭代，小步快跑，及时纠正偏离主线</li><li>小颗粒度实现，避免颗粒度大，出现问题解决麻烦</li><li>迅速反馈软件功能，避免方向性错误</li><li>团队角色（含客户）协作密切，减少时间浪费</li></ol><h2 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h2><p><strong>Continuous Deployment，简称CD</strong></p><p>​      基于持续交付的基础上，把功能稳定，符合产品需求的版本有方法地部署至生产环境中。可以看作是持续交付的最后一环。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-13-05-%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2-1dccf2.png"></p><h2 id="持续发布"><a href="#持续发布" class="headerlink" title="持续发布"></a>持续发布</h2><p><strong>Continuous Release，简称CR</strong></p><p>​    发布是周期性或不定期地对项目在部署后，进行整体软件版本的更新，例如，更新新功能或展示页面框架等。</p><p><strong>目的</strong></p><ol><li>产品的快速迭代，小步快跑</li><li>适应市场变化</li><li>匹配市场策略</li><li>应对市场风险</li></ol><h2 id="持续测试"><a href="#持续测试" class="headerlink" title="持续测试"></a>持续测试</h2><p><strong>Continuous Testing,简称CT</strong></p><p>​       持续测试是贯穿着整个软件开发过程，验证程序员提交代码，检验合规性及降低bug,减少最终错误，实现敏捷及精益开发。</p><p><strong>目的</strong></p><ol><li>为了降低开发、部署、发布等可能出现的错误</li><li>防止代码出错</li><li>防止功能出错</li><li>防止业务逻辑出错等</li></ol>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 自动化运维 </tag>
            
            <tag> CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>持续集成(CI)</title>
      <link href="/2024/06/29/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-CI/"/>
      <url>/2024/06/29/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-CI/</url>
      
        <content type="html"><![CDATA[<h1 id="持续集成-CI"><a href="#持续集成-CI" class="headerlink" title="持续集成(CI)"></a>持续集成(CI)</h1><p><strong>Continuous integration,简称CI</strong></p><p>​       是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/20-07-09-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-71341f.png"></p><p><strong>目的</strong></p><p>​        持续集成的目的不是减少build失败的次数，而是<strong>尽早发现问题，在最短的时间内解决问题</strong>，减少风险和浪费。从而让产品开发流程更加敏捷，缩短产品开发周期，在产品上线后，让用户用得更加顺畅。</p><p>​        在没有应用持续集成之前，传统的开发模式是项目一开始就划分模块，每个开发人员分别负责一个模块，等所有的代码都开发完成之后再集成到一起提交给测试人员，随着软件技术团队的发展，软件已经不能简单地通过划分模块的方式来开发，需要项目内部相互协作，划分模块这种传统的模式的弊端也越来越明显。由于很多bug在项目早期的设计、编码阶段就引入，到最后集成测试时才发现问题，开发人员需要花费大量的时间来定位bug，加上软件的复杂性，bug的定位就更难了，甚至出现不得不调整底层架构的情况。这种情况的发生不仅仅对测试进度造成影响，而且会拖长整个项目周期。</p><p>​       而持续集成可以有效解决软件开发过程中的许多问题，在集成测试阶段之前就帮助开发人员发现问题，从而可以有效的确保软件质量，减小项目的风险，使软件开发团队从容的面对各种变化。持续集成报告中可以体现目前项目进度，哪部分需要已经实现，哪些代码已经通过自动化测试，代码质量如何，让开发团队和项目组了解项目的真实状况。</p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 自动化运维 </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab部署</title>
      <link href="/2024/06/29/GitLab%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/06/29/GitLab%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a>gitlab</h1><h2 id="脚本部署"><a href="#脚本部署" class="headerlink" title="脚本部署"></a>脚本部署</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">YELLOW=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">NC=<span class="string">&#x27;\033[0m&#x27;</span> <span class="comment"># No Color</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机 IP 地址</span></span><br><span class="line">IP_ADDRESS=<span class="variable">$</span>(hostname <span class="literal">-I</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;开始安装 GitLab...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 GitLab</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;正在下载 GitLab...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> gitlab<span class="literal">-ce-11</span>.<span class="number">8.2</span><span class="literal">-ce</span>.<span class="number">0</span>.el7.x86_64.rpm https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJlVGJLOFM2N1lRckVoOHM_ZT1TaXBWZGU.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 GitLab</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;正在安装 GitLab...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line">rpm <span class="literal">-ivh</span> gitlab<span class="literal">-ce-11</span>.<span class="number">8.2</span><span class="literal">-ce</span>.<span class="number">0</span>.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 GitLab</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;正在配置 GitLab...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s|^external_url .*|external_url &#x27;http://<span class="variable">$IP_ADDRESS</span>&#x27;|&quot;</span> /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 GitLab</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;正在初始化 GitLab，这可能需要几分钟...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line">gitlab<span class="literal">-ctl</span> reconfigure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 GitLab 状态</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;正在检查 GitLab 状态...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line">gitlab<span class="literal">-ctl</span> status</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;GitLab 安装和配置完成！<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;请使用浏览器访问 http://<span class="variable">$IP_ADDRESS</span> 来完成最后的设置。<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="gitlab安装与配置"><a href="#gitlab安装与配置" class="headerlink" title="gitlab安装与配置"></a>gitlab安装与配置</h2><p>准备一台新虚拟机来安装(内存可适当调大点,比如1.5G)</p><p>安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm2</span> ~]<span class="comment"># rpm -ivh gitlab-ce-11.8.2-ce.0.el7.x86_64.rpm</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm2</span> ~]<span class="comment"># vim /etc/gitlab/gitlab.rb</span></span><br><span class="line"><span class="number">13</span> external_url <span class="string">&#x27;http://10.1.1.12&#x27;</span>修改成gitlab服务器的IP地址，对外服务</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm2</span> ~]<span class="comment"># gitlab-ctl reconfigure</span></span><br><span class="line">时间较久,需要<span class="number">3</span>分钟左右时间，会自动帮助配置各个组件,并启动</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm2</span> ~]<span class="comment"># gitlab-ctl status</span></span><br><span class="line">run: alertmanager: (pid <span class="number">10563</span>) <span class="number">36</span>s; run: log: (pid <span class="number">10234</span>) <span class="number">64</span>s</span><br><span class="line">run: gitaly: (pid <span class="number">10343</span>) <span class="number">39</span>s; run: log: (pid <span class="number">9380</span>) <span class="number">163</span>s</span><br><span class="line">run: gitlab<span class="literal">-monitor</span>: (pid <span class="number">10417</span>) <span class="number">38</span>s; run: log: (pid <span class="number">10082</span>) <span class="number">80</span>s</span><br><span class="line">run: gitlab<span class="literal">-workhorse</span>: (pid <span class="number">10364</span>) <span class="number">39</span>s; run: log: (pid <span class="number">9835</span>) <span class="number">104</span>s</span><br><span class="line">run: logrotate: (pid <span class="number">9916</span>) <span class="number">93</span>s; run: log: (pid <span class="number">9952</span>) <span class="number">90</span>s</span><br><span class="line">run: nginx: (pid <span class="number">9876</span>) <span class="number">99</span>s; run: log: (pid <span class="number">9908</span>) <span class="number">96</span>s</span><br><span class="line">run: node<span class="literal">-exporter</span>: (pid <span class="number">10399</span>) <span class="number">38</span>s; run: log: (pid <span class="number">10003</span>) <span class="number">84</span>s</span><br><span class="line">run: postgres<span class="literal">-exporter</span>: (pid <span class="number">10585</span>) <span class="number">35</span>s; run: log: (pid <span class="number">10267</span>) <span class="number">60</span>s</span><br><span class="line">run: postgresql: (pid <span class="number">9499</span>) <span class="number">158</span>s; run: log: (pid <span class="number">9562</span>) <span class="number">157</span>s</span><br><span class="line">run: prometheus: (pid <span class="number">10452</span>) <span class="number">37</span>s; run: log: (pid <span class="number">10161</span>) <span class="number">70</span>s</span><br><span class="line">run: redis: (pid <span class="number">9275</span>) <span class="number">170</span>s; run: log: (pid <span class="number">9296</span>) <span class="number">169</span>s</span><br><span class="line">run: redis<span class="literal">-exporter</span>: (pid <span class="number">10426</span>) <span class="number">38</span>s; run: log: (pid <span class="number">10127</span>) <span class="number">74</span>s</span><br><span class="line">run: sidekiq: (pid <span class="number">9787</span>) <span class="number">111</span>s; run: log: (pid <span class="number">9808</span>) <span class="number">110</span>s</span><br><span class="line">run: unicorn: (pid <span class="number">9731</span>) <span class="number">117</span>s; run: log: (pid <span class="number">9781</span>) <span class="number">114</span>s</span><br></pre></td></tr></table></figure><h2 id="gitlab登录"><a href="#gitlab登录" class="headerlink" title="gitlab登录"></a>gitlab登录</h2><p>设置密码(密码需要最少8位)</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-11-00-gitlab%E8%AE%BE%E7%BD%AE%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81-e22505.png" alt="1553099976968"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-11-02-gitlab%E7%99%BB%E5%BD%95-7c7d10.png" alt="1553100116028"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-11-08-gitlab%E4%B8%BB%E7%95%8C%E9%9D%A2-7ca20b.png" alt="1553355384280"></p><h2 id="gitlab设置"><a href="#gitlab设置" class="headerlink" title="gitlab设置"></a>gitlab设置</h2><p>配置邮箱服务的用途：</p><ul><li><p>账号注册时，邮件验证</p></li><li><p>有合并请求时，邮件通知</p></li><li><p>修改密码时，通过邮件修改</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-11-11-gitlab%E8%AE%BE%E7%BD%AE1-46a981.png" alt="1553100285396"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-11-17-gitlab%E8%AE%BE%E7%BD%AE2-9bd0c3.png" alt="1552840723803"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-14-20-gitlab%E8%AE%BE%E7%BD%AE3-4e77b8.png" alt="1552841018888"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-11-23-gitlab%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81-39fbc5.png" alt="1552841328279"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-11-25-gitlab%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%812-4f5bad.png" alt="1552841479545"></p><h2 id="开发者设置ssh密钥"><a href="#开发者设置ssh密钥" class="headerlink" title="开发者设置ssh密钥"></a>开发者设置ssh密钥</h2><p>第1步: 在开发者电脑上产生空密码密钥</p><p>(&#x3D;&#x3D;<strong>注意:</strong>&#x3D;&#x3D; 可以直接使用上面实验的github开发者的密钥，也可以模拟新的开发者重新产生，再做一遍。这里我们再做一次)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># ssh-keygen -t rsa -f /root/.ssh/id_rsa -C &quot;dev1@itcast.cn&quot; -N &quot;&quot;</span></span><br></pre></td></tr></table></figure><p>第2步: 查看并复制公钥</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># cat /root/.ssh/id_rsa.pub </span></span><br><span class="line">ssh<span class="literal">-rsa</span> AAAAB3NzaC1yc2EAAAADAQABAAABAQDAJW+LIFdcC0DI6oM6eOf6+EPks2ODyPaR/cAWKeFcfnSvuU84ZFYtziQyJYf1RdXwxo6vH+XyBNwOGrTLB1m33RvAgUznVhBH3KA9l1OimYSqEdQJ+<span class="number">4</span>g+LVDkrgj/vIRc1dv7wDglyYGOOFfRftRK/QEHK911MOyJCK1nH0rr7eE7sP33aD6I6DoIfaSC0UUDPfwHDg/bQUDsF/ez4tEPOTSeJ2jVyytArHOAjtflL1+ZvP25F4osdSXju6IG8i7HHiZ0sz1WuQEYH8KzrY/zf8DBFrnOB4vl2UTNwP/NjT06TY78gKMJqcpf1maZR3YIeYlA03ccSOWSZuqq50eP dev1@itcast.cn</span><br></pre></td></tr></table></figure><p>第3步: 在gitlab界面添加公钥</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-14-31-gitlab%E5%A2%9E%E5%8A%A0ssh%E5%AF%86%E9%92%A5-15c77d.png" alt="1553180687735"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-14-33-gitlab%E5%A2%9E%E5%8A%A0ssh%E5%AF%86%E9%92%A52-7e14f7.png" alt="1553180797789"></p><h2 id="gitlab创建仓库"><a href="#gitlab创建仓库" class="headerlink" title="gitlab创建仓库"></a>gitlab创建仓库</h2><p>第1步: 在gitlab上创建项目(其实也就是存放代码的仓库)</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-14-41-gitlab%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-350a31.png" alt="1553355185888"></p><p>第2步: 自定义项目名称，描述等</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-14-42-gitlab%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%932-0d6f19.png" alt="1553355075757"></p><p>第3步: 验证创建好的项目</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-14-47-gitlab%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%933-dcad58.png" alt="1552898610755"></p><h2 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h2><p>第1步: 查看gitlab上的帮助</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-14-54-gitlab%E5%8F%82%E8%80%83%E4%BD%BF%E7%94%A8%E4%BB%93%E5%BA%93%E5%B8%AE%E5%8A%A9-5f0910.png" alt="1553180947454"></p><p>第2步: 在开发者电脑上设置身份标识</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># git config --global user.name &quot;daniel&quot;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># git config --global user.email &quot;daniel@itcast.cn&quot;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># git clone git@10.1.1.12:root/mywebsite.git</span></span><br></pre></td></tr></table></figure><p>第3步: 在开发者电脑上使用git命令clone，并上传项目</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> ~]<span class="comment"># cd mywebsite/</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">mywebsite</span>]<span class="comment"># echo &quot;test web&quot; &gt; README.md</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">mywebsite</span>]<span class="comment"># git add .</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">mywebsite</span>]<span class="comment"># git commit -m &quot;add README.md&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">vm1</span> <span class="type">mywebsite</span>]<span class="comment"># git push -u origin master</span></span><br></pre></td></tr></table></figure><p>第4步: 验证</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/22-14-58-%E9%AA%8C%E8%AF%81%E6%96%87%E4%BB%B6%E8%A2%AB%E6%88%90%E5%8A%9Fpush%E5%88%B0gitlab-ffd723.png" alt="1552900062943"></p><p><strong>小结</strong></p><p>git  分布式版本控制工具</p><p>github和gitlab都属于远程仓库</p><p>git clone: 把远程仓库的项目代码下载到本地</p><p>git push: 把本地的项目代码上传到远程仓库</p><p>git pull:  把远程仓库的项目代码更新到本地</p><p>远程仓库两种访问方法:</p><ul><li>http  </li><li>ssh  使用空密码密钥做免密</li></ul>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>⭐一键SHELL脚本⭐</title>
      <link href="/2024/06/28/%E4%B8%80%E9%94%AESHELL%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/06/28/%E4%B8%80%E9%94%AESHELL%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="SHELL脚本合集"><a href="#SHELL脚本合集" class="headerlink" title="SHELL脚本合集"></a>SHELL脚本合集</h1><h2 id="1-Mysql5-7一键安装脚本【GLIBC版本安装】"><a href="#1-Mysql5-7一键安装脚本【GLIBC版本安装】" class="headerlink" title="1.Mysql5.7一键安装脚本【GLIBC版本安装】"></a>1.Mysql5.7一键安装脚本【GLIBC版本安装】</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载MySQL压缩包</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> mysql<span class="literal">-5</span>.<span class="number">7.31</span><span class="literal">-linux-glibc2</span>.<span class="number">12</span><span class="literal">-x86_64</span>.tar.gz https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJlS2lCbHAtVlEtV240VG8_ZT1iaVk5a04.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名下载的文件</span></span><br><span class="line"><span class="built_in">mv</span> mysql<span class="literal">-5</span>.<span class="number">7.31</span><span class="literal">-linux-glibc2</span>.<span class="number">12</span><span class="literal">-x86_64</span>.tar.gz mysql<span class="literal">-5</span>.<span class="number">7.31</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查libaio是否安装，如果未安装则安装它</span></span><br><span class="line"><span class="keyword">if</span> ! rpm <span class="literal">-q</span> libaio &amp;&gt; /dev/null; then</span><br><span class="line">    yum install libaio <span class="literal">-y</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压MySQL压缩包</span></span><br><span class="line">tar <span class="literal">-xf</span> mysql<span class="literal">-5</span>.<span class="number">7.31</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动MySQL目录</span></span><br><span class="line"><span class="built_in">mv</span> mysql<span class="literal">-5</span>.<span class="number">7.31</span><span class="literal">-linux-glibc2</span>.<span class="number">12</span><span class="literal">-x86_64</span> /usr/local/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建MySQL用户</span></span><br><span class="line">useradd <span class="literal">-r</span> <span class="literal">-s</span> /sbin/nologin mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除旧的my.cnf文件</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到MySQL安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建mysql-files目录并设置权限</span></span><br><span class="line">mkdir mysql<span class="literal">-files</span></span><br><span class="line">chown mysql:mysql mysql<span class="literal">-files</span></span><br><span class="line">chmod <span class="number">750</span> mysql<span class="literal">-files</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化MySQL数据库</span></span><br><span class="line">bin/mysqld <span class="literal">--initialize</span> <span class="literal">--user</span>=mysql <span class="literal">--basedir</span>=/usr/local/mysql &amp;&gt; /root/password.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置SSL密钥</span></span><br><span class="line">bin/mysqld_ssl_rsa_setup <span class="literal">--datadir</span>=/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 复制mysql.server脚本到/etc/init.d目录</span></span><br><span class="line"><span class="built_in">cp</span> support<span class="literal">-files</span>/mysql.server /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动MySQL服务</span></span><br><span class="line">service mysqld <span class="built_in">start</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将MySQL的bin目录添加到PATH环境变量中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/usr/local/mysql/bin&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改root密码为&#x27;root&#x27;</span></span><br><span class="line">TEMP_PASS=<span class="variable">$</span>(grep <span class="string">&#x27;temporary password&#x27;</span> /root/password.txt | awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个临时的MySQL配置文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[client]</span></span><br><span class="line"><span class="string">user=root</span></span><br><span class="line"><span class="string">password=<span class="variable">$TEMP_PASS</span>&quot;</span> &gt; /root/.my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用临时配置文件修改密码</span></span><br><span class="line">mysql <span class="literal">--defaults-file</span>=/root/.my.cnf <span class="literal">--connect-expired-password</span> <span class="literal">-e</span> <span class="string">&quot;ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;; FLUSH PRIVILEGES;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除临时配置文件</span></span><br><span class="line"><span class="built_in">rm</span> /root/.my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证新密码是否生效</span></span><br><span class="line"><span class="keyword">if</span> mysql <span class="literal">-uroot</span> <span class="literal">-proot</span> <span class="literal">-e</span> <span class="string">&quot;SELECT &#x27;Password changed successfully&#x27;&quot;</span> &amp;&gt; /dev/null; then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;MySQL root password has been successfully set to &#x27;root&#x27;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Failed to change MySQL root password&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-YUM一键换源【腾讯源】"><a href="#2-YUM一键换源【腾讯源】" class="headerlink" title="2.YUM一键换源【腾讯源】"></a>2.YUM一键换源【腾讯源】</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色变量</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">YELLOW=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">BLUE=<span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">NC=<span class="string">&#x27;\033[0m&#x27;</span> <span class="comment"># No Color</span></span><br><span class="line"></span><br><span class="line">yum install <span class="built_in">wget</span> <span class="literal">-y</span></span><br><span class="line"><span class="comment"># 将CentOS-Base.repo备份</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;正在备份CentOS-Base.repo...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS<span class="literal">-Base</span>.repo /etc/yum.repos.d/CentOS<span class="literal">-Base</span>.repo.backup</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]; then</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;备份成功!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;RED&#125;备份失败!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载新的CentOS-Base.repo</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;正在下载新的CentOS-Base.repo...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /etc/yum.repos.d/CentOS<span class="literal">-Base</span>.repo http://mirrors.cloud.tencent.com/repo/centos7_base.repo</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]; then</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;下载成功!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;RED&#125;下载失败!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理并生成新的缓存</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;正在清理并生成新的缓存...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]; then</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;操作成功!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;RED&#125;操作失败!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;所有操作已完成!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-一键关闭防火墙等操作"><a href="#3-一键关闭防火墙等操作" class="headerlink" title="3.一键关闭防火墙等操作"></a>3.一键关闭防火墙等操作</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setenforce <span class="number">0</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">iptables <span class="operator">-F</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl stop firewalld &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl disable firewalld &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl stop NetworkManager &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl disable NetworkManager &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m防火墙和网络管理器已关闭\033[0m&quot;</span></span><br></pre></td></tr></table></figure><h2 id="4-Nacos一键安装【基于Jdk1-8-Nacos-1-4-1】"><a href="#4-Nacos一键安装【基于Jdk1-8-Nacos-1-4-1】" class="headerlink" title="4.Nacos一键安装【基于Jdk1.8;Nacos-1.4.1】"></a>4.Nacos一键安装【基于Jdk1.8;Nacos-1.4.1】</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体颜色</span></span><br><span class="line">red=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">green=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">yellow=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">blue=<span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">magenta=<span class="string">&#x27;\033[0;35m&#x27;</span></span><br><span class="line">cyan=<span class="string">&#x27;\033[0;36m&#x27;</span></span><br><span class="line">reset=<span class="string">&#x27;\033[0m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;green&#125;开始安装 Nacos...<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查命令是否已安装，如果未安装则自动安装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_command</span><span class="params">()</span></span> &#123;</span><br><span class="line">    local command=<span class="variable">$1</span></span><br><span class="line">    <span class="keyword">if</span> ! command <span class="literal">-v</span> <span class="string">&quot;<span class="variable">$command</span>&quot;</span> &amp;&gt; /dev/null; then</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;magenta&#125;正在安装 <span class="variable">$command</span>...<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> [[ -<span class="type">n</span> <span class="variable">$</span>(<span class="type">command</span> -<span class="type">v</span> <span class="type">apt</span>) ]]; then</span><br><span class="line">            sudo apt<span class="literal">-get</span> install <span class="literal">-y</span> <span class="string">&quot;<span class="variable">$command</span>&quot;</span></span><br><span class="line">        elif [[ -<span class="type">n</span> <span class="variable">$</span>(<span class="type">command</span> -<span class="type">v</span> <span class="type">yum</span>) ]]; then</span><br><span class="line">            sudo yum install <span class="literal">-y</span> <span class="string">&quot;<span class="variable">$command</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;red&#125;无法自动安装 <span class="variable">$command</span>，请手动安装后重试。<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">            <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;green&#125;开始安装 Nacos...<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 JDK 安装包</span></span><br><span class="line">jdk_file=<span class="string">&quot;/opt/jdk-8u144-linux-x64.tar.gz&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ ! -<span class="type">f</span> <span class="string">&quot;<span class="variable">$jdk_file</span>&quot;</span> ]; then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在下载 JDK 安装包...\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">wget</span> https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJkb0tpV3M0enp0a1VTZWs_ZT1Hek5oWHg..tar.gz <span class="literal">-O</span> <span class="variable">$jdk_file</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m下载完成\033[0m&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m检测到 JDK 安装包已存在\033[0m&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在安装 JDK...\033[0m&quot;</span></span><br><span class="line">tar <span class="literal">-zxf</span> <span class="variable">$jdk_file</span> <span class="literal">-C</span> /usr/local/ &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">ln <span class="literal">-sf</span> /usr/local/jdk1.<span class="number">8.0</span>_144 /usr/local/jdk</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在配置环境变量...\033[0m&quot;</span></span><br><span class="line">touch /opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=$JAVA_HOME/bin:$PATH&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH JAVA_HOME CLASSPATH&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line">sed <span class="literal">-i</span> <span class="literal">-e</span> <span class="string">&#x27;$r /opt/temp.txt&#x27;</span> /etc/profile</span><br><span class="line"><span class="built_in">rm</span> <span class="operator">-f</span> /opt/temp.txt</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m JDK 安装完成\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">setenforce <span class="number">0</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">iptables <span class="operator">-F</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl stop firewalld &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl disable firewalld &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl stop NetworkManager &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl disable NetworkManager &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m防火墙和网络管理器已关闭\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 下载并解压 Nacos</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;yellow&#125;2. 下载并解压 Nacos<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">nacos_url=<span class="string">&quot;https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJkM1pFbnRkaXFiRERFMEE_ZT1DSVdCTjI..tar.gz&quot;</span></span><br><span class="line">nacos_file=<span class="string">&quot;nacos-server-1.4.1.tar.gz&quot;</span></span><br><span class="line">nacos_dir=<span class="string">&quot;/usr/local/src&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -<span class="type">f</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/<span class="variable">$</span>&#123;nacos_file&#125;&quot;</span> ]; then</span><br><span class="line">    <span class="built_in">wget</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_url&#125;&quot;</span> <span class="literal">-O</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/<span class="variable">$</span>&#123;nacos_file&#125;&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">tar <span class="literal">-xzvf</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/<span class="variable">$</span>&#123;nacos_file&#125;&quot;</span> <span class="literal">-C</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;&quot;</span></span><br><span class="line"><span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/<span class="variable">$</span>&#123;nacos_file&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;green&#125;Nacos 下载并解压完成<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 配置端口 (如果需要)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;yellow&#125;3. 配置端口 (如果需要)<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;是否需要修改 Nacos 默认端口 8848? (y/n) &quot;</span> change_port</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$change_port</span>&quot;</span> == <span class="string">&quot;y&quot;</span> ]; then</span><br><span class="line">    read <span class="literal">-p</span> <span class="string">&quot;请输入新的端口号: &quot;</span> new_port</span><br><span class="line">    nacos_conf_dir=<span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/nacos/conf&quot;</span></span><br><span class="line">    sed <span class="literal">-i</span> <span class="string">&quot;s/server.port=8848/server.port=<span class="variable">$</span>&#123;new_port&#125;/g&quot;</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_conf_dir&#125;/application.properties&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;green&#125;Nacos 端口已修改为 <span class="variable">$</span>&#123;new_port&#125;<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;cyan&#125;使用默认端口 8848<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 启动 Nacos</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;yellow&#125;4. 启动 Nacos<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">nacos_bin_dir=<span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/nacos/bin&quot;</span></span><br><span class="line">sh <span class="string">&quot;<span class="variable">$</span>&#123;nacos_bin_dir&#125;/startup.sh&quot;</span> <span class="literal">-m</span> standalone</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;green&#125;Nacos 已成功启动!<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-一键部署GitLab"><a href="#5-一键部署GitLab" class="headerlink" title="5.一键部署GitLab"></a>5.一键部署GitLab</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">YELLOW=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">NC=<span class="string">&#x27;\033[0m&#x27;</span> <span class="comment"># No Color</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机 IP 地址</span></span><br><span class="line">IP_ADDRESS=<span class="variable">$</span>(hostname <span class="literal">-I</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;开始安装 GitLab...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line">yum install <span class="built_in">wget</span> <span class="literal">-y</span></span><br><span class="line"><span class="comment"># 下载 GitLab</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;正在下载 GitLab...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> gitlab<span class="literal">-ce-11</span>.<span class="number">8.2</span><span class="literal">-ce</span>.<span class="number">0</span>.el7.x86_64.rpm https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJlVGJLOFM2N1lRckVoOHM_ZT1TaXBWZGU.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 GitLab</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;正在安装 GitLab...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line">rpm <span class="literal">-ivh</span> gitlab<span class="literal">-ce-11</span>.<span class="number">8.2</span><span class="literal">-ce</span>.<span class="number">0</span>.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 GitLab</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;正在配置 GitLab...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s|^external_url .*|external_url &#x27;http://<span class="variable">$IP_ADDRESS</span>&#x27;|&quot;</span> /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 GitLab</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;正在初始化 GitLab，这可能需要几分钟...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line">gitlab<span class="literal">-ctl</span> reconfigure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 GitLab 状态</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;正在检查 GitLab 状态...<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line">gitlab<span class="literal">-ctl</span> status</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;GitLab 安装和配置完成！<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;请使用浏览器访问 http://<span class="variable">$IP_ADDRESS</span> 来完成最后的设置。<span class="variable">$</span>&#123;NC&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-一键部署jenkins"><a href="#6-一键部署jenkins" class="headerlink" title="6.一键部署jenkins"></a>6.一键部署jenkins</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建jenkins目录</span></span><br><span class="line">mkdir /opt/jenkins</span><br><span class="line"><span class="built_in">cd</span> /opt/jenkins</span><br><span class="line"><span class="comment">#下载jenkins.war文件</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> jenkins.war https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJlc3preXI4cG5FSVZ6VlU_ZT1pZ3E3N3Y.war <span class="comment">#提权</span></span><br><span class="line">chmod +x /opt/jenkins/jenkins.war</span><br><span class="line"><span class="comment">#下载字体库</span></span><br><span class="line">yum install dejavu<span class="literal">-sans-fonts</span> <span class="literal">-y</span></span><br><span class="line">yum install fontconfig <span class="literal">-y</span></span><br><span class="line"><span class="built_in">fc</span><span class="literal">-cache</span> <span class="literal">--force</span></span><br><span class="line"><span class="comment">#原神启动</span></span><br><span class="line">java <span class="literal">-jar</span> /opt/jenkins/jenkins.war <span class="literal">--httpPort</span>=<span class="number">9090</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-一键部署JDK17"><a href="#7-一键部署JDK17" class="headerlink" title="7.一键部署JDK17"></a>7.一键部署JDK17</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># -------------------------------------------------</span></span><br><span class="line"><span class="comment"># Script Name: java.sh</span></span><br><span class="line"><span class="comment"># Author: Flaw</span></span><br><span class="line"><span class="comment"># -------------------------------------------------</span></span><br><span class="line"><span class="comment"># 欢迎语</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[36m</span></span><br><span class="line"><span class="string">███╗   ██╗ ██████╗     ██╗  ██╗ ██████╗ ███╗   ███╗███████╗    ██╗     ██╗██╗  ██╗███████╗    </span></span><br><span class="line"><span class="string">████╗  ██║██╔═══██╗    ██║  ██║██╔═══██╗████╗ ████║██╔════╝    ██║     ██║██║ ██╔╝██╔════╝    </span></span><br><span class="line"><span class="string">██╔██╗ ██║██║   ██║    ███████║██║   ██║██╔████╔██║█████╗      ██║     ██║█████╔╝ █████╗      </span></span><br><span class="line"><span class="string">██║╚██╗██║██║   ██║    ██╔══██║██║   ██║██║╚██╔╝██║██╔══╝      ██║     ██║██╔═██╗ ██╔══╝      </span></span><br><span class="line"><span class="string">██║ ╚████║╚██████╔╝    ██║  ██║╚██████╔╝██║ ╚═╝ ██║███████╗    ███████╗██║██║  ██╗███████╗    </span></span><br><span class="line"><span class="string">╚═╝  ╚═══╝ ╚═════╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝    ╚══════╝╚═╝╚═╝  ╚═╝╚══════╝    </span></span><br><span class="line"><span class="string">                                                                                              </span></span><br><span class="line"><span class="string"> ██╗██████╗ ███████╗    ██████╗     ██████╗     ██╗                                           </span></span><br><span class="line"><span class="string">███║╚════██╗╚════██║   ██╔═████╗   ██╔═████╗   ███║                                           </span></span><br><span class="line"><span class="string">╚██║ █████╔╝    ██╔╝   ██║██╔██║   ██║██╔██║   ╚██║                                           </span></span><br><span class="line"><span class="string"> ██║██╔═══╝    ██╔╝    ████╔╝██║   ████╔╝██║    ██║                                           </span></span><br><span class="line"><span class="string"> ██║███████╗   ██║  ██╗╚██████╔╝██╗╚██████╔╝██╗ ██║                                           </span></span><br><span class="line"><span class="string"> ╚═╝╚══════╝   ╚═╝  ╚═╝ ╚═════╝ ╚═╝ ╚═════╝ ╚═╝ ╚═╝</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">BY: \033[32mFlaw\033[0m</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查用户是否为root</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$</span>(id -u)&quot;</span> != <span class="string">&quot;0&quot;</span> ]; then</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m脚本运行中需要root权限,请提权后重试\033[0m&quot;</span> <span class="number">1</span>&gt;&amp;<span class="number">2</span></span><br><span class="line">        <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">clear</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否已安装必要的命令</span></span><br><span class="line">required_commands=(<span class="string">&quot;wget&quot;</span> <span class="string">&quot;rpm&quot;</span> <span class="string">&quot;tar&quot;</span> <span class="string">&quot;ln&quot;</span> <span class="string">&quot;sed&quot;</span> <span class="string">&quot;iptables&quot;</span> <span class="string">&quot;systemctl&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> cmd <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$</span>&#123;required_commands[@]&#125;&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> ! command <span class="literal">-v</span> <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span>; then</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m检测到缺少 <span class="variable">$cmd</span> 命令,正在安装...\033[0m&quot;</span></span><br><span class="line">        yum install <span class="literal">-y</span> <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span></span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查本地是否已安装 Java 环境</span></span><br><span class="line">installed_java=<span class="variable">$</span>(rpm <span class="literal">-qa</span> | grep <span class="literal">-E</span> <span class="string">&#x27;^java-|^jdk-&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">n</span> <span class="string">&quot;<span class="variable">$installed_java</span>&quot;</span> ]; then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m检测到本地已安装 Java 环境,正在卸载...\033[0m&quot;</span></span><br><span class="line">    rpm <span class="literal">-e</span> <span class="literal">--nodeps</span> <span class="variable">$installed_java</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m卸载完成\033[0m&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m本地未安装 Java 环境\033[0m&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 JDK 安装包</span></span><br><span class="line">jdk_file=<span class="string">&quot;/opt/jdk-17.0.10_linux-x64_bin.tar.gz&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ ! -<span class="type">f</span> <span class="string">&quot;<span class="variable">$jdk_file</span>&quot;</span> ]; then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在下载 JDK 安装包...\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">wget</span>  https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJmT0dMZ3ZVLUY0WGlINDA_ZT1PbEc3VEI.tar.gz <span class="literal">-O</span> <span class="variable">$jdk_file</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m下载完成\033[0m&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m检测到 JDK 安装包已存在\033[0m&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在安装 JDK...\033[0m&quot;</span></span><br><span class="line">tar <span class="literal">-zxf</span> <span class="variable">$jdk_file</span> <span class="literal">-C</span> /usr/local/ &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">ln <span class="literal">-sf</span> /usr/local/jdk<span class="literal">-17</span>.<span class="number">0.10</span> /usr/local/jdk</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在配置环境变量...\033[0m&quot;</span></span><br><span class="line">touch /opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=$JAVA_HOME/bin:$PATH&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH JAVA_HOME CLASSPATH&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line">sed <span class="literal">-i</span> <span class="literal">-e</span> <span class="string">&#x27;$r /opt/temp.txt&#x27;</span> /etc/profile</span><br><span class="line"><span class="built_in">rm</span> <span class="operator">-f</span> /opt/temp.txt</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m JDK 安装完成\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">setenforce <span class="number">0</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">iptables <span class="operator">-F</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl stop firewalld &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl disable firewalld &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl stop NetworkManager &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl disable NetworkManager &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m防火墙和网络管理器已关闭\033[0m&quot;</span></span><br></pre></td></tr></table></figure><h2 id="8-一键部署安装Docker"><a href="#8-一键部署安装Docker" class="headerlink" title="8.一键部署安装Docker"></a>8.一键部署安装Docker</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并清理现有的Docker环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m检查并清理现有的Docker环境...\033[0m&quot;</span></span><br><span class="line"><span class="keyword">if</span> command <span class="literal">-v</span> docker &amp;&gt;/dev/null; then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m发现现有Docker环境，准备清理...\033[0m&quot;</span></span><br><span class="line">    sudo systemctl stop docker</span><br><span class="line">    sudo yum remove docker<span class="literal">-ce</span> docker<span class="literal">-ce-cli</span> containerd.io docker<span class="literal">-buildx-plugin</span> docker<span class="literal">-compose-plugin</span> docker<span class="literal">-ce-rootless-extras</span></span><br><span class="line">    sudo <span class="built_in">rm</span> <span class="literal">-rf</span> /var/lib/docker</span><br><span class="line">    sudo <span class="built_in">rm</span> <span class="literal">-rf</span> /var/lib/containerd</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m现有Docker环境已清理完成。\033[0m&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m没有发现现有Docker环境。\033[0m&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1 安装Docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （1）更新yum包到最新</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m更新yum包到最新...\033[0m&quot;</span></span><br><span class="line">sudo yum update <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （2）安装必要的软件包</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m安装必要的软件包...\033[0m&quot;</span></span><br><span class="line">sudo yum install <span class="literal">-y</span> yum<span class="literal">-utils</span> device<span class="literal">-mapper-persistent-data</span> lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># （3）设置yum源为阿里云</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m设置yum源为阿里云...\033[0m&quot;</span></span><br><span class="line">sudo yum<span class="literal">-config-manager</span> <span class="literal">--add-repo</span> http://mirrors.aliyun.com/docker<span class="literal">-ce</span>/linux/centos/docker<span class="literal">-ce</span>.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># （4）安装docker</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m安装docker...\033[0m&quot;</span></span><br><span class="line">sudo yum install docker<span class="literal">-ce</span> <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （5）安装后查看docker版本</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m查看docker版本...\033[0m&quot;</span></span><br><span class="line">docker <span class="literal">-v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2 设置ustc的镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m配置ustc镜像加速器...\033[0m&quot;</span></span><br><span class="line"><span class="comment"># 创建或编辑daemon.json文件</span></span><br><span class="line">sudo mkdir <span class="literal">-p</span> /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.3 Docker的启动与停止</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m启动docker服务...\033[0m&quot;</span></span><br><span class="line">sudo systemctl <span class="built_in">start</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选：设置Docker开机自启</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m设置Docker开机自启...\033[0m&quot;</span></span><br><span class="line">sudo systemctl enable docker</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32mDocker安装与配置完成！\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m当前Docker安装版本\033[0m&quot;</span></span><br><span class="line">docker <span class="literal">-v</span></span><br></pre></td></tr></table></figure><h2 id="9-一键部署安装docker-compose"><a href="#9-一键部署安装docker-compose" class="headerlink" title="9.一键部署安装docker-compose"></a>9.一键部署安装docker-compose</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在安装wget...\033[0m&quot;</span></span><br><span class="line">yum install <span class="built_in">wget</span> <span class="literal">-y</span></span><br><span class="line"><span class="comment"># 检查是否已安装docker-compose</span></span><br><span class="line"><span class="keyword">if</span> command <span class="literal">-v</span> docker<span class="literal">-compose</span> &amp;&gt; /dev/null</span><br><span class="line">then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;32mDocker Compose 已经安装，版本信息如下：\e[0m&quot;</span></span><br><span class="line">    docker<span class="literal">-compose</span> <span class="literal">-v</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;31m未检测到Docker Compose，开始安装...\e[0m&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载docker-compose</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;34m正在下载 Docker Compose...\e[0m&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /opt/docker<span class="literal">-compose-linux-x86_64</span> https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJmeFVpakRsVjlYUXlsOUU_ZT1Hdk1qM00..file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;34m修改权限...\e[0m&quot;</span></span><br><span class="line">chmod +x /opt/docker<span class="literal">-compose-linux-x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动到/usr/bin</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;34m移动文件到 /usr/bin 目录...\e[0m&quot;</span></span><br><span class="line"><span class="built_in">mv</span> /opt/docker<span class="literal">-compose-linux-x86_64</span> /usr/bin/docker<span class="literal">-compose</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装结果</span></span><br><span class="line"><span class="keyword">if</span> command <span class="literal">-v</span> docker<span class="literal">-compose</span> &amp;&gt; /dev/null</span><br><span class="line">then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;32mDocker Compose 安装成功，版本信息如下：\e[0m&quot;</span></span><br><span class="line">    docker<span class="literal">-compose</span> <span class="literal">-v</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;31mDocker Compose 安装失败，请检查脚本和网络连接。\e[0m&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-一键部署安装apache-maven-3-8-6"><a href="#10-一键部署安装apache-maven-3-8-6" class="headerlink" title="10.一键部署安装apache-maven-3.8.6"></a>10.一键部署安装apache-maven-3.8.6</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">MAVEN_VERSION=<span class="number">3.8</span>.<span class="number">6</span></span><br><span class="line">MAVEN_HOME=/opt/maven</span><br><span class="line">MAVEN_DOWNLOAD_LINK=<span class="string">&quot;/opt/apache-maven-3.8.6-bin.tar.gz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 彩色输出函数</span></span><br><span class="line">echo_red() &#123; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m<span class="variable">$1</span>\033[0m&quot;</span>; &#125;</span><br><span class="line">echo_green() &#123; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m<span class="variable">$1</span>\033[0m&quot;</span>; &#125;</span><br><span class="line">echo_blue() &#123; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m<span class="variable">$1</span>\033[0m&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">yum install <span class="built_in">wget</span> <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line">echo_blue <span class="string">&quot;第一步：上传并解压 Maven 到 /opt...&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> apache<span class="literal">-maven-3</span>.<span class="number">8.6</span><span class="literal">-bin</span>.tar.gz https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJlN1ZQb05adU1VV0FhWlU_ZT1SMFh2QnU.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步：上传并解压 Maven 到 /opt</span></span><br><span class="line">echo_blue <span class="string">&quot;第一步：上传并解压 Maven 到 /opt...&quot;</span></span><br><span class="line">sudo <span class="built_in">cp</span> <span class="variable">$MAVEN_DOWNLOAD_LINK</span> /opt</span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">sudo tar <span class="literal">-zxvf</span> <span class="variable">$</span>(basename <span class="variable">$MAVEN_DOWNLOAD_LINK</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：移动解压文件夹到 maven</span></span><br><span class="line">echo_blue <span class="string">&quot;第二步：移动解压文件夹到 maven...&quot;</span></span><br><span class="line">sudo <span class="built_in">mv</span> apache<span class="literal">-maven-</span><span class="variable">$MAVEN_VERSION</span> maven</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步：设置环境变量</span></span><br><span class="line">echo_blue <span class="string">&quot;第三步：设置环境变量...&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;MAVEN_HOME=<span class="variable">$</span>&#123;MAVEN_HOME&#125;&quot;</span> | sudo <span class="built_in">tee</span> <span class="literal">-a</span> /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$&#123;MAVEN_HOME&#125;/bin:$&#123;PATH&#125;&#x27;</span> | sudo <span class="built_in">tee</span> <span class="literal">-a</span> /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步：验证安装结果</span></span><br><span class="line">echo_blue <span class="string">&quot;第四步：验证安装结果...&quot;</span></span><br><span class="line">mvn <span class="literal">-version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示完成信息</span></span><br><span class="line">echo_green <span class="string">&quot;Maven 安装脚本完成。&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-一键搭建私有化仓库并上传JAVA8"><a href="#11-一键搭建私有化仓库并上传JAVA8" class="headerlink" title="11.一键搭建私有化仓库并上传JAVA8"></a>11.一键搭建私有化仓库并上传JAVA8</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机IP地址</span></span><br><span class="line">LOCAL_IP=<span class="variable">$</span>(hostname <span class="literal">-I</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色变量</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">YELLOW=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">BLUE=<span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">PURPLE=<span class="string">&#x27;\033[0;35m&#x27;</span></span><br><span class="line">CYAN=<span class="string">&#x27;\033[0;36m&#x27;</span></span><br><span class="line">RESET=<span class="string">&#x27;\033[0m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印标题</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;PURPLE&#125;==========搭建私有仓库并上传JAVA:8-jre镜像===========<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[1] 上传registry.tar至/opt目录下<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /opt/registry.tar https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJnUUZFRnlTQ0MxZEF3eTZrP2U9a0twdE54.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[2] 开启docker服务<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">systemctl <span class="built_in">start</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[3] 导入镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker load <span class="literal">-i</span> /opt/registry.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤4</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[4] 启动私有仓库容器<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker run <span class="literal">-di</span> <span class="literal">--name</span>=registry <span class="literal">-p</span> <span class="number">5000</span>:<span class="number">5000</span> registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[5] 打开浏览器验证<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;输入地址http://<span class="variable">$</span>&#123;LOCAL_IP&#125;:5000/v2/_catalog看到&#123;&quot;</span>repositories<span class="string">&quot;:[]&#125; 表示私有仓库搭建成功并且内容为空<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤6</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[6] 修改daemon.json<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">printf <span class="string">&#x27;&#123;&quot;insecure-registries&quot;:[&quot;%s:5000&quot;]&#125;&#x27;</span> <span class="string">&quot;<span class="variable">$</span>&#123;LOCAL_IP&#125;&quot;</span> &gt; /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤7</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[7] 重启docker服务<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤8</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[8] 上传java.tar至/opt目录下,导入镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /opt/java.tar https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJnUUpzRm9OMmJaWDB2YVpmP2U9dEt6OUFl.tar</span><br><span class="line">docker load <span class="literal">-i</span> /opt/java.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤9</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[9] 标记此镜像为私有仓库的镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker tag <span class="number">192.168</span>.<span class="number">222.100</span>:<span class="number">5000</span>/java:<span class="number">8</span><span class="literal">-jre</span> <span class="variable">$</span>&#123;LOCAL_IP&#125;:<span class="number">5000</span>/java:<span class="number">8</span><span class="literal">-jre</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤10</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[10] 再次启动私服容器<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker <span class="built_in">start</span> registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤11</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[11] 上传标记的镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker push <span class="variable">$</span>&#123;LOCAL_IP&#125;:<span class="number">5000</span>/java:<span class="number">8</span><span class="literal">-jre</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤12</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[12] 浏览器验证<span class="variable">$</span>&#123;RESET&#125;,<span class="variable">$</span>&#123;YELLOW&#125;输入地址http://<span class="variable">$</span>&#123;LOCAL_IP&#125;:5000/v2/_catalog&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;搭建私有仓库并上传JAVA:8-jre镜像成功!<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> ⭐一键脚本⭐ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡算法</title>
      <link href="/2024/06/28/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/"/>
      <url>/2024/06/28/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h1><h3 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-44-39-1671794149480-3bedb133-ec7f-4031-8dce-fc00579527ce-1a060d.png" alt="image.png"></p><p>调用关系如上图（简化了公网-&gt;防火墙处理），<strong>适合场景</strong>：所有服务器性能基本一致，且无超阈值流量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> K <span class="title function_">doSelect</span><span class="params">(List&lt;K&gt; nodes, String ip)</span> &#123;</span><br><span class="line">    <span class="comment">// 在列表中随机选取一个节点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> random.nextInt(nodes.size());</span><br><span class="line">    <span class="keyword">return</span> nodes.get(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在部分机器性能更优，此时可以在随机基础上增加权重，升级为：随机权重算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> K <span class="title function_">doSelect</span><span class="params">(List&lt;K&gt; nodes, String ip)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nodes.size();</span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">totalWeight</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (K node : nodes) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">weight</span> <span class="operator">=</span> node.getWeight();</span><br><span class="line">        totalWeight.getAndAdd(weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (totalWeight.get() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> random.nextInt(totalWeight.get());</span><br><span class="line">        <span class="keyword">for</span> (N node : nodes) &#123;</span><br><span class="line">            <span class="comment">// 让随机值 offset 减去当前node权重值</span></span><br><span class="line">            offset -= node.getWeight();</span><br><span class="line">            <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 当前node大于随机值offset，返回此Node</span></span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 随机返回</span></span><br><span class="line">    <span class="keyword">return</span> nodes.get(random.nextInt(length));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-45-17-1671794757690-44c5f0b3-f98f-4be2-a4e1-5b1126db239d-8296fa.png" alt="img"></p><p>轮询不再是在多台服务器随机挑选，而是按照顺序一个个排队调用，调用完再插入队尾等待下一次调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> K <span class="title function_">doSelect</span><span class="params">(List&lt;K&gt; nodes, String ip)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nodes.size();</span><br><span class="line">    <span class="comment">// 如果位置值已经等于长度重置为0(走一轮了)</span></span><br><span class="line">    position.compareAndSet(length, <span class="number">0</span>);</span><br><span class="line">    <span class="type">N</span> <span class="variable">node</span> <span class="operator">=</span> nodes.get(position.get());</span><br><span class="line">    <span class="comment">// 数据原子增加，对应调用从1-&gt;2-&gt;3-&gt;4</span></span><br><span class="line">    position.getAndIncrement();</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同加权随机，轮询也同样存在加权轮询的场景，此时流量调度将发生如下变化：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-45-43-1671795214888-3442ad5c-426d-44f2-b3f5-0182b3f30922-6178c2.png" alt="img"></p><p>此处逻辑相对复杂，笔者在此说出主要思路，后续有时间补充伪代码，感兴趣的可以参照Dubbo的实现</p><p>如上有服务器servers&#x3D;[A,B]，对应权重weights&#x3D;[3,1]，总权重为4。我们可以理解为有4台服务器，3台A，1台B，一次调用过来的时候，需要按顺序访问。如有5次调用，调用顺序为AAABA。</p><p>选举思路如下：</p><table><thead><tr><th><strong>次数</strong></th><th><strong>WeightedRoundRobin</strong></th><th><strong>选择结果</strong></th><th><strong>选择后的WeightedRoundRobin</strong></th></tr></thead><tbody><tr><td>1</td><td>3、1</td><td>A</td><td>2、1</td></tr><tr><td>2</td><td>2、1</td><td>A</td><td>1、1</td></tr><tr><td>3</td><td>1、1</td><td>A</td><td>0、1</td></tr><tr><td>4</td><td>0、1</td><td>B</td><td>0、0(等于0-0时复原成：3、1)</td></tr><tr><td>5</td><td>3、1</td><td>A</td><td>2、1</td></tr></tbody></table><h3 id="最小活跃数"><a href="#最小活跃数" class="headerlink" title="最小活跃数"></a>最小活跃数</h3><blockquote><p>指：将当前请求转发到连接数&#x2F;请求数最少的机器上，其特点是根据服务器实时运行状态动态分配，保障服务负载不会过饱和。如下图当请求4过来时，Nginx判断目前服务器1连接数&gt;服务器2，故4会请求到服务器2上：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-46-12-1671796958038-85be95a6-e37c-46bf-beae-3fb98fe3b1f0-fc8646.png" alt="image.png"></p><h3 id="源地址哈希"><a href="#源地址哈希" class="headerlink" title="源地址哈希"></a>源地址哈希</h3><blockquote><p>根据请求源IP哈希计算得到一个数值，用该数值在候选服务器列表的进行取模运算，得到的结果便是选中的服务器，此操作可以保证固定IP的请求总是到某一台服务器上，伪代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> K <span class="title function_">doSelect</span><span class="params">(List&lt;K&gt; nodes, String ip)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nodes.size();</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash(ip) % length;</span><br><span class="line">    <span class="keyword">return</span> nodes.get(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h3><p>相同的请求尽可能落到同一个服务器上。一致性哈希解决稳定性问题，可以将所有的存储节点排列在首尾相接的 Hash 环上，每个 key 在计算 Hash 后会 顺时针找到临接的存储节点存放。而当有节点加入或退出时，仅影响该节点在 Hash环上顺时针相邻的后续节点。</p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 知识拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos集群搭建</title>
      <link href="/2024/06/28/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/06/28/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Nacos集群搭建"><a href="#Nacos集群搭建" class="headerlink" title="Nacos集群搭建"></a>Nacos集群搭建</h1><h1 id="1-集群结构图"><a href="#1-集群结构图" class="headerlink" title="1.集群结构图"></a>1.集群结构图</h1><p>官方给出的Nacos集群图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-29-41-image-20210409210621117-6af1bf.png" alt="image-20210409210621117"></p><p>其中包含3个nacos节点，然后一个负载均衡器代理3个Nacos。这里负载均衡器可以使用nginx。</p><p>我们计划的集群结构：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-30-07-image-20210409211355037-67c663.png" alt="image-20210409211355037"></p><p>三个nacos节点的地址：</p><table><thead><tr><th>节点</th><th>ip</th><th>port</th></tr></thead><tbody><tr><td>nacos1</td><td>192.168.150.1(本地IP地址，不是写死的)</td><td>8845</td></tr><tr><td>nacos2</td><td>192.168.150.1(本地IP地址，不是写死的)</td><td>8846</td></tr><tr><td>nacos3</td><td>192.168.150.1(本地IP地址，不是写死的)</td><td>8847</td></tr></tbody></table><p>此处的IP是你自己服务的IP，不一定要按照我的来</p><h1 id="2-搭建集群"><a href="#2-搭建集群" class="headerlink" title="2.搭建集群"></a>2.搭建集群</h1><p>搭建集群的基本步骤：</p><ul><li>搭建数据库，初始化数据库表结构</li><li>下载nacos安装包</li><li>配置nacos</li><li>启动nacos集群</li><li>nginx反向代理</li></ul><h2 id="2-1-初始化数据库"><a href="#2-1-初始化数据库" class="headerlink" title="2.1.初始化数据库"></a>2.1.初始化数据库</h2><p>Nacos默认数据存储在内嵌数据库Derby中，不属于生产可用的数据库。</p><p>官方推荐的最佳实践是使用带有主从的高可用数据库集群，主从模式的高可用数据库可以参考<strong>传智教育</strong>的后续高手课程。</p><p>这里我们以单点的数据库为例来讲解。</p><p>首先新建一个数据库，命名为nacos，而后导入下面的SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>  COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>  COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>  COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>  COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>  COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>  COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="2-2-下载nacos"><a href="#2-2-下载nacos" class="headerlink" title="2.2.下载nacos"></a>2.2.下载nacos</h2><p>nacos在GitHub上有下载地址：<a href="https://github.com/alibaba/nacos/tags%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E3%80%82">https://github.com/alibaba/nacos/tags，可以选择任意版本下载。</a></p><p>本例中采用1.4.1版本：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-31-08-image-20210409212119411-e48e92.png" alt="image-20210409212119411"></p><h2 id="2-3-配置Nacos"><a href="#2-3-配置Nacos" class="headerlink" title="2.3.配置Nacos"></a>2.3.配置Nacos</h2><p>将这个包解压到任意<strong>非中文目录</strong>下，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-31-10-image-20210402161843337-d8192b.png" alt="image-20210402161843337"></p><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><p>进入nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-31-14-image-20210409212459292-82406f.png" alt="image-20210409212459292"></p><p>然后添加内容(以下IP一定要改成自己的本地IP)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.150.1:8845</span><br><span class="line">192.168.150.1:8846</span><br><span class="line">192.168.150.1:8847</span><br></pre></td></tr></table></figure><blockquote><p>注意：此处的IP是你自己服务的IP，不一定要按照我的来！</p></blockquote><p>可以在单节点运行时，到nacos控制台查看自己的节点IP，那么这里就配置一样的IP：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-31-23-image-20210830170229215-f51f62.png" alt="image-20210830170229215"></p><p>然后修改application.properties文件，添加数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><p>这里的数据库地址、用户名、密码请根据实际情况配置。</p><h2 id="2-4-启动"><a href="#2-4-启动" class="headerlink" title="2.4.启动"></a>2.4.启动</h2><p>将nacos文件夹复制三份，分别命名为：nacos1、nacos2、nacos3</p><p><strong>注意：一定要存放在非中文目录</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-31-36-image-20210409213335538-890211.png" alt="image-20210409213335538"> </p><p>然后分别修改三个文件夹中的application.properties，</p><p>nacos1:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8845</span></span><br></pre></td></tr></table></figure><p>nacos2:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8846</span></span><br></pre></td></tr></table></figure><p>nacos3:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8847</span></span><br></pre></td></tr></table></figure><p>然后分别启动三个nacos节点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd</span><br></pre></td></tr></table></figure><h2 id="2-5-nginx反向代理"><a href="#2-5-nginx反向代理" class="headerlink" title="2.5.nginx反向代理"></a>2.5.nginx反向代理</h2><p>找到课前资料提供的nginx安装包： </p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-31-45-image-20210410103253355-5801ca.png" alt="image-20210410103253355"> </p><p>解压到任意非中文目录下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-31-48-image-20210410103322874-2e06b0.png" alt="image-20210410103322874"> </p><p>修改conf&#x2F;nginx.conf文件，在<strong>http模块</strong>中加入以下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> nacos-cluster &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.150.1:8845</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.150.1:8846</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.150.1:8847</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /nacos &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nacos-cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-32-17-nginx-72b2ec.png"></p><p>启动nginx(nginx目录下 <strong>start nginx.exe</strong>)后访问：<a href="http://localhost/nacos%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F%E3%80%82">http://localhost/nacos，会发现负载均衡配置成功。</a></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-32-37-nacos-cluster-74d97d.png"></p><p>应用接入Nacos集群也很简单，修改代码中application.yml文件配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment"># Nacos地址</span></span><br></pre></td></tr></table></figure><p>同时由于新的nacos集群没有独立命名空间，所以之前这块配置需要注释或删除</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-32-50-nacos-delete-298af0.png"></p><p>修改后重启项目，在集群中也可看到服务注册信息</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/08-33-05-cluster-show-0e2e1e.png"></p><h2 id="2-6-优化"><a href="#2-6-优化" class="headerlink" title="2.6.优化"></a>2.6.优化</h2><ul><li><p>实际部署时，需要给做反向代理的nginx服务器设置一个域名，这样后续如果有服务器迁移nacos的客户端也无需更改配置.</p></li><li><p>Nacos的各个节点应该部署到多个不同服务器，做好容灾和隔离</p></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>​如果后续你想使用Nacos集群作为服务的注册中心、配置中心，order-service中的nacos地址也需改成：localhost:80，否则两个服务不再同一IP端口，无法完成验证。后续学习都建议使用单机版。</p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Nacos集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos注册中心</title>
      <link href="/2024/06/28/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
      <url>/2024/06/28/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一篇文章地址：<a href="/2024/06/28/SpringCloud01/" title="SpringCloud大集合01">SpringCloud大集合01</a></p></blockquote><h1 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h1><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p><h2 id="5-1-认识和安装Nacos"><a href="#5-1-认识和安装Nacos" class="headerlink" title="5.1.认识和安装Nacos"></a>5.1.认识和安装Nacos</h2><p><a href="https://nacos.io/">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-40-16-image-20210713230444308-5e4311.png" alt="image-20210713230444308"></p><p>安装方式可以参考课前资料《Nacos安装指南.md》</p><h2 id="5-2-服务注册到nacos"><a href="#5-2-服务注册到nacos" class="headerlink" title="5.2.服务注册到nacos"></a>5.2.服务注册到nacos</h2><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h3 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的依赖。</p></blockquote><h3 id="2）配置nacos地址"><a href="#2）配置nacos地址" class="headerlink" title="2）配置nacos地址"></a>2）配置nacos地址</h3><p>在user-service和order-service的application.yml中添加nacos地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的地址</p></blockquote><h3 id="3）重启"><a href="#3）重启" class="headerlink" title="3）重启"></a>3）重启</h3><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-41-37-image-20210713231439607-ebaa5e.png" alt="image-20210713231439607"></p><h2 id="5-3-服务分级存储模型"><a href="#5-3-服务分级存储模型" class="headerlink" title="5.3.服务分级存储模型"></a>5.3.服务分级存储模型</h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-41-53-image-20210713232522531-8dd599.png" alt="image-20210713232522531"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-42-04-image-20210713232658928-1bbf01.png" alt="image-20210713232658928"></p><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h3 id="5-3-1-给user-service配置集群"><a href="#5-3-1-给user-service配置集群" class="headerlink" title="5.3.1.给user-service配置集群"></a>5.3.1.给user-service配置集群</h3><p>修改user-service的application.yml文件，添加集群配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure><p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-42-30-image-20210713232916215-abf2fc.png" alt="image-20210713232916215"></p><p>我们再次复制一个user-service启动配置，添加属性：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dserver.port=8083 -Dspring.cloud.nacos.discovery.cluster-name=SH</span><br></pre></td></tr></table></figure><p>配置如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-42-40-image-20210713233528982-087a5d.png" alt="image-20210713233528982"></p><p>启动UserApplication3后再次查看nacos控制台：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-42-46-image-20210713233727923-88575a.png" alt="image-20210713233727923"></p><h3 id="5-3-2-同集群优先的负载均衡"><a href="#5-3-2-同集群优先的负载均衡" class="headerlink" title="5.3.2.同集群优先的负载均衡"></a>5.3.2.同集群优先的负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p>1）给order-service配置集群信息</p><p>修改order-service的application.yml文件，添加集群配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848</span><br><span class="line">      discovery:</span><br><span class="line">        cluster-name: HZ <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure><p>2）修改负载均衡规则</p><p>修改order-service的application.yml文件，修改负载均衡规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><h2 id="5-4-权重配置"><a href="#5-4-权重配置" class="headerlink" title="5.4.权重配置"></a>5.4.权重配置</h2><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-44-19-image-20210713235133225-2acbae.png" alt="image-20210713235133225"></p><p>在弹出的编辑窗口，修改权重：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-44-24-image-20210713235235219-7b3d1f.png" alt="image-20210713235235219"></p><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote><h2 id="5-5-环境隔离"><a href="#5-5-环境隔离" class="headerlink" title="5.5.环境隔离"></a>5.5.环境隔离</h2><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-44-55-image-20210714000101516-155b71.png" alt="image-20210714000101516"></p><h3 id="5-5-1-创建namespace"><a href="#5-5-1-创建namespace" class="headerlink" title="5.5.1.创建namespace"></a>5.5.1.创建namespace</h3><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-45-01-image-20210714000414781-c91bf0.png" alt="image-20210714000414781"></p><p>我们可以点击页面新增按钮，添加一个namespace：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-45-25-image-20210714000440143-108533.png" alt="image-20210714000440143"></p><p>然后，填写表单：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-45-28-image-20210714000505928-2d2f46.png" alt="image-20210714000505928"></p><p>就能在页面看到一个新的namespace：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-45-35-image-20210714000522913-206d55.png" alt="image-20210714000522913"></p><h3 id="5-5-2-给微服务配置namespace"><a href="#5-5-2-给微服务配置namespace" class="headerlink" title="5.5.2.给微服务配置namespace"></a>5.5.2.给微服务配置namespace</h3><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改order-service的application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间，填ID</span></span><br></pre></td></tr></table></figure><p>重启order-service后，访问控制台，可以看到下面的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-46-18-image-20210714000830703-9cdc92.png" alt="image-20210714000830703"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-46-20-image-20210714000837140-cf2df7.png" alt="image-20210714000837140"></p><p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-46-24-image-20210714000941256-7c6ad8.png" alt="image-20210714000941256"></p><h2 id="5-6-Nacos与Eureka的区别"><a href="#5-6-Nacos与Eureka的区别" class="headerlink" title="5.6.Nacos与Eureka的区别"></a>5.6.Nacos与Eureka的区别</h2><p>Nacos的服务实例分为两种l类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-46-52-image-20210714001728017-e37de9.png" alt="image-20210714001728017"></p><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos安装指南</title>
      <link href="/2024/06/28/Nacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"/>
      <url>/2024/06/28/Nacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一篇文章地址：<a href="/2024/06/28/SpringCloud01/" title="SpringCloud大集合01">SpringCloud大集合01</a></p></blockquote><h1 id="Nacos安装指南"><a href="#Nacos安装指南" class="headerlink" title="Nacos安装指南"></a>Nacos安装指南</h1><h1 id="1-Windows安装"><a href="#1-Windows安装" class="headerlink" title="1.Windows安装"></a>1.Windows安装</h1><p>开发阶段采用单机安装即可。</p><h2 id="1-1-下载安装包"><a href="#1-1-下载安装包" class="headerlink" title="1.1.下载安装包"></a>1.1.下载安装包</h2><p>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：</p><p>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-49-20-image-20210402161102887-876305.png" alt="image-20210402161102887"></p><p>本课程采用1.4.1.版本的Nacos，课前资料已经准备了安装包：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-49-22-image-20210402161130261-ea03e0.png" alt="image-20210402161130261"></p><p>windows版本使用<code>nacos-server-1.4.1.zip</code>包即可。</p><h2 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2.解压"></a>1.2.解压</h2><p>将这个包解压到任意非中文目录下，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-49-24-image-20210402161843337-9b9e33.png" alt="image-20210402161843337"></p><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><h2 id="1-3-端口配置"><a href="#1-3-端口配置" class="headerlink" title="1.3.端口配置"></a>1.3.端口配置</h2><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。</p><p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-49-28-image-20210402162008280-6746b7.png" alt="image-20210402162008280"></p><p>修改其中的内容：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-49-32-image-20210402162251093-20790e.png" alt="image-20210402162251093"></p><h2 id="1-4-启动"><a href="#1-4-启动" class="headerlink" title="1.4.启动"></a>1.4.启动</h2><p>启动非常简单，进入bin目录，结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-49-36-image-20210402162350977-ad16ee.png" alt="image-20210402162350977"></p><p>然后执行命令即可：</p><ul><li><p>windows命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure></li></ul><p>执行后的效果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-49-40-image-20210402162526774-09c574.png" alt="image-20210402162526774"></p><h2 id="1-5-访问"><a href="#1-5-访问" class="headerlink" title="1.5.访问"></a>1.5.访问</h2><p>在浏览器输入地址：<a href="http://127.0.0.1:8848/nacos%E5%8D%B3%E5%8F%AF%EF%BC%9A">http://127.0.0.1:8848/nacos即可：</a></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-49-44-image-20210402162630427-39d413.png" alt="image-20210402162630427"></p><p>默认的账号和密码都是nacos，进入后：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-49-49-image-20210402162709515-20aaa1.png" alt="image-20210402162709515"></p><h1 id="2-Linux安装"><a href="#2-Linux安装" class="headerlink" title="2.Linux安装"></a>2.Linux安装</h1><p>Linux或者Mac安装方式与Windows类似。</p><h2 id="1-1【脚本安装】可以使用一键化脚本部署Nacos"><a href="#1-1【脚本安装】可以使用一键化脚本部署Nacos" class="headerlink" title="1.1【脚本安装】可以使用一键化脚本部署Nacos"></a>1.1【脚本安装】可以使用一键化脚本部署Nacos</h2><h3 id="①yum换腾讯源（如果国内下载慢）"><a href="#①yum换腾讯源（如果国内下载慢）" class="headerlink" title="①yum换腾讯源（如果国内下载慢）"></a>①yum换腾讯源（如果国内下载慢）</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色变量</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">YELLOW=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">BLUE=<span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">NC=<span class="string">&#x27;\033[0m&#x27;</span> <span class="comment"># No Color</span></span><br><span class="line"></span><br><span class="line">yum install <span class="built_in">wget</span> <span class="literal">-y</span></span><br><span class="line"><span class="comment"># 将CentOS-Base.repo备份</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;正在备份CentOS-Base.repo...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS<span class="literal">-Base</span>.repo /etc/yum.repos.d/CentOS<span class="literal">-Base</span>.repo.backup</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]; then</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;备份成功!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;RED&#125;备份失败!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载新的CentOS-Base.repo</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;正在下载新的CentOS-Base.repo...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /etc/yum.repos.d/CentOS<span class="literal">-Base</span>.repo http://mirrors.cloud.tencent.com/repo/centos7_base.repo</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]; then</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;下载成功!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;RED&#125;下载失败!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理并生成新的缓存</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;正在清理并生成新的缓存...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]; then</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;操作成功!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;RED&#125;操作失败!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;所有操作已完成!<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="②nacos一键脚本"><a href="#②nacos一键脚本" class="headerlink" title="②nacos一键脚本"></a>②nacos一键脚本</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体颜色</span></span><br><span class="line">red=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">green=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">yellow=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">blue=<span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">magenta=<span class="string">&#x27;\033[0;35m&#x27;</span></span><br><span class="line">cyan=<span class="string">&#x27;\033[0;36m&#x27;</span></span><br><span class="line">reset=<span class="string">&#x27;\033[0m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;green&#125;开始安装 Nacos...<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查命令是否已安装，如果未安装则自动安装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_command</span><span class="params">()</span></span> &#123;</span><br><span class="line">    local command=<span class="variable">$1</span></span><br><span class="line">    <span class="keyword">if</span> ! command <span class="literal">-v</span> <span class="string">&quot;<span class="variable">$command</span>&quot;</span> &amp;&gt; /dev/null; then</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;magenta&#125;正在安装 <span class="variable">$command</span>...<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> [[ -<span class="type">n</span> <span class="variable">$</span>(<span class="type">command</span> -<span class="type">v</span> <span class="type">apt</span>) ]]; then</span><br><span class="line">            sudo apt<span class="literal">-get</span> install <span class="literal">-y</span> <span class="string">&quot;<span class="variable">$command</span>&quot;</span></span><br><span class="line">        elif [[ -<span class="type">n</span> <span class="variable">$</span>(<span class="type">command</span> -<span class="type">v</span> <span class="type">yum</span>) ]]; then</span><br><span class="line">            sudo yum install <span class="literal">-y</span> <span class="string">&quot;<span class="variable">$command</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;red&#125;无法自动安装 <span class="variable">$command</span>，请手动安装后重试。<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">            <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;green&#125;开始安装 Nacos...<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 JDK 安装包</span></span><br><span class="line">jdk_file=<span class="string">&quot;/opt/jdk-8u144-linux-x64.tar.gz&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ ! -<span class="type">f</span> <span class="string">&quot;<span class="variable">$jdk_file</span>&quot;</span> ]; then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在下载 JDK 安装包...\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">wget</span> https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJkb0tpV3M0enp0a1VTZWs_ZT1Hek5oWHg..tar.gz <span class="literal">-O</span> <span class="variable">$jdk_file</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m下载完成\033[0m&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m检测到 JDK 安装包已存在\033[0m&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在安装 JDK...\033[0m&quot;</span></span><br><span class="line">tar <span class="literal">-zxf</span> <span class="variable">$jdk_file</span> <span class="literal">-C</span> /usr/local/ &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">ln <span class="literal">-sf</span> /usr/local/jdk1.<span class="number">8.0</span>_144 /usr/local/jdk</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在配置环境变量...\033[0m&quot;</span></span><br><span class="line">touch /opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=$JAVA_HOME/bin:$PATH&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH JAVA_HOME CLASSPATH&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line">sed <span class="literal">-i</span> <span class="literal">-e</span> <span class="string">&#x27;$r /opt/temp.txt&#x27;</span> /etc/profile</span><br><span class="line"><span class="built_in">rm</span> <span class="operator">-f</span> /opt/temp.txt</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m JDK 安装完成\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">setenforce <span class="number">0</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">iptables <span class="operator">-F</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl stop firewalld &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl disable firewalld &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl stop NetworkManager &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl disable NetworkManager &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m防火墙和网络管理器已关闭\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 下载并解压 Nacos</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;yellow&#125;2. 下载并解压 Nacos<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">nacos_url=<span class="string">&quot;https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJkM1pFbnRkaXFiRERFMEE_ZT1DSVdCTjI..tar.gz&quot;</span></span><br><span class="line">nacos_file=<span class="string">&quot;nacos-server-1.4.1.tar.gz&quot;</span></span><br><span class="line">nacos_dir=<span class="string">&quot;/usr/local/src&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -<span class="type">f</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/<span class="variable">$</span>&#123;nacos_file&#125;&quot;</span> ]; then</span><br><span class="line">    <span class="built_in">wget</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_url&#125;&quot;</span> <span class="literal">-O</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/<span class="variable">$</span>&#123;nacos_file&#125;&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">tar <span class="literal">-xzvf</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/<span class="variable">$</span>&#123;nacos_file&#125;&quot;</span> <span class="literal">-C</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;&quot;</span></span><br><span class="line"><span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/<span class="variable">$</span>&#123;nacos_file&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;green&#125;Nacos 下载并解压完成<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 配置端口 (如果需要)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;yellow&#125;3. 配置端口 (如果需要)<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;是否需要修改 Nacos 默认端口 8848? (y/n) &quot;</span> change_port</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$change_port</span>&quot;</span> == <span class="string">&quot;y&quot;</span> ]; then</span><br><span class="line">    read <span class="literal">-p</span> <span class="string">&quot;请输入新的端口号: &quot;</span> new_port</span><br><span class="line">    nacos_conf_dir=<span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/nacos/conf&quot;</span></span><br><span class="line">    sed <span class="literal">-i</span> <span class="string">&quot;s/server.port=8848/server.port=<span class="variable">$</span>&#123;new_port&#125;/g&quot;</span> <span class="string">&quot;<span class="variable">$</span>&#123;nacos_conf_dir&#125;/application.properties&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;green&#125;Nacos 端口已修改为 <span class="variable">$</span>&#123;new_port&#125;<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;cyan&#125;使用默认端口 8848<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 启动 Nacos</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;yellow&#125;4. 启动 Nacos<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line">nacos_bin_dir=<span class="string">&quot;<span class="variable">$</span>&#123;nacos_dir&#125;/nacos/bin&quot;</span></span><br><span class="line">sh <span class="string">&quot;<span class="variable">$</span>&#123;nacos_bin_dir&#125;/startup.sh&quot;</span> <span class="literal">-m</span> standalone</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;green&#125;Nacos 已成功启动!<span class="variable">$</span>&#123;reset&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-1-【手动安装】安装JDK"><a href="#2-1-【手动安装】安装JDK" class="headerlink" title="2.1.【手动安装】安装JDK"></a>2.1.【手动安装】安装JDK</h2><p>Nacos依赖于JDK运行，索引Linux上也需要安装JDK才行。</p><p>上传jdk安装包：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-49-56-image-20210402172334810-0ea14d.png" alt="image-20210402172334810"></p><p>上传到某个目录，例如：<code>/usr/local/</code></p><p>然后解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf jdk-8u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>然后重命名为java</p><p>配置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>设置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h2 id="2-2-上传安装包"><a href="#2-2-上传安装包" class="headerlink" title="2.2.上传安装包"></a>2.2.上传安装包</h2><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-50-01-image-20210402161102887-3d5279.png" alt="image-20210402161102887"></p><p>也可以直接使用课前资料中的tar.gz：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-50-03-image-20210402161130261-2c9a4d.png" alt="image-20210402161130261"></p><p>上传到Linux服务器的某个目录，例如<code>/usr/local/src</code>目录下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-50-09-image-20210402163715580-9d2003.png" alt="image-20210402163715580"></p><h2 id="2-3-解压"><a href="#2-3-解压" class="headerlink" title="2.3.解压"></a>2.3.解压</h2><p>命令解压缩安装包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nacos-server-1.4.1.tar.gz</span><br></pre></td></tr></table></figure><p>然后删除安装包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf nacos-server-1.4.1.tar.gz</span><br></pre></td></tr></table></figure><p>目录中最终样式：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-50-11-image-20210402163858429-1b192c.png" alt="image-20210402163858429"></p><p>目录内部：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/01-50-15-image-20210402164414827-19a053.png" alt="image-20210402164414827"></p><h2 id="2-4-端口配置"><a href="#2-4-端口配置" class="headerlink" title="2.4.端口配置"></a>2.4.端口配置</h2><p>与windows中类似</p><h2 id="2-5-启动"><a href="#2-5-启动" class="headerlink" title="2.5.启动"></a>2.5.启动</h2><p>在nacos&#x2F;bin目录中，输入命令启动Nacos：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure><h1 id="3-Nacos的依赖"><a href="#3-Nacos的依赖" class="headerlink" title="3.Nacos的依赖"></a>3.Nacos的依赖</h1><p>父工程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ribbon负载均衡</title>
      <link href="/2024/06/28/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2024/06/28/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="4-Ribbon负载均衡"><a href="#4-Ribbon负载均衡" class="headerlink" title="4.Ribbon负载均衡"></a>4.Ribbon负载均衡</h1><blockquote><p>上一篇文章地址：<a href="/2024/06/28/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/" title="Eureka注册中心">Eureka注册中心</a><br>上一节中，我们添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？</p></blockquote><h2 id="4-1-负载均衡原理"><a href="#4-1-负载均衡原理" class="headerlink" title="4.1.负载均衡原理"></a>4.1.负载均衡原理</h2><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-29-58-image-20210713224517686-077442.png" alt="image-20210713224517686"></p><p>那么我们发出的请求明明是<a href="http://userservice/user/1%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8F%98%E6%88%90%E4%BA%86http://localhost:8081%E7%9A%84%E5%91%A2%EF%BC%9F">http://userservice/user/1，怎么变成了http://localhost:8081的呢？</a></p><h2 id="4-2-源码跟踪"><a href="#4-2-源码跟踪" class="headerlink" title="4.2.源码跟踪"></a>4.2.源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p>我们进行源码跟踪：</p><h3 id="1）LoadBalancerIntercepor"><a href="#1）LoadBalancerIntercepor" class="headerlink" title="1）LoadBalancerIntercepor"></a>1）LoadBalancerIntercepor</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-30-55-1525620483637-d7ecd7.png" alt="1525620483637"></p><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p><ul><li><code>request.getURI()</code>：获取请求uri，本例中就是 <a href="http://user-service/user/8">http://user-service/user/8</a></li><li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li><li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</li></ul><p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><h3 id="2）LoadBalancerClient"><a href="#2）LoadBalancerClient" class="headerlink" title="2）LoadBalancerClient"></a>2）LoadBalancerClient</h3><p>继续跟入execute方法：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-32-23-1525620787090-92ee66.png" alt="1525620787090"></p><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-33-06-1525620835911-247d03.png" alt="1525620835911"></p><p>果然实现了负载均衡。</p><h3 id="3）负载均衡策略IRule"><a href="#3）负载均衡策略IRule" class="headerlink" title="3）负载均衡策略IRule"></a>3）负载均衡策略IRule</h3><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-33-29-1525620835911-dca5d5.png" alt="1525620835911"></p><p>我们继续跟入：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-33-45-1544361421671-78fc90.png" alt="1544361421671"></p><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-33-55-1525622652849-cff81e.png" alt="1525622652849"></p><p>我们看看这个rule是谁：</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-34-07-1525622699666-a53f14.png" alt="1525622699666"></p><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-34-18-1525622754316-68f64d.png" alt="1525622754316"></p><p>这不就是轮询的意思嘛。</p><p>到这里，整个负载均衡的流程我们就清楚了。</p><h3 id="4）总结"><a href="#4）总结" class="headerlink" title="4）总结"></a>4）总结</h3><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-34-27-image-20210713224724673-7471ca.png" alt="image-20210713224724673"></p><p>基本流程如下：</p><ul><li>拦截我们的RestTemplate请求<a href="http://userservice/user/1">http://userservice/user/1</a></li><li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li><li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li><li>eureka返回列表，localhost:8081、localhost:8082</li><li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li><li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a href="http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82">http://localhost:8081/user/1，发起真实请求</a></li></ul><h2 id="4-3-负载均衡策略"><a href="#4-3-负载均衡策略" class="headerlink" title="4.3.负载均衡策略"></a>4.3.负载均衡策略</h2><h3 id="4-3-1-负载均衡策略"><a href="#4-3-1-负载均衡策略" class="headerlink" title="4.3.1.负载均衡策略"></a>4.3.1.负载均衡策略</h3><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-36-33-image-20210713225653000-88261e.png" alt="image-20210713225653000"></p><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p><h3 id="4-3-2-自定义负载均衡策略"><a href="#4-3-2-自定义负载均衡策略" class="headerlink" title="4.3.2.自定义负载均衡策略"></a>4.3.2.自定义负载均衡策略</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span> <span class="comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p></blockquote><h2 id="4-4-饥饿加载"><a href="#4-4-饥饿加载" class="headerlink" title="4.4.饥饿加载"></a>4.4.饥饿加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Ribbon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka注册中心</title>
      <link href="/2024/06/28/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
      <url>/2024/06/28/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="3-Eureka注册中心"><a href="#3-Eureka注册中心" class="headerlink" title="3.Eureka注册中心"></a>3.Eureka注册中心</h1><blockquote><p>上一篇文章地址：<a href="/2024/06/28/SpringCloud01/" title="SpringCloud大集合01">SpringCloud大集合01</a><br>承接上一篇文章，这次单独开了一篇文章来理解Eureka。</p></blockquote><p>假如我们的服务提供者user-service部署了多个实例，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-17-24-image-20210713214925388-899986.png" alt="image-20210713214925388"></p><p>大家思考几个问题：</p><ul><li>order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？</li><li>有多个user-service实例地址，order-service调用时该如何选择？</li><li>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</li></ul><h2 id="3-1-Eureka的结构和作用"><a href="#3-1-Eureka的结构和作用" class="headerlink" title="3.1.Eureka的结构和作用"></a>3.1.Eureka的结构和作用</h2><p>这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka，其结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-17-39-image-20210713220104956-1ff7f4.png" alt="image-20210713220104956"></p><p>回答之前的各个问题：</p><p><strong>问题1</strong>：order-service如何得知user-service实例地址？</p><p>获取地址信息的流程如下：</p><ul><li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫<strong>服务注册</strong></li><li>eureka-server保存服务名称到服务实例地址列表的映射关系</li><li>order-service根据<strong>服务名称</strong>，拉取<strong>实例地址列表</strong>。这个叫<strong>服务发现或服务拉取</strong></li></ul><p><strong>问题2</strong>：order-service如何从多个user-service实例中选择具体的实例？</p><ul><li>order-service从实例列表中利用**[负载均衡算法](<a href="https://www.yuque.com/yzxb/index/ctgttpwzpm2igr0w">负载均衡算法 (yuque.com)</a>)**选中一个实例地址</li><li>向该实例地址发起远程调用</li><li></li></ul><p><strong>问题3</strong>：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p><ul><li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为<strong>心跳</strong></li><li>当超过<strong>一定时间没有发送心跳</strong>时，eureka-server会认为微服务实例故障，将该实例从服务列表中<strong>剔除</strong></li><li>order-service拉取服务时，就能将故障实例排除了</li></ul><blockquote><p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p></blockquote><p>因此，接下来我们动手实践的步骤包括：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-24-33-image-20210713220509769-bee25b.png" alt="image-20210713220509769"></p><h2 id="3-2-搭建eureka-server"><a href="#3-2-搭建eureka-server" class="headerlink" title="3.2.搭建eureka-server"></a>3.2.搭建eureka-server</h2><p>首先大家注册中心服务端：eureka-server，这必须是一个独立的微服务</p><h3 id="3-2-1-创建eureka-server服务"><a href="#3-2-1-创建eureka-server服务" class="headerlink" title="3.2.1.创建eureka-server服务"></a>3.2.1.创建eureka-server服务</h3><p>在cloud-demo父工程下，创建一个子模块：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-24-36-image-20210713220605881-cbae56.png" alt="image-20210713220605881"></p><p>填写模块信息：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-24-49-image-20210713220857396-14fb52.png" alt="image-20210713220857396"></p><p>然后填写服务信息：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-24-52-image-20210713221339022-022dc8.png" alt="image-20210713221339022"></p><h3 id="3-2-2-引入eureka依赖"><a href="#3-2-2-引入eureka依赖" class="headerlink" title="3.2.2.引入eureka依赖"></a>3.2.2.引入eureka依赖</h3><p>引入SpringCloud为eureka提供的starter依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-编写启动类"><a href="#3-2-3-编写启动类" class="headerlink" title="3.2.3.编写启动类"></a>3.2.3.编写启动类</h3><p>给eureka-server服务编写一个启动类，一定要添加一个**@EnableEurekaServer**注解，开启eureka的注册中心功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.eureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-编写配置文件"><a href="#3-2-4-编写配置文件" class="headerlink" title="3.2.4.编写配置文件"></a>3.2.4.编写配置文件</h3><p>编写一个application.yml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3-2-5-启动服务"><a href="#3-2-5-启动服务" class="headerlink" title="3.2.5.启动服务"></a>3.2.5.启动服务</h3><p>启动微服务，然后在浏览器访问：<a href="http://127.0.0.1:10086/">http://127.0.0.1:10086</a></p><p>看到下面结果应该是成功了：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-25-27-image-20210713222157190-5c0b01.png" alt="image-20210713222157190"></p><h2 id="3-3-服务注册"><a href="#3-3-服务注册" class="headerlink" title="3.3.服务注册"></a>3.3.服务注册</h2><p>下面，我们将user-service注册到eureka-server中去。</p><h3 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>在user-service的pom文件中，引入下面的eureka-client依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）配置文件"><a href="#2）配置文件" class="headerlink" title="2）配置文件"></a>2）配置文件</h3><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3）启动多个user-service实例"><a href="#3）启动多个user-service实例" class="headerlink" title="3）启动多个user-service实例"></a>3）启动多个user-service实例</h3><p>为了演示一个服务有多个实例的场景，我们添加一个SpringBoot的启动配置，再启动一个user-service。</p><p>首先，复制原来的user-service启动配置：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-26-31-image-20210713222656562-bf5d36.png" alt="image-20210713222656562"></p><p>然后，在弹出的窗口中，填写信息：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-26-32-image-20210713222757702-be4326.png" alt="image-20210713222757702"></p><p>现在，SpringBoot窗口会出现两个user-service启动配置：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-26-35-image-20210713222841951-a4929d.png" alt="image-20210713222841951"></p><p>不过，第一个是8081端口，第二个是8082端口。</p><p>启动两个user-service实例：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-26-49-image-20210713223041491-61cede.png" alt="image-20210713223041491"></p><p>查看eureka-server管理页面：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-26-51-image-20210713223150650-399f5a.png" alt="image-20210713223150650"></p><h2 id="3-4-服务发现"><a href="#3-4-服务发现" class="headerlink" title="3.4.服务发现"></a>3.4.服务发现</h2><p>下面，我们将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现。</p><h3 id="1）引入依赖-1"><a href="#1）引入依赖-1" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>之前说过，服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致。</p><p>在order-service的pom文件中，引入下面的eureka-client依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）配置文件-1"><a href="#2）配置文件-1" class="headerlink" title="2）配置文件"></a>2）配置文件</h3><p>服务发现也需要知道eureka地址，因此第二步与服务注册一致，都是配置eureka信息：</p><p>在order-service中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3）服务拉取和负载均衡"><a href="#3）服务拉取和负载均衡" class="headerlink" title="3）服务拉取和负载均衡"></a>3）服务拉取和负载均衡</h3><p>最后，我们要去eureka-server中拉取user-service服务的实例列表，并且实现负载均衡。</p><p>不过这些动作不用我们去做，只需要添加一些注解即可。</p><p>在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-28-27-image-20210713224049419-53c776.png" alt="image-20210713224049419"></p><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法。修改访问的url路径，用服务名代替ip、端口：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-28-25-image-20210713224245731-f9310c.png" alt="image-20210713224245731"></p><p>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡。</p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud大集合01</title>
      <link href="/2024/06/28/SpringCloud01/"/>
      <url>/2024/06/28/SpringCloud01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所有资料下载地址：<a href="https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJkY21ZYnpGRHNHSk5MSXc_ZT13NVZxYWw.zip">https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJkY21ZYnpGRHNHSk5MSXc_ZT13NVZxYWw.zip</a></p></blockquote><h1 id="1-认识微服务"><a href="#1-认识微服务" class="headerlink" title="1.认识微服务"></a>1.认识微服务</h1><p>随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？</p><h2 id="1-0-学习目标"><a href="#1-0-学习目标" class="headerlink" title="1.0.学习目标"></a>1.0.学习目标</h2><p>了解微服务架构的优缺点</p><h2 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1.单体架构"></a>1.1.单体架构</h2><p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打成一个包部署。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-03-19-image-20210713202807818-a787e2.png" alt="image-20210713202807818"></p><p>单体架构的优缺点如下：</p><p><strong>优点：</strong></p><ul><li>架构简单</li><li>部署成本低</li></ul><p><strong>缺点：</strong></p><ul><li>耦合度高（维护困难、升级困难）</li></ul><h2 id="1-2-分布式架构"><a href="#1-2-分布式架构" class="headerlink" title="1.2.分布式架构"></a>1.2.分布式架构</h2><p><strong>分布式架构</strong>：根据<strong>业务功能</strong>对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-03-28-image-20210713203124797-15a747.png" alt="image-20210713203124797"></p><p>分布式架构的优缺点：</p><p><strong>优点：</strong></p><ul><li>降低服务耦合</li><li>有利于服务升级和拓展</li></ul><p><strong>缺点：</strong></p><ul><li>服务调用关系错综复杂</li></ul><hr><p>分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：</p><ul><li>服务拆分的粒度如何界定？</li><li>服务之间如何调用？</li><li>服务的调用关系如何管理？</li></ul><p>人们需要制定一套行之有效的标准来约束分布式架构。</p><h2 id="1-3-微服务"><a href="#1-3-微服务" class="headerlink" title="1.3.微服务"></a>1.3.微服务</h2><p>微服务的架构特征：</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li><li>自治：团队独立、技术独立、数据独立，独立部署和交付</li><li>面向服务：服务提供统一标准的接口，与语言和技术无关</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-03-32-image-20210713203753373-d09e5f.png" alt="image-20210713203753373"></p><p>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。</p><p>因此，可以认为<strong>微服务</strong>是一种经过良好架构设计的<strong>分布式架构方案</strong> 。</p><p>但方案该怎么落地？选用什么样的技术栈？全球的互联网公司都在积极尝试自己的微服务落地方案。</p><p>其中在Java领域最引人注目的就是SpringCloud提供的方案了。</p><h2 id="1-4-SpringCloud"><a href="#1-4-SpringCloud" class="headerlink" title="1.4.SpringCloud"></a>1.4.SpringCloud</h2><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：<a href="https://spring.io/projects/spring-cloud%E3%80%82">https://spring.io/projects/spring-cloud。</a></p><p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p><p>其中常见的组件包括：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-03-38-image-20210713204155887-e00407.png" alt="image-20210713204155887"></p><p>另外，SpringCloud底层是依赖于SpringBoot的，并且有版本的兼容关系，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-03-40-image-20210713205003790-7ac9a2.png" alt="image-20210713205003790"></p><p>我们课堂学习的版本是 Hoxton.SR10，因此对应的SpringBoot版本是2.3.x版本。</p><h2 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5.总结"></a>1.5.总结</h2><ul><li><p>单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</p></li><li><p>分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝</p></li><li><p>微服务：一种良好的分布式架构方案</p><p>①优点：拆分粒度更小、服务更独立、耦合度更低</p><p>②缺点：架构非常复杂，运维、监控、部署难度提高</p></li><li><p>SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件</p></li></ul><h1 id="2-服务拆分和远程调用"><a href="#2-服务拆分和远程调用" class="headerlink" title="2.服务拆分和远程调用"></a>2.服务拆分和远程调用</h1><p>任何分布式架构都离不开服务的拆分，微服务也是一样。</p><h2 id="2-1-服务拆分原则"><a href="#2-1-服务拆分原则" class="headerlink" title="2.1.服务拆分原则"></a>2.1.服务拆分原则</h2><p>这里我总结了微服务拆分时的几个原则：</p><ul><li>不同微服务，尽可能不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库，如需数据访问请参照第3条原则</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用，已达到业务诉求（数据更新、查询等）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-03-49-image-20210713210800950-77144c.png" alt="image-20210713210800950"></p><h2 id="2-2-服务拆分示例"><a href="#2-2-服务拆分示例" class="headerlink" title="2.2.服务拆分示例"></a>2.2.服务拆分示例</h2><p>以课前资料中的微服务cloud-demo为例，其结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-03-50-image-20210713211009593-f00470.png" alt="image-20210713211009593"></p><p>cloud-demo：父工程，管理依赖</p><ul><li>order-service：订单微服务，负责订单相关业务</li><li>user-service：用户微服务，负责用户相关业务</li></ul><p>要求：</p><ul><li>订单微服务和用户微服务都必须有各自的数据库，相互独立</li><li>订单服务和用户服务都对外暴露Restful的接口</li><li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li></ul><h3 id="2-2-1-导入Sql语句"><a href="#2-2-1-导入Sql语句" class="headerlink" title="2.2.1.导入Sql语句"></a>2.2.1.导入Sql语句</h3><p>首先，将课前资料提供的<code>cloud-order.sql</code>和<code>cloud-user.sql</code>导入到mysql中：</p><p><img src="/assets/image-20210713211417049.png" alt="image-20210713211417049"></p><p>cloud-user表中初始数据如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-04-37-image-20210713211550169-3dd5ff.png" alt="image-20210713211550169"></p><p>cloud-order表中初始数据如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-04-38-image-20210713211657319-149c8f.png" alt="image-20210713211657319"></p><p>cloud-order表中持有cloud-user表中的id字段。</p><h3 id="2-2-2-导入demo工程"><a href="#2-2-2-导入demo工程" class="headerlink" title="2.2.2.导入demo工程"></a>2.2.2.导入demo工程</h3><p>用IDEA导入课前资料提供的Demo：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-06-02-image-20210713211814094-7d1d8a.png" alt="image-20210713211814094"></p><p>项目结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-04-40-image-20210713212656887-de0240.png" alt="image-20210713212656887"></p><p>导入后，会在IDEA右下角出现弹窗：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-04-43-image-20210713212349272-d5861c.png" alt="image-20210713212349272"></p><p>点击弹窗，然后按下图选择：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-04-45-image-20210713212336185-b172ef.png" alt="image-20210713212336185"></p><p>会出现这样的菜单：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-04-46-image-20210713212513324-cb9014.png" alt="image-20210713212513324"></p><p>配置下项目使用的JDK（<strong>请注意</strong>今天开始到后续项目实战我们JDK版本都将使用1.8）：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-04-50-image-20210713220736408-021da1.png" alt="image-20210713220736408"></p><h2 id="2-3-实现远程调用案例"><a href="#2-3-实现远程调用案例" class="headerlink" title="2.3.实现远程调用案例"></a>2.3.实现远程调用案例</h2><p>在order-service服务中，有一个根据id查询订单的接口：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-04-57-image-20210713212749575-08d01e.png" alt="image-20210713212749575"></p><p>根据id查询订单，返回值是Order对象，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-04-58-image-20210713212901725-c096d7.png" alt="image-20210713212901725"></p><p>其中的user为null</p><p>在user-service中有一个根据id查询用户的接口：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-04-59-image-20210713213146089-3efeda.png" alt="image-20210713213146089"></p><p>查询的结果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-05-01-image-20210713213213075-c54d45.png" alt="image-20210713213213075"></p><h3 id="2-3-1-案例需求："><a href="#2-3-1-案例需求：" class="headerlink" title="2.3.1.案例需求："></a>2.3.1.案例需求：</h3><p>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一起返回。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-06-18-image-20210713213312278-b673af.png" alt="image-20210713213312278"></p><p>因此，我们需要在order-service中 向user-service发起一个http的请求，调用<a href="http://localhost:8081/user/%7BuserId%7D%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E3%80%82">http://localhost:8081/user/{userId}这个接口。</a></p><p>大概的步骤是这样的：</p><ul><li>注册一个RestTemplate的实例到Spring容器</li><li>修改order-service服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User</li><li>将查询的User填充到Order对象，一起返回</li></ul><h3 id="2-3-2-注册RestTemplate"><a href="#2-3-2-注册RestTemplate" class="headerlink" title="2.3.2.注册RestTemplate"></a>2.3.2.注册RestTemplate</h3><p>首先，我们在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-实现远程调用"><a href="#2-3-3-实现远程调用" class="headerlink" title="2.3.3.实现远程调用"></a>2.3.3.实现远程调用</h3><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-06-40-image-20210713213959569-e1fba6.png" alt="image-20210713213959569"></p><p>​RestTemplate底层实际就是发送一个Http请求，跟用户在客户端（浏览器）发起请求类似，因此可以拿到用户的请求。</p><h2 id="2-4-提供者与消费者"><a href="#2-4-提供者与消费者" class="headerlink" title="2.4.提供者与消费者"></a>2.4.提供者与消费者</h2><p>在服务调用关系中，会有两个不同的角色：</p><p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p><p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-06-46-image-20210713214404481-1bf279.png" alt="image-20210713214404481"></p><p>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。</p><p>如果服务A调用了服务B，而服务B又调用了服务C，服务B的角色是什么？</p><ul><li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li><li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li></ul><p>因此，服务B既可以是服务提供者，也可以是服务消费者。<strong>对一个服务而言，被调用&#x3D;提供者，调别人&#x3D;消费者</strong></p><h1 id="3-Eureka注册中心"><a href="#3-Eureka注册中心" class="headerlink" title="3.Eureka注册中心"></a>3.Eureka注册中心</h1><p>假如我们的服务提供者user-service部署了多个实例，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-17-24-image-20210713214925388-899986.png" alt="image-20210713214925388"></p><p>大家思考几个问题：</p><ul><li>order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？</li><li>有多个user-service实例地址，order-service调用时该如何选择？</li><li>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</li></ul><h2 id="3-1-Eureka的结构和作用"><a href="#3-1-Eureka的结构和作用" class="headerlink" title="3.1.Eureka的结构和作用"></a>3.1.Eureka的结构和作用</h2><p>这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka，其结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-17-39-image-20210713220104956-1ff7f4.png" alt="image-20210713220104956"></p><p>回答之前的各个问题：</p><p><strong>问题1</strong>：order-service如何得知user-service实例地址？</p><p>获取地址信息的流程如下：</p><ul><li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫<strong>服务注册</strong></li><li>eureka-server保存服务名称到服务实例地址列表的映射关系</li><li>order-service根据<strong>服务名称</strong>，拉取<strong>实例地址列表</strong>。这个叫<strong>服务发现或服务拉取</strong></li></ul><p><strong>问题2</strong>：order-service如何从多个user-service实例中选择具体的实例？</p><ul><li>order-service从实例列表中利用**[负载均衡算法](<a href="https://www.yuque.com/yzxb/index/ctgttpwzpm2igr0w">负载均衡算法 (yuque.com)</a>)**选中一个实例地址</li><li>向该实例地址发起远程调用</li><li></li></ul><p><strong>问题3</strong>：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p><ul><li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为<strong>心跳</strong></li><li>当超过<strong>一定时间没有发送心跳</strong>时，eureka-server会认为微服务实例故障，将该实例从服务列表中<strong>剔除</strong></li><li>order-service拉取服务时，就能将故障实例排除了</li></ul><blockquote><p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p></blockquote><p>因此，接下来我们动手实践的步骤包括：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-24-33-image-20210713220509769-bee25b.png" alt="image-20210713220509769"></p><h2 id="3-2-搭建eureka-server"><a href="#3-2-搭建eureka-server" class="headerlink" title="3.2.搭建eureka-server"></a>3.2.搭建eureka-server</h2><p>首先大家注册中心服务端：eureka-server，这必须是一个独立的微服务</p><h3 id="3-2-1-创建eureka-server服务"><a href="#3-2-1-创建eureka-server服务" class="headerlink" title="3.2.1.创建eureka-server服务"></a>3.2.1.创建eureka-server服务</h3><p>在cloud-demo父工程下，创建一个子模块：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-24-36-image-20210713220605881-cbae56.png" alt="image-20210713220605881"></p><p>填写模块信息：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-24-49-image-20210713220857396-14fb52.png" alt="image-20210713220857396"></p><p>然后填写服务信息：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-24-52-image-20210713221339022-022dc8.png" alt="image-20210713221339022"></p><h3 id="3-2-2-引入eureka依赖"><a href="#3-2-2-引入eureka依赖" class="headerlink" title="3.2.2.引入eureka依赖"></a>3.2.2.引入eureka依赖</h3><p>引入SpringCloud为eureka提供的starter依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-编写启动类"><a href="#3-2-3-编写启动类" class="headerlink" title="3.2.3.编写启动类"></a>3.2.3.编写启动类</h3><p>给eureka-server服务编写一个启动类，一定要添加一个**@EnableEurekaServer**注解，开启eureka的注册中心功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.eureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-编写配置文件"><a href="#3-2-4-编写配置文件" class="headerlink" title="3.2.4.编写配置文件"></a>3.2.4.编写配置文件</h3><p>编写一个application.yml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3-2-5-启动服务"><a href="#3-2-5-启动服务" class="headerlink" title="3.2.5.启动服务"></a>3.2.5.启动服务</h3><p>启动微服务，然后在浏览器访问：<a href="http://127.0.0.1:10086/">http://127.0.0.1:10086</a></p><p>看到下面结果应该是成功了：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-25-27-image-20210713222157190-5c0b01.png" alt="image-20210713222157190"></p><h2 id="3-3-服务注册"><a href="#3-3-服务注册" class="headerlink" title="3.3.服务注册"></a>3.3.服务注册</h2><p>下面，我们将user-service注册到eureka-server中去。</p><h3 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>在user-service的pom文件中，引入下面的eureka-client依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）配置文件"><a href="#2）配置文件" class="headerlink" title="2）配置文件"></a>2）配置文件</h3><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3）启动多个user-service实例"><a href="#3）启动多个user-service实例" class="headerlink" title="3）启动多个user-service实例"></a>3）启动多个user-service实例</h3><p>为了演示一个服务有多个实例的场景，我们添加一个SpringBoot的启动配置，再启动一个user-service。</p><p>首先，复制原来的user-service启动配置：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-26-31-image-20210713222656562-bf5d36.png" alt="image-20210713222656562"></p><p>然后，在弹出的窗口中，填写信息：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-26-32-image-20210713222757702-be4326.png" alt="image-20210713222757702"></p><p>现在，SpringBoot窗口会出现两个user-service启动配置：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-26-35-image-20210713222841951-a4929d.png" alt="image-20210713222841951"></p><p>不过，第一个是8081端口，第二个是8082端口。</p><p>启动两个user-service实例：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-26-49-image-20210713223041491-61cede.png" alt="image-20210713223041491"></p><p>查看eureka-server管理页面：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-26-51-image-20210713223150650-399f5a.png" alt="image-20210713223150650"></p><h2 id="3-4-服务发现"><a href="#3-4-服务发现" class="headerlink" title="3.4.服务发现"></a>3.4.服务发现</h2><p>下面，我们将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现。</p><h3 id="1）引入依赖-1"><a href="#1）引入依赖-1" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>之前说过，服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致。</p><p>在order-service的pom文件中，引入下面的eureka-client依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）配置文件-1"><a href="#2）配置文件-1" class="headerlink" title="2）配置文件"></a>2）配置文件</h3><p>服务发现也需要知道eureka地址，因此第二步与服务注册一致，都是配置eureka信息：</p><p>在order-service中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3）服务拉取和负载均衡"><a href="#3）服务拉取和负载均衡" class="headerlink" title="3）服务拉取和负载均衡"></a>3）服务拉取和负载均衡</h3><p>最后，我们要去eureka-server中拉取user-service服务的实例列表，并且实现负载均衡。</p><p>不过这些动作不用我们去做，只需要添加一些注解即可。</p><p>在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-28-27-image-20210713224049419-53c776.png" alt="image-20210713224049419"></p><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法。修改访问的url路径，用服务名代替ip、端口：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-28-25-image-20210713224245731-f9310c.png" alt="image-20210713224245731"></p><p>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡。</p><h1 id="4-Ribbon负载均衡"><a href="#4-Ribbon负载均衡" class="headerlink" title="4.Ribbon负载均衡"></a>4.Ribbon负载均衡</h1><p>上一节中，我们添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？</p><h2 id="4-1-负载均衡原理"><a href="#4-1-负载均衡原理" class="headerlink" title="4.1.负载均衡原理"></a>4.1.负载均衡原理</h2><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-29-58-image-20210713224517686-077442.png" alt="image-20210713224517686"></p><p>那么我们发出的请求明明是<a href="http://userservice/user/1%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8F%98%E6%88%90%E4%BA%86http://localhost:8081%E7%9A%84%E5%91%A2%EF%BC%9F">http://userservice/user/1，怎么变成了http://localhost:8081的呢？</a></p><h2 id="4-2-源码跟踪"><a href="#4-2-源码跟踪" class="headerlink" title="4.2.源码跟踪"></a>4.2.源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p>我们进行源码跟踪：</p><h3 id="1）LoadBalancerIntercepor"><a href="#1）LoadBalancerIntercepor" class="headerlink" title="1）LoadBalancerIntercepor"></a>1）LoadBalancerIntercepor</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-30-55-1525620483637-d7ecd7.png" alt="1525620483637"></p><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p><ul><li><code>request.getURI()</code>：获取请求uri，本例中就是 <a href="http://user-service/user/8">http://user-service/user/8</a></li><li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li><li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</li></ul><p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><h3 id="2）LoadBalancerClient"><a href="#2）LoadBalancerClient" class="headerlink" title="2）LoadBalancerClient"></a>2）LoadBalancerClient</h3><p>继续跟入execute方法：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-32-23-1525620787090-92ee66.png" alt="1525620787090"></p><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-33-06-1525620835911-247d03.png" alt="1525620835911"></p><p>果然实现了负载均衡。</p><h3 id="3）负载均衡策略IRule"><a href="#3）负载均衡策略IRule" class="headerlink" title="3）负载均衡策略IRule"></a>3）负载均衡策略IRule</h3><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-33-29-1525620835911-dca5d5.png" alt="1525620835911"></p><p>我们继续跟入：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-33-45-1544361421671-78fc90.png" alt="1544361421671"></p><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-33-55-1525622652849-cff81e.png" alt="1525622652849"></p><p>我们看看这个rule是谁：</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-34-07-1525622699666-a53f14.png" alt="1525622699666"></p><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-34-18-1525622754316-68f64d.png" alt="1525622754316"></p><p>这不就是轮询的意思嘛。</p><p>到这里，整个负载均衡的流程我们就清楚了。</p><h3 id="4）总结"><a href="#4）总结" class="headerlink" title="4）总结"></a>4）总结</h3><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-34-27-image-20210713224724673-7471ca.png" alt="image-20210713224724673"></p><p>基本流程如下：</p><ul><li>拦截我们的RestTemplate请求<a href="http://userservice/user/1">http://userservice/user/1</a></li><li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li><li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li><li>eureka返回列表，localhost:8081、localhost:8082</li><li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li><li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a href="http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82">http://localhost:8081/user/1，发起真实请求</a></li></ul><h2 id="4-3-负载均衡策略"><a href="#4-3-负载均衡策略" class="headerlink" title="4.3.负载均衡策略"></a>4.3.负载均衡策略</h2><h3 id="4-3-1-负载均衡策略"><a href="#4-3-1-负载均衡策略" class="headerlink" title="4.3.1.负载均衡策略"></a>4.3.1.负载均衡策略</h3><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-36-33-image-20210713225653000-88261e.png" alt="image-20210713225653000"></p><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p><h3 id="4-3-2-自定义负载均衡策略"><a href="#4-3-2-自定义负载均衡策略" class="headerlink" title="4.3.2.自定义负载均衡策略"></a>4.3.2.自定义负载均衡策略</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span> <span class="comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p></blockquote><h2 id="4-4-饥饿加载"><a href="#4-4-饥饿加载" class="headerlink" title="4.4.饥饿加载"></a>4.4.饥饿加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure><h1 id="5-Nacos注册中心"><a href="#5-Nacos注册中心" class="headerlink" title="5.Nacos注册中心"></a>5.Nacos注册中心</h1><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p><h2 id="5-1-认识和安装Nacos"><a href="#5-1-认识和安装Nacos" class="headerlink" title="5.1.认识和安装Nacos"></a>5.1.认识和安装Nacos</h2><blockquote><p>Nacos安装指南：<a href="/2024/06/28/Nacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/" title="Nacos安装指南">Nacos安装指南</a><br><a href="https://nacos.io/">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-40-16-image-20210713230444308-5e4311.png" alt="image-20210713230444308"></p><p>安装方式可以参考课前资料《Nacos安装指南.md》</p><h2 id="5-2-服务注册到nacos"><a href="#5-2-服务注册到nacos" class="headerlink" title="5.2.服务注册到nacos"></a>5.2.服务注册到nacos</h2><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h3 id="1）引入依赖-2"><a href="#1）引入依赖-2" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的依赖。</p></blockquote><h3 id="2）配置nacos地址"><a href="#2）配置nacos地址" class="headerlink" title="2）配置nacos地址"></a>2）配置nacos地址</h3><p>在user-service和order-service的application.yml中添加nacos地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的地址</p></blockquote><h3 id="3）重启"><a href="#3）重启" class="headerlink" title="3）重启"></a>3）重启</h3><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-41-37-image-20210713231439607-ebaa5e.png" alt="image-20210713231439607"></p><h2 id="5-3-服务分级存储模型"><a href="#5-3-服务分级存储模型" class="headerlink" title="5.3.服务分级存储模型"></a>5.3.服务分级存储模型</h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-41-53-image-20210713232522531-8dd599.png" alt="image-20210713232522531"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-42-04-image-20210713232658928-1bbf01.png" alt="image-20210713232658928"></p><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h3 id="5-3-1-给user-service配置集群"><a href="#5-3-1-给user-service配置集群" class="headerlink" title="5.3.1.给user-service配置集群"></a>5.3.1.给user-service配置集群</h3><p>修改user-service的application.yml文件，添加集群配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure><p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-42-30-image-20210713232916215-abf2fc.png" alt="image-20210713232916215"></p><p>我们再次复制一个user-service启动配置，添加属性：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dserver.port=8083 -Dspring.cloud.nacos.discovery.cluster-name=SH</span><br></pre></td></tr></table></figure><p>配置如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-42-40-image-20210713233528982-087a5d.png" alt="image-20210713233528982"></p><p>启动UserApplication3后再次查看nacos控制台：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-42-46-image-20210713233727923-88575a.png" alt="image-20210713233727923"></p><h3 id="5-3-2-同集群优先的负载均衡"><a href="#5-3-2-同集群优先的负载均衡" class="headerlink" title="5.3.2.同集群优先的负载均衡"></a>5.3.2.同集群优先的负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p>1）给order-service配置集群信息</p><p>修改order-service的application.yml文件，添加集群配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848</span><br><span class="line">      discovery:</span><br><span class="line">        cluster-name: HZ <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure><p>2）修改负载均衡规则</p><p>修改order-service的application.yml文件，修改负载均衡规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><h2 id="5-4-权重配置"><a href="#5-4-权重配置" class="headerlink" title="5.4.权重配置"></a>5.4.权重配置</h2><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-44-19-image-20210713235133225-2acbae.png" alt="image-20210713235133225"></p><p>在弹出的编辑窗口，修改权重：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-44-24-image-20210713235235219-7b3d1f.png" alt="image-20210713235235219"></p><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote><h2 id="5-5-环境隔离"><a href="#5-5-环境隔离" class="headerlink" title="5.5.环境隔离"></a>5.5.环境隔离</h2><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-44-55-image-20210714000101516-155b71.png" alt="image-20210714000101516"></p><h3 id="5-5-1-创建namespace"><a href="#5-5-1-创建namespace" class="headerlink" title="5.5.1.创建namespace"></a>5.5.1.创建namespace</h3><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-45-01-image-20210714000414781-c91bf0.png" alt="image-20210714000414781"></p><p>我们可以点击页面新增按钮，添加一个namespace：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-45-25-image-20210714000440143-108533.png" alt="image-20210714000440143"></p><p>然后，填写表单：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-45-28-image-20210714000505928-2d2f46.png" alt="image-20210714000505928"></p><p>就能在页面看到一个新的namespace：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-45-35-image-20210714000522913-206d55.png" alt="image-20210714000522913"></p><h3 id="5-5-2-给微服务配置namespace"><a href="#5-5-2-给微服务配置namespace" class="headerlink" title="5.5.2.给微服务配置namespace"></a>5.5.2.给微服务配置namespace</h3><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改order-service的application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间，填ID</span></span><br></pre></td></tr></table></figure><p>重启order-service后，访问控制台，可以看到下面的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-46-18-image-20210714000830703-9cdc92.png" alt="image-20210714000830703"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-46-20-image-20210714000837140-cf2df7.png" alt="image-20210714000837140"></p><p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-46-24-image-20210714000941256-7c6ad8.png" alt="image-20210714000941256"></p><h2 id="5-6-Nacos与Eureka的区别"><a href="#5-6-Nacos与Eureka的区别" class="headerlink" title="5.6.Nacos与Eureka的区别"></a>5.6.Nacos与Eureka的区别</h2><p>Nacos的服务实例分为两种l类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/28/00-46-52-image-20210714001728017-e37de9.png" alt="image-20210714001728017"></p><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Eureka </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql高可用解决方案</title>
      <link href="/2024/06/25/Mysql%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2024/06/25/Mysql%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="任务背景"><a href="#任务背景" class="headerlink" title="任务背景"></a>任务背景</h1><h2 id="一、真实案例"><a href="#一、真实案例" class="headerlink" title="一、真实案例"></a>一、真实案例</h2><p>公司现在需要做MySQL数据库迁移，之前数据库是一主两从，使用MHA做了高可用，跑在私有云平台，现在需要这三台数据库迁移到物理机上，而且云上的数据库正在跑，希望做到热迁移，即不影响业务的情况下，把现有数据库从私有云平台迁移到物理真机上。</p><h2 id="二、案例背后核心技术"><a href="#二、案例背后核心技术" class="headerlink" title="二、案例背后核心技术"></a>二、案例背后核心技术</h2><p>1、熟悉MHA高可用的原理和部署</p><p>2、掌握MySQL数据库的迁移</p><p>3、熟悉MySQL主从复制的模式和搭建（基于GTIDs）</p><h2 id="三、今日场景"><a href="#三、今日场景" class="headerlink" title="三、今日场景"></a>三、今日场景</h2><p>随着业务功能的逐步完善，现有MySQL数据库架构虽然可以保障数据的相对可靠性，但是不能够完全保障&#x3D;&#x3D;服务的可用性。&#x3D;&#x3D;当我们的主库挂掉后，mysql服务不能立马切换到从服务器。所以，需要在现有架构的基础上&#x3D;&#x3D;扩展和升级，&#x3D;&#x3D;进而在保障数据的可靠性的同时能够保障服务的可用性。</p><h1 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h1><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-57-50-MHA%E7%90%86%E8%A7%A3-05aac5.png" alt="MHA理解"></p><p>1、使用三台服务器搭建mysql的复制组</p><p>2、使用&#x3D;&#x3D;MHA&#x3D;&#x3D;管理复制组，当master挂掉后，会立马提升一台slave作为新的master</p><h1 id="任务拆解"><a href="#任务拆解" class="headerlink" title="任务拆解"></a>任务拆解</h1><ul><li><p><input checked="" disabled="" type="checkbox"> 搭建MySQL的复制组（M-S1-S1，并联架构）</p></li><li><p><input checked="" disabled="" type="checkbox"> 安装MHA相关软件来管理复制组</p></li></ul><h1 id="理论储备"><a href="#理论储备" class="headerlink" title="理论储备"></a>理论储备</h1><h2 id="一、MHA简介"><a href="#一、MHA简介" class="headerlink" title="一、MHA简介"></a>一、MHA简介</h2><p>MHA（Master High Availability）目前在MySQL高可用方面是一个相对成熟的解决方案，它由日本DeNA公司youshimaton（现就职于Facebook公司）开发，是一套优秀的作为MySQL高可用性环境下&#x3D;&#x3D;故障切换和主从提升&#x3D;&#x3D;的高可用软件。在MySQL故障切换过程中，MHA能做到在0~30秒之内自动完成数据库的故障切换操作，并且在进行故障切换的过程中，MHA能在&#x3D;&#x3D;较大程度&#x3D;&#x3D;上保证数据的一致性，以达到真正意义上的高可用。</p><h2 id="二、MHA工作原理"><a href="#二、MHA工作原理" class="headerlink" title="二、MHA工作原理"></a>二、MHA工作原理</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-57-48-MHA-0135b5.png" alt="MHA"></p><ol><li>当master出现故障时，通过对比slave之间I&#x2F;O线程读取master上binlog的位置，选取最接近的slave做为最新的slave（latest slave）。 </li><li>其它slave通过与latest slave对比&#x3D;&#x3D;生成差异中继日志，并应用&#x3D;&#x3D;。</li><li>在latest slave上&#x3D;&#x3D;应用从master保存的binlog&#x3D;&#x3D;，同时将latest slave&#x3D;&#x3D;提升为master&#x3D;&#x3D;。</li><li>最后在其它slave上应用相应的差异中继日志并开始从新的master开始复制.</li></ol><h2 id="三、MHA组件"><a href="#三、MHA组件" class="headerlink" title="三、MHA组件"></a>三、MHA组件</h2><h3 id="1、MHA相关组件"><a href="#1、MHA相关组件" class="headerlink" title="1、MHA相关组件"></a>1、MHA相关组件</h3><ul><li><p><strong>MHA Manager</strong>(管理节点) </p><p>MHA Manager可以单独部署在一台独立的机器上管理多个&#x3D;&#x3D;master-slave集群&#x3D;&#x3D;，也可以部署在一台slave节点上。</p></li><li><p><strong>MHA Node</strong>（数据节点）</p><p>MHA Node运行在&#x3D;&#x3D;每台MySQL服务器&#x3D;&#x3D;上，MHA Manager会定时探测集群中的master节点，当master出现故障时，它可以自动将数据的slave提升为新的master，然后将所有其他的slave重新指向新的master。整个故障转移过程对应用程序完全透明。</p></li></ul><h3 id="2、MHA组件介绍"><a href="#2、MHA组件介绍" class="headerlink" title="2、MHA组件介绍"></a>2、MHA组件介绍</h3><ul><li>MHA Manager</li></ul><p> 运行一些工具，比如masterha_manager工具实现&#x3D;&#x3D;自动监控MySQL Master&#x3D;&#x3D;和实现&#x3D;&#x3D;master故障切换&#x3D;&#x3D;，其它工具手动实现master故障切换、在线mater转移、连接检查等等。一个Manager可以管理多 个master-slave集群</p><ul><li>MHA Node</li></ul><p> 部署在所有运行MySQL的服务器上，无论是master还是slave。主要有三个作用：</p><p>1）保存二进制日志</p><pre><code> 如果能够访问故障master，会拷贝master的二进制日志</code></pre><p> 2）应用差异中继日志</p><p>​从拥有最新数据的slave上生成差异中继日志，然后应用差异日志。</p><p> 3）清除中继日志</p><pre><code> 在不停止SQL线程的情况下删除中继日志</code></pre><h3 id="3、相关工具介绍"><a href="#3、相关工具介绍" class="headerlink" title="3、相关工具介绍"></a>3、相关工具介绍</h3><h4 id="㈠-Manager工具"><a href="#㈠-Manager工具" class="headerlink" title="㈠ Manager工具"></a>㈠ Manager工具</h4><table><thead><tr><th>工具</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;masterha_check_ssh&#x3D;&#x3D;</td><td>检查MHA的SSH配置</td></tr><tr><td>&#x3D;&#x3D;masterha_check_repl&#x3D;&#x3D;</td><td>检查MySQL复制</td></tr><tr><td>&#x3D;&#x3D;masterha_manager&#x3D;&#x3D;</td><td>启动MHA</td></tr><tr><td>&#x3D;&#x3D;masterha_check_status&#x3D;&#x3D;</td><td>检测当前MHA运行状态</td></tr><tr><td>masterha_master_monitor</td><td>监测master是否宕机</td></tr><tr><td>masterha_master_switch</td><td>控制故障转移(自动或手动)</td></tr><tr><td>masterha_conf_host</td><td>添加或删除配置的server信息</td></tr></tbody></table><h4 id="㈡-Node工具"><a href="#㈡-Node工具" class="headerlink" title="㈡ Node工具"></a>㈡ Node工具</h4><table><thead><tr><th>工具</th><th>说明</th></tr></thead><tbody><tr><td>save_binary_logs</td><td>保存和复制master的二进制日志</td></tr><tr><td>apply_diff_relay_logs</td><td>识别差异的中继日志事件并应用于其它slave</td></tr><tr><td>filter_mysqlbinlog</td><td>去除不必要的ROLLBACK事件(MHA已不再使用这个工具)</td></tr><tr><td>purge_relay_logs</td><td>清除中继日志(不会阻塞SQL线程)</td></tr></tbody></table><p><em>&#x3D;&#x3D;注意：Node这些工具通常由MHA Manager的脚本触发,无需人手操作&#x3D;&#x3D;。</em></p><h1 id="任务解决方案"><a href="#任务解决方案" class="headerlink" title="任务解决方案"></a>任务解决方案</h1><h2 id="一、MHA部署"><a href="#一、MHA部署" class="headerlink" title="一、MHA部署"></a>一、MHA部署</h2><h3 id="1、部署规划"><a href="#1、部署规划" class="headerlink" title="1、部署规划"></a>1、部署规划</h3><table><thead><tr><th>角色</th><th>IP</th><th>主机名</th><th>server-id</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>MHA-Manager</td><td>10.1.1.40</td><td>mgr.heima.cc</td><td>—</td><td>管理节点</td><td></td></tr><tr><td>MHA-Node（Master）</td><td>10.1.1.10</td><td>master.heima.cc</td><td>10</td><td>数据节点</td><td>写</td></tr><tr><td>MHA-Node（Slave1）</td><td>10.1.1.20</td><td>slave1.heima.cc</td><td>20</td><td>数据节点</td><td>读</td></tr><tr><td>MHA-Node（Slave2）</td><td>10.1.1.30</td><td>slave2.heima.cc</td><td>30</td><td>数据节点</td><td>读</td></tr></tbody></table><h3 id="2、系统和软件版本"><a href="#2、系统和软件版本" class="headerlink" title="2、系统和软件版本"></a>2、系统和软件版本</h3><table><thead><tr><th>系统版本</th><th>MySQL版本</th><th>MHA版本</th></tr></thead><tbody><tr><td>CentOS  7.6</td><td>MySQL-5.7.25</td><td>mha4mysql-manager-0.57      mha4mysql-node-0.57</td></tr></tbody></table><h3 id="3、系统环境初始化"><a href="#3、系统环境初始化" class="headerlink" title="3、系统环境初始化"></a>3、系统环境初始化</h3><h4 id="㈠-修改主机名和hosts"><a href="#㈠-修改主机名和hosts" class="headerlink" title="㈠ 修改主机名和hosts"></a>㈠ 修改主机名和hosts</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hostnamectl set-hostname master.heima.cc</span></span><br><span class="line"><span class="comment"># hostnamectl set-hostname slave1.heima.cc</span></span><br><span class="line"><span class="comment"># hostnamectl set-hostname slave2.heima.cc</span></span><br><span class="line"><span class="comment"># hostnamectl set-hostname mgr.heima.cc</span></span><br><span class="line"><span class="comment"># cat /etc/hosts</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::<span class="number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.10</span>    master.heima.cc  master</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.20</span>    slave1.heima.cc  slave1</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.30</span>    slave2.heima.cc  slave2</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.40</span>    mgr.heima.cc     mgr</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="㈡-关闭防火墙和selinux"><a href="#㈡-关闭防火墙和selinux" class="headerlink" title="㈡ 关闭防火墙和selinux"></a>㈡ 关闭防火墙和selinux</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl stop firewalld</span></span><br><span class="line"><span class="comment"># systemctl disable firewalld</span></span><br><span class="line"><span class="comment"># setenforce 0</span></span><br><span class="line"><span class="comment"># sed -i &#x27;/SELINUX=enforcing/cSELINUX=disabled&#x27; /etc/selinux/config</span></span><br></pre></td></tr></table></figure><h4 id="㈢-关闭NetworkManager服务"><a href="#㈢-关闭NetworkManager服务" class="headerlink" title="㈢ 关闭NetworkManager服务"></a>㈢ 关闭NetworkManager服务</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl stop NetworkManager</span></span><br><span class="line"><span class="comment"># systemctl disable NetworkManager</span></span><br></pre></td></tr></table></figure><h4 id="㈣-配置yum源"><a href="#㈣-配置yum源" class="headerlink" title="㈣ 配置yum源"></a>㈣ 配置yum源</h4><p><strong>说明：</strong>每台服务器都需要配置！</p><p><strong>方案一：</strong>分别配置 aliyun、epel 和本地源;</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh /soft/mha/epel-release-latest-7.noarch.rpm</span></span><br><span class="line"><span class="comment"># cat server.repo </span></span><br><span class="line">[<span class="type">local</span>]</span><br><span class="line">name=local yum</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line">[<span class="type">aliyun</span>]</span><br><span class="line">name=this is aliyun yum</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="number">7</span>/os/x86_64/</span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>方案二：</strong>配置自建仓库，提前准备好软件包</p><p>注意：如果没有网络可以使用本地仓库，提前下载好包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat server.repo </span></span><br><span class="line">[<span class="type">local</span>]</span><br><span class="line">name=local yum</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line">[<span class="type">mha</span>]</span><br><span class="line">name=mha soft</span><br><span class="line">baseurl=file:///soft/mha/mha<span class="literal">-yum</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line">说明：</span><br><span class="line"><span class="number">1</span>）每台服务器都需要配置该文件</span><br><span class="line"><span class="number">2</span>）每台服务器都需要/soft/mha/mha<span class="literal">-yum</span>目录来保存相应的软件包</span><br></pre></td></tr></table></figure><h4 id="㈤-安装依赖包"><a href="#㈤-安装依赖包" class="headerlink" title="㈤ 安装依赖包"></a>㈤ 安装依赖包</h4><p>注意：所有服务器均需要安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install perl<span class="literal">-DBD-MySQL</span> \</span><br><span class="line">perl<span class="literal">-Config-Tiny</span> \</span><br><span class="line">perl<span class="literal">-Time-HiRes</span> \</span><br><span class="line">perl<span class="literal">-Mail-Sender</span> \</span><br><span class="line">perl<span class="literal">-Mail-Sendmail</span> \</span><br><span class="line">perl<span class="literal">-MIME-Base32</span> \</span><br><span class="line">perl<span class="literal">-MIME-Charset</span> \</span><br><span class="line">perl<span class="literal">-MIME-EncWords</span> \</span><br><span class="line">perl<span class="literal">-Params-Classify</span> \</span><br><span class="line">perl<span class="literal">-Params-Validate</span>.x86_64 \</span><br><span class="line">perl<span class="literal">-Log-Dispatch</span> \</span><br><span class="line">perl<span class="literal">-Parallel-ForkManager</span> \</span><br><span class="line">net<span class="literal">-tools</span></span><br></pre></td></tr></table></figure><h3 id="4、部署MySQL复制环境"><a href="#4、部署MySQL复制环境" class="headerlink" title="4、部署MySQL复制环境"></a>4、部署MySQL复制环境</h3><h4 id="㈠-MySQL部署规划"><a href="#㈠-MySQL部署规划" class="headerlink" title="㈠ MySQL部署规划"></a>㈠ MySQL部署规划</h4><table><thead><tr><th>安装目录</th><th>数据库目录</th><th>配置文件</th><th>套接字文件</th><th>端口</th></tr></thead><tbody><tr><td>&#x2F;usr&#x2F;local&#x2F;mysql</td><td>&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</td><td>&#x2F;etc&#x2F;my.cnf</td><td>&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql.sock</td><td>3307</td></tr></tbody></table><h4 id="㈡-搭建主从复制"><a href="#㈡-搭建主从复制" class="headerlink" title="㈡ 搭建主从复制"></a>㈡ 搭建主从复制</h4><h5 id="①-创建配置文件"><a href="#①-创建配置文件" class="headerlink" title="①  创建配置文件"></a>①  创建配置文件</h5><ul><li>master</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># cat /etc/my.cnf</span></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">port=<span class="number">3307</span></span><br><span class="line">log<span class="literal">-error</span>=/usr/local/mysql/master.err</span><br><span class="line">log<span class="literal">-bin</span>=/usr/local/mysql/<span class="keyword">data</span>/binlog</span><br><span class="line">server<span class="literal">-id</span>=<span class="number">10</span></span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line">gtid<span class="literal">-mode</span>=on</span><br><span class="line">log<span class="literal">-slave-updates</span>=<span class="number">1</span></span><br><span class="line">enforce<span class="literal">-gtid-consistency</span></span><br><span class="line">[<span class="type">client</span>]</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br></pre></td></tr></table></figure><ul><li>slave1</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">slave1</span> ~]<span class="comment"># cat /etc/my.cnf</span></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">port=<span class="number">3307</span></span><br><span class="line">log<span class="literal">-error</span>=/usr/local/mysql/slave1.err</span><br><span class="line">relay<span class="literal">-log</span>=/usr/local/mysql/<span class="keyword">data</span>/relaylog</span><br><span class="line">log<span class="literal">-bin</span>=/usr/local/mysql/<span class="keyword">data</span>/binlog</span><br><span class="line">server<span class="literal">-id</span>=<span class="number">20</span></span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line">log<span class="literal">-slave-updates</span>=<span class="number">1</span></span><br><span class="line">gtid<span class="literal">-mode</span>=on</span><br><span class="line">enforce<span class="literal">-gtid-consistency</span></span><br><span class="line"><span class="built_in">skip-slave</span><span class="literal">-start</span></span><br><span class="line">[<span class="type">client</span>]</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br></pre></td></tr></table></figure><ul><li>slave2</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">slave2</span> ~]<span class="comment"># cat /etc/my.cnf</span></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">port=<span class="number">3307</span></span><br><span class="line">log<span class="literal">-error</span>=/usr/local/mysql/slave2.err</span><br><span class="line">relay<span class="literal">-log</span>=/usr/local/mysql/<span class="keyword">data</span>/relaylog</span><br><span class="line">log<span class="literal">-bin</span>=/usr/local/mysql/<span class="keyword">data</span>/binlog</span><br><span class="line">server<span class="literal">-id</span>=<span class="number">30</span></span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line">log<span class="literal">-slave-updates</span>=<span class="number">1</span></span><br><span class="line">gtid<span class="literal">-mode</span>=on</span><br><span class="line">enforce<span class="literal">-gtid-consistency</span></span><br><span class="line"><span class="built_in">skip-slave</span><span class="literal">-start</span></span><br><span class="line">[<span class="type">client</span>]</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br></pre></td></tr></table></figure><h5 id="②-同步数据到从服务器"><a href="#②-同步数据到从服务器" class="headerlink" title="② 同步数据到从服务器"></a>② 同步数据到从服务器</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># rsync -av /usr/local/mysql 10.1.1.20:/usr/local/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># rsync -av /usr/local/mysql 10.1.1.30:/usr/local/</span></span><br><span class="line">注意：</span><br><span class="line">保证两台slave服务器上有mysql用户</span><br></pre></td></tr></table></figure><h5 id="③-删除auto-cnf文件"><a href="#③-删除auto-cnf文件" class="headerlink" title="③ 删除auto.cnf文件"></a>③ 删除auto.cnf文件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">data</span>]<span class="comment"># rm -f auto.cnf </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave1</span> <span class="type">data</span>]<span class="comment"># rm -f auto.cnf </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave2</span> <span class="type">data</span>]<span class="comment"># rm -f auto.cnf</span></span><br><span class="line">注意：三台服务器都删除</span><br></pre></td></tr></table></figure><h5 id="④-启动数据库"><a href="#④-启动数据库" class="headerlink" title="④ 启动数据库"></a>④ 启动数据库</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># service mysql start</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave1</span> ~]<span class="comment"># service mysql start</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave2</span> ~]<span class="comment"># service mysql start</span></span><br></pre></td></tr></table></figure><h5 id="⑤-master创建复制用户"><a href="#⑤-master创建复制用户" class="headerlink" title="⑤ master创建复制用户"></a>⑤ master创建复制用户</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create user <span class="string">&#x27;slave&#x27;</span><span class="string">@&#x27;10.1.1.%&#x27; identified by &#x27;123&#x27;;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br><span class="line"><span class="string">mysql&gt; grant replication slave on *.* to &#x27;slave&#x27;@&#x27;10.1.1.%&#x27;;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br><span class="line"><span class="string">mysql&gt; flush privileges;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">说明：创建MHA的监控用户和密码，为后续做准备</span></span><br><span class="line"><span class="string">mysql&gt; create user &#x27;mha&#x27;@&#x27;10.1.1.40&#x27; identified by &#x27;123&#x27;;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.01 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; grant all privileges on *.* to &#x27;mha&#x27;@&#x27;10.1.1.40&#x27;;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; flush privileges;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h5 id="⑥-slave上配置同步信息"><a href="#⑥-slave上配置同步信息" class="headerlink" title="⑥ slave上配置同步信息"></a>⑥ slave上配置同步信息</h5><p>注意：两台slave都需要配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to master_host=<span class="string">&#x27;10.1.1.10&#x27;</span>,master_port=<span class="number">3307</span>,master_user=<span class="string">&#x27;slave&#x27;</span>,master_password=<span class="string">&#x27;123&#x27;</span>,master_auto_position=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">start</span> slave;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h5 id="⑦-测试验证"><a href="#⑦-测试验证" class="headerlink" title="⑦ 测试验证"></a>⑦ 测试验证</h5><p>略</p><h3 id="5、MHA软件安装"><a href="#5、MHA软件安装" class="headerlink" title="5、MHA软件安装"></a>5、MHA软件安装</h3><h4 id="㈠-不同节点安装软件"><a href="#㈠-不同节点安装软件" class="headerlink" title="㈠ 不同节点安装软件"></a>㈠ 不同节点安装软件</h4><p>说明：在所有节点安装 &#x3D;&#x3D;mha-node&#x3D;&#x3D; 软件包，在 &#x3D;&#x3D;mha 管理&#x3D;&#x3D;端再安装 mha-manager 软件包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">mgr</span> ~]<span class="comment"># yum –y install mha4mysql-node-0.57-0.el7.noarch.rpm</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># yum –y install mha4mysql-node-0.57-0.el7.noarch.rpm</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave1</span> ~]<span class="comment"># yum -y install mha4mysql-node-0.57-0.el7.noarch.rpm</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave2</span> ~]<span class="comment"># yum –y install mha4mysql-node-0.57-0.el7.noarch.rpm</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">mgr</span> ~]<span class="comment"># yum –y install mha4mysql-manager-0.57-0.el7.noarch.rpm</span></span><br></pre></td></tr></table></figure><h4 id="㈡-配置ssh互信"><a href="#㈡-配置ssh互信" class="headerlink" title="㈡ 配置ssh互信"></a>㈡ 配置ssh互信</h4><p>说明：</p><ol><li>在生产环境中几乎都是禁止root远程登陆服务器的，所以ssh免密码登陆要在admin用户下进行配置，这是处于安全角度考虑出发。 </li><li>admin用户可以是任意普通用户</li><li>该普通用户用于mha的管理节点远程访问mysql复制组中的所有主机，完成一些其他工作</li></ol><h5 id="①-所有机器创建admin用户"><a href="#①-所有机器创建admin用户" class="headerlink" title="① 所有机器创建admin用户"></a>① 所有机器创建admin用户</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># useradd admin</span></span><br><span class="line"><span class="comment"># echo 123|passwd --stdin admin</span></span><br></pre></td></tr></table></figure><h5 id="②-配置mgr主机到其他主机的admin用户互信"><a href="#②-配置mgr主机到其他主机的admin用户互信" class="headerlink" title="② 配置mgr主机到其他主机的admin用户互信"></a>② 配置mgr主机到其他主机的admin用户互信</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mgr端：</span><br><span class="line">[<span class="type">root</span>@<span class="type">mgr</span> ~]<span class="comment"># su - admin</span></span><br><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> ~]<span class="variable">$</span> ssh<span class="literal">-keygen</span> <span class="literal">-P</span> <span class="string">&quot;&quot;</span> <span class="operator">-f</span> ~/.ssh/id_rsa</span><br><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> ~]<span class="variable">$</span> <span class="built_in">cd</span> .ssh/</span><br><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> <span class="type">.ssh</span>]<span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">id_rsa  id_rsa.pub</span><br><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> <span class="type">.ssh</span>]<span class="variable">$</span> <span class="built_in">mv</span> id_rsa.pub authorized_keys</span><br><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> <span class="type">.ssh</span>]<span class="variable">$</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>;<span class="keyword">do</span> scp <span class="literal">-r</span> ../.ssh/ <span class="number">10.1</span>.<span class="number">1</span>.<span class="variable">$i:</span>~/;done</span><br><span class="line"></span><br><span class="line">测试免密登录：</span><br><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> <span class="type">.ssh</span>]<span class="variable">$</span> ssh <span class="number">10.1</span>.<span class="number">1.10</span></span><br><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> <span class="type">.ssh</span>]<span class="variable">$</span> ssh <span class="number">10.1</span>.<span class="number">1.20</span></span><br><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> <span class="type">.ssh</span>]<span class="variable">$</span> ssh <span class="number">10.1</span>.<span class="number">1.30</span></span><br></pre></td></tr></table></figure><h4 id="㈢-配置admin用户的sudo权限"><a href="#㈢-配置admin用户的sudo权限" class="headerlink" title="㈢ 配置admin用户的sudo权限"></a>㈢ 配置admin用户的sudo权限</h4><ul><li>配置admin用户执行sudo命令权限</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># vim /etc/sudoers.d/admin</span></span><br><span class="line"><span class="comment">#User_Alias  表示具有sudo权限的用 户 列表; Host_Alias表示主机的列表</span></span><br><span class="line">User_Alias MYSQL_USERS = admin</span><br><span class="line"><span class="comment">#Runas_Alias  表示用户以什么身份登录</span></span><br><span class="line">Runas_Alias MYSQL_RUNAS = root</span><br><span class="line"><span class="comment">#Cmnd_Alias  表示允许执行命令的列表</span></span><br><span class="line">Cmnd_Alias MYSQL_CMNDS = /sbin/ifconfig,/sbin/arping</span><br><span class="line">MYSQL_USERS ALL = (MYSQL_RUNAS) NOPASSWD: MYSQL_CMNDS</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># for i in 20 30;do scp /etc/sudoers.d/admin 10.1.1.$i:/etc/sudoers.d/;done</span></span><br></pre></td></tr></table></figure><ul><li>测试admin用户是否可以挂载VIP</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">admin</span>@<span class="type">master</span> ~]<span class="variable">$</span> sudo /sbin/ifconfig ens33:<span class="number">1</span> <span class="number">10.1</span>.<span class="number">1.100</span> broadcast <span class="number">10.1</span>.<span class="number">1.255</span> netmask <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">[<span class="type">admin</span>@<span class="type">master</span> ~]<span class="variable">$</span> sudo /sbin/arping <span class="literal">-fqc</span> <span class="number">5</span> <span class="literal">-w</span> <span class="number">5</span> <span class="literal">-I</span> ens33 <span class="literal">-s</span> <span class="number">10.1</span>.<span class="number">1.100</span> <span class="literal">-U</span> <span class="number">10.1</span>.<span class="number">1.10</span></span><br><span class="line">[<span class="type">admin</span>@<span class="type">master</span> ~]<span class="variable">$</span> ifconfig </span><br><span class="line"></span><br><span class="line">补充：</span><br><span class="line">arping：用来向局域网内的其它主机发送ARP请求的指令，可以用来测试局域网内的某个IP是否已被使用。</span><br><span class="line"></span><br><span class="line"><span class="operator">-f</span>：收到第一个响应包后退出。</span><br><span class="line"><span class="literal">-q</span>：quite模式，不显示输出。 </span><br><span class="line"><span class="literal">-c</span>：发送指定的count个ARP REQUEST包后停止。如果指定了<span class="literal">-w</span>参数，则会等待相同数量的ARP REPLY包，直到超时为止。</span><br><span class="line"><span class="literal">-w</span>：指定一个超时时间，单位为秒，arping在到达指定时间后退出，无论期间发送或接收了多少包。在这种情况下，arping在发送完指定的count（<span class="literal">-c</span>）个包后并不会停止，而是等待到超时或发送的count个包都进行了回应后才会退出。 </span><br><span class="line"><span class="literal">-I</span>：指定设备名，用来发送ARP REQUEST包的网络设备的名称。</span><br><span class="line"><span class="literal">-D</span>：重复地址探测模式，用来检测有没有IP地址冲突，如果没有IP冲突则返回<span class="number">0</span>。 </span><br><span class="line"><span class="literal">-s</span>：设置发送ARP包的IP资源地址</span><br><span class="line"><span class="literal">-U</span>：无理由的（强制的）ARP模式去更新别的主机上的ARP CACHE列表中的本机的信息，不需要响应。</span><br><span class="line"><span class="literal">-h</span>：显示帮助页。 </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-57-39-001-c6cede.png" alt="001"></p><h4 id="㈣-创建mha相关配置文件"><a href="#㈣-创建mha相关配置文件" class="headerlink" title="㈣ 创建mha相关配置文件"></a>㈣ 创建mha相关配置文件</h4><ul><li>创建 mha 相关的工作目录</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">mgr</span> ~]<span class="comment"># mkdir /etc/mha/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">mgr</span> ~]<span class="comment"># mkdir -p /data/mha/masterha/app1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">mgr</span> ~]<span class="comment"># chown -R admin. /data/mha</span></span><br></pre></td></tr></table></figure><ul><li>创建mha局部配置文件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">mgr</span> ~]<span class="comment"># cat /etc/mha/app1.conf</span></span><br><span class="line">[<span class="type">server</span> <span class="type">default</span>]</span><br><span class="line"><span class="comment"># 设置监控用户和密码</span></span><br><span class="line">user=mha</span><br><span class="line">password=<span class="number">123</span></span><br><span class="line"><span class="comment"># 设置复制环境中的复制用户和密码</span></span><br><span class="line">repl_user=slave</span><br><span class="line">repl_password=<span class="number">123</span></span><br><span class="line"><span class="comment"># 设置ssh的登录用户名</span></span><br><span class="line">ssh_user=admin</span><br><span class="line"><span class="comment"># 设置监控主库,发送ping包的时间间隔,默认是3秒,尝试三次没有回应的时候自动进行failover</span></span><br><span class="line">ping_interval=<span class="number">3</span></span><br><span class="line"><span class="comment"># 设置mgr的工作目录</span></span><br><span class="line">manager_workdir=/<span class="keyword">data</span>/mha/masterha/app1</span><br><span class="line"><span class="comment"># 设置mysql master保存binlog的目录,以便MHA可以找到master的二进制日志</span></span><br><span class="line">master_binlog_dir=/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line"><span class="comment"># 设置master的pid文件</span></span><br><span class="line">master_pid_file=/usr/local/mysql/<span class="keyword">data</span>/master.heima.cc.pid</span><br><span class="line"><span class="comment"># 设置mysql master在发生切换时保存binlog的目录（在mysql master上创建这个目录）</span></span><br><span class="line">remote_workdir=/<span class="keyword">data</span>/mysql/mha</span><br><span class="line"><span class="comment"># 设置mgr日志文件</span></span><br><span class="line">manager_log=/<span class="keyword">data</span>/mha/masterha/app1/app1<span class="literal">-3307</span>.log</span><br><span class="line"><span class="comment"># MHA到master的监控之间出现问题,MHA Manager将会尝试从slave1和slave2登录到master上</span></span><br><span class="line">secondary_check_script=/usr/bin/masterha_secondary_check <span class="literal">-s</span> <span class="number">10.1</span>.<span class="number">1.20</span> <span class="literal">-s</span> <span class="number">10.1</span>.<span class="number">1.30</span> <span class="literal">--user</span>=admin <span class="literal">--port</span>=<span class="number">22</span> <span class="literal">--master_host</span>=<span class="number">10.1</span>.<span class="number">1.10</span> <span class="literal">--master_port</span>=<span class="number">3307</span></span><br><span class="line"><span class="comment"># 设置自动failover时候的切换脚本</span></span><br><span class="line">master_ip_failover_script=<span class="string">&quot;/etc/mha/master_ip_failover.sh 10.1.1.100 1&quot;</span></span><br><span class="line"><span class="comment"># 设置手动切换时候的切换脚本</span></span><br><span class="line"><span class="comment">#master_ip_online_change_script=&quot;/etc/mha/master_ip_online_change.sh 10.1.1.100 1&quot;</span></span><br><span class="line"><span class="comment"># 设置故障发生后关闭故障主机脚本</span></span><br><span class="line"><span class="comment"># shutdown_script=&quot;/etc/mha/power_manager&quot;</span></span><br><span class="line">[<span class="type">server1</span>]</span><br><span class="line">hostname=<span class="number">10.1</span>.<span class="number">1.10</span></span><br><span class="line">port= <span class="number">3307</span></span><br><span class="line">candidate_master=<span class="number">1</span></span><br><span class="line">[<span class="type">server2</span>]</span><br><span class="line">hostname=<span class="number">10.1</span>.<span class="number">1.20</span></span><br><span class="line">port= <span class="number">3307</span></span><br><span class="line">candidate_master=<span class="number">1</span></span><br><span class="line">[<span class="type">server3</span>]</span><br><span class="line">hostname=<span class="number">10.1</span>.<span class="number">1.30</span></span><br><span class="line">port= <span class="number">3307</span></span><br><span class="line">candidate_master=<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="㈤-上传相应脚本"><a href="#㈤-上传相应脚本" class="headerlink" title="㈤ 上传相应脚本"></a>㈤ 上传相应脚本</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">mgr</span> ~]<span class="comment"># ls /etc/mha/</span></span><br><span class="line">app1.conf  master_ip_failover.sh</span><br><span class="line">注意：脚本内容中要修改网卡名字和连接用户为admin</span><br><span class="line">my <span class="variable">$vip</span>  = shift;</span><br><span class="line">my <span class="variable">$interface</span> = <span class="string">&#x27;ens33&#x27;</span>;网卡名</span><br><span class="line">my <span class="variable">$key</span> = shift;</span><br><span class="line">...</span><br><span class="line">sub stop_vip() &#123;</span><br><span class="line">    my <span class="variable">$ssh_user</span> = <span class="string">&quot;admin&quot;</span>;用户名</span><br><span class="line">    print <span class="string">&quot;=======<span class="variable">$ssh_stop_vip</span>==================\n&quot;</span>;</span><br><span class="line">    `ssh <span class="variable">$ssh_user</span>\<span class="selector-tag">@</span><span class="variable">$orig_master_host</span> \<span class="string">&quot; <span class="variable">$ssh_stop_vip</span> \&quot;</span>`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">mgr</span> ~]<span class="comment"># chmod +x /etc/mha/master_ip_*</span></span><br></pre></td></tr></table></figure><h3 id="6、检查ssh互信和集群状态"><a href="#6、检查ssh互信和集群状态" class="headerlink" title="6、检查ssh互信和集群状态"></a>6、检查ssh互信和集群状态</h3><ul><li>检查ssh互信</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> ~]<span class="variable">$</span> masterha_check_ssh <span class="literal">--conf</span>=/etc/mha/app1.conf</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">23</span>:<span class="number">59</span> <span class="number">2020</span> - [<span class="type">warning</span>] Global configuration file /etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">23</span>:<span class="number">59</span> <span class="number">2020</span> - [<span class="type">info</span>] Reading application default configuration from /etc/mha/app1.conf..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">23</span>:<span class="number">59</span> <span class="number">2020</span> - [<span class="type">info</span>] Reading server configuration from /etc/mha/app1.conf..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">23</span>:<span class="number">59</span> <span class="number">2020</span> - [<span class="type">info</span>] Starting SSH connection tests..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">24</span>:<span class="number">00</span> <span class="number">2020</span> - [<span class="type">debug</span>]</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">23</span>:<span class="number">59</span> <span class="number">2020</span> - [<span class="type">debug</span>]  Connecting via SSH from admin@<span class="number">10.1</span>.<span class="number">1.10</span>(<span class="number">10.1</span>.<span class="number">1.10</span>:<span class="number">22</span>) to admin@<span class="number">10.1</span>.<span class="number">1.20</span>(<span class="number">10.1</span>.<span class="number">1.20</span>:<span class="number">22</span>)..</span><br><span class="line">Warning: Permanently added <span class="string">&#x27;10.1.1.20&#x27;</span> (ECDSA) to the list of known hosts.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">23</span>:<span class="number">59</span> <span class="number">2020</span> - [<span class="type">debug</span>]   ok.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">23</span>:<span class="number">59</span> <span class="number">2020</span> - [<span class="type">debug</span>]  Connecting via SSH from admin@<span class="number">10.1</span>.<span class="number">1.10</span>(<span class="number">10.1</span>.<span class="number">1.10</span>:<span class="number">22</span>) to admin@<span class="number">10.1</span>.<span class="number">1.30</span>(<span class="number">10.1</span>.<span class="number">1.30</span>:<span class="number">22</span>)..</span><br><span class="line">Warning: Permanently added <span class="string">&#x27;10.1.1.30&#x27;</span> (ECDSA) to the list of known hosts.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">23</span>:<span class="number">59</span> <span class="number">2020</span> - [<span class="type">debug</span>]   ok.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">24</span>:<span class="number">00</span> <span class="number">2020</span> - [<span class="type">debug</span>]</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">23</span>:<span class="number">59</span> <span class="number">2020</span> - [<span class="type">debug</span>]  Connecting via SSH from admin@<span class="number">10.1</span>.<span class="number">1.20</span>(<span class="number">10.1</span>.<span class="number">1.20</span>:<span class="number">22</span>) to admin@<span class="number">10.1</span>.<span class="number">1.10</span>(<span class="number">10.1</span>.<span class="number">1.10</span>:<span class="number">22</span>)..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">24</span>:<span class="number">00</span> <span class="number">2020</span> - [<span class="type">debug</span>]   ok.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">24</span>:<span class="number">00</span> <span class="number">2020</span> - [<span class="type">debug</span>]  Connecting via SSH from admin@<span class="number">10.1</span>.<span class="number">1.20</span>(<span class="number">10.1</span>.<span class="number">1.20</span>:<span class="number">22</span>) to admin@<span class="number">10.1</span>.<span class="number">1.30</span>(<span class="number">10.1</span>.<span class="number">1.30</span>:<span class="number">22</span>)..</span><br><span class="line">Warning: Permanently added <span class="string">&#x27;10.1.1.30&#x27;</span> (ECDSA) to the list of known hosts.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">24</span>:<span class="number">00</span> <span class="number">2020</span> - [<span class="type">debug</span>]   ok.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">24</span>:<span class="number">01</span> <span class="number">2020</span> - [<span class="type">debug</span>]</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">24</span>:<span class="number">00</span> <span class="number">2020</span> - [<span class="type">debug</span>]  Connecting via SSH from admin@<span class="number">10.1</span>.<span class="number">1.30</span>(<span class="number">10.1</span>.<span class="number">1.30</span>:<span class="number">22</span>) to admin@<span class="number">10.1</span>.<span class="number">1.10</span>(<span class="number">10.1</span>.<span class="number">1.10</span>:<span class="number">22</span>)..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">24</span>:<span class="number">00</span> <span class="number">2020</span> - [<span class="type">debug</span>]   ok.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">24</span>:<span class="number">00</span> <span class="number">2020</span> - [<span class="type">debug</span>]  Connecting via SSH from admin@<span class="number">10.1</span>.<span class="number">1.30</span>(<span class="number">10.1</span>.<span class="number">1.30</span>:<span class="number">22</span>) to admin@<span class="number">10.1</span>.<span class="number">1.20</span>(<span class="number">10.1</span>.<span class="number">1.20</span>:<span class="number">22</span>)..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">24</span>:<span class="number">00</span> <span class="number">2020</span> - [<span class="type">debug</span>]   ok.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">24</span>:<span class="number">01</span> <span class="number">2020</span> - [<span class="type">info</span>] All SSH connection tests passed successfully.</span><br><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> ~]<span class="variable">$</span></span><br><span class="line">  </span><br><span class="line">以上信息说明ok</span><br></pre></td></tr></table></figure><ul><li>检查集群状态</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> ~]<span class="variable">$</span> masterha_check_repl <span class="literal">--conf</span>=/etc/mha/app1.conf</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">44</span> <span class="number">2020</span> - [<span class="type">warning</span>] Global configuration file /etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">44</span> <span class="number">2020</span> - [<span class="type">info</span>] Reading application default configuration from /etc/mha/app1.conf..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">44</span> <span class="number">2020</span> - [<span class="type">info</span>] Reading server configuration from /etc/mha/app1.conf..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">44</span> <span class="number">2020</span> - [<span class="type">info</span>] MHA::MasterMonitor version <span class="number">0.57</span>.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] GTID failover mode = <span class="number">1</span></span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] Dead Servers:</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] Alive Servers:</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]   <span class="number">10.1</span>.<span class="number">1.10</span>(<span class="number">10.1</span>.<span class="number">1.10</span>:<span class="number">3307</span>)</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]   <span class="number">10.1</span>.<span class="number">1.20</span>(<span class="number">10.1</span>.<span class="number">1.20</span>:<span class="number">3307</span>)</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]   <span class="number">10.1</span>.<span class="number">1.30</span>(<span class="number">10.1</span>.<span class="number">1.30</span>:<span class="number">3307</span>)</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] Alive Slaves:</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]   <span class="number">10.1</span>.<span class="number">1.20</span>(<span class="number">10.1</span>.<span class="number">1.20</span>:<span class="number">3307</span>)  Version=<span class="number">5.7</span>.<span class="number">25</span><span class="literal">-log</span> (oldest major version between slaves) log<span class="literal">-bin</span>:enabled</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]     GTID ON</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]     Replicating from <span class="number">10.1</span>.<span class="number">1.10</span>(<span class="number">10.1</span>.<span class="number">1.10</span>:<span class="number">3307</span>)</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]     Primary candidate <span class="keyword">for</span> the new Master (candidate_master is <span class="built_in">set</span>)</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]   <span class="number">10.1</span>.<span class="number">1.30</span>(<span class="number">10.1</span>.<span class="number">1.30</span>:<span class="number">3307</span>)  Version=<span class="number">5.7</span>.<span class="number">25</span><span class="literal">-log</span> (oldest major version between slaves) log<span class="literal">-bin</span>:enabled</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]     GTID ON</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]     Replicating from <span class="number">10.1</span>.<span class="number">1.10</span>(<span class="number">10.1</span>.<span class="number">1.10</span>:<span class="number">3307</span>)</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]     Primary candidate <span class="keyword">for</span> the new Master (candidate_master is <span class="built_in">set</span>)</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] Current Alive Master: <span class="number">10.1</span>.<span class="number">1.10</span>(<span class="number">10.1</span>.<span class="number">1.10</span>:<span class="number">3307</span>)</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] Checking slave configurations..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] Checking replication filtering settings..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]  binlog_do_db= , binlog_ignore_db=</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]  Replication filtering check ok.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - <span class="function">[<span class="type">info</span>] <span class="title">GTID</span></span> (with auto<span class="literal">-pos</span>) is supported. Skipping all SSH and Node package checking.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] Checking SSH publickey authentication settings on the current master..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] HealthCheck: SSH to <span class="number">10.1</span>.<span class="number">1.10</span> is reachable.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.10</span>(<span class="number">10.1</span>.<span class="number">1.10</span>:<span class="number">3307</span>) (current master)</span><br><span class="line"> +<span class="literal">--10</span>.<span class="number">1.1</span>.<span class="number">20</span>(<span class="number">10.1</span>.<span class="number">1.20</span>:<span class="number">3307</span>)</span><br><span class="line"> +<span class="literal">--10</span>.<span class="number">1.1</span>.<span class="number">30</span>(<span class="number">10.1</span>.<span class="number">1.30</span>:<span class="number">3307</span>)</span><br><span class="line"></span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] Checking replication health on <span class="number">10.1</span>.<span class="number">1.20</span>..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]  ok.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] Checking replication health on <span class="number">10.1</span>.<span class="number">1.30</span>..</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]  ok.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] Checking master_ip_failover_script status:</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]   /etc/mha/master_ip_failover.sh <span class="number">10.1</span>.<span class="number">1.100</span> <span class="number">1</span> <span class="literal">--command</span>=status <span class="literal">--ssh_user</span>=admin <span class="literal">--orig_master_host</span>=<span class="number">10.1</span>.<span class="number">1.10</span> <span class="literal">--orig_master_ip</span>=<span class="number">10.1</span>.<span class="number">1.10</span> <span class="literal">--orig_master_port</span>=<span class="number">3307</span></span><br><span class="line">Checking the Status of the script.. OK</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>]  OK.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">warning</span>] shutdown_script is not defined.</span><br><span class="line">Sat Apr <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">45</span> <span class="number">2020</span> - [<span class="type">info</span>] Got <span class="keyword">exit</span> code <span class="number">0</span> (Not master dead).</span><br><span class="line"></span><br><span class="line">MySQL Replication Health is OK.</span><br><span class="line"></span><br><span class="line">以上信息说明ok</span><br></pre></td></tr></table></figure><h3 id="7、检查MHA-Mgr状态"><a href="#7、检查MHA-Mgr状态" class="headerlink" title="7、检查MHA-Mgr状态"></a>7、检查MHA-Mgr状态</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> ~]<span class="variable">$</span> masterha_check_status <span class="literal">--conf</span>=/etc/mha/app1.conf</span><br><span class="line">app1 is stopped(<span class="number">2</span>:NOT_RUNNING).</span><br><span class="line">开启MHA Manager监控：</span><br><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> ~]<span class="variable">$</span> nohup masterha_manager <span class="literal">--conf</span>=/etc/mha/app1.conf <span class="literal">--remove_dead_master_conf</span> <span class="literal">--ignore_last_failover</span> &amp;</span><br><span class="line">再次查看监控状态：</span><br><span class="line">[<span class="type">admin</span>@<span class="type">mgr</span> ~]<span class="variable">$</span> masterha_check_status <span class="literal">--conf</span>=/etc/mha/app1.conf</span><br><span class="line">app1 (pid:<span class="number">8913</span>) is running(<span class="number">0</span>:PING_OK), master:<span class="number">10.1</span>.<span class="number">1.10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1</span>. 如果正常，会显示”PING_OK ”，否则会显示”NOT_RUNNING ”，说明 MHA监控没有开启</span><br><span class="line"><span class="number">2</span>. 使用admin用户启动监控，否则会报权限拒绝</span><br><span class="line"><span class="number">3</span>. 手动停止监控命令:masterha_stop <span class="literal">--conf</span>=/etc/mha/app1.conf</span><br></pre></td></tr></table></figure><h2 id="二、自动Failover测试"><a href="#二、自动Failover测试" class="headerlink" title="二、自动Failover测试"></a>二、自动Failover测试</h2><h3 id="1、安装测试工具"><a href="#1、安装测试工具" class="headerlink" title="1、安装测试工具"></a>1、安装测试工具</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># yum -y install sysbench</span></span><br></pre></td></tr></table></figure><h3 id="2、-创建测试数据"><a href="#2、-创建测试数据" class="headerlink" title="2、 创建测试数据"></a>2、 创建测试数据</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">master服务器上创建测试库test</span><br><span class="line">mysql&gt; create database test charset utf8mb4;</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.17</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all on *.* to <span class="string">&#x27;mha&#x27;</span><span class="string">@&#x27;localhost&#x27; identified by &#x27;123&#x27;; </span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.14 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; flush privileges;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.11 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; exit</span></span><br><span class="line"><span class="string">Bye</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@master ~]# sysbench /usr/share/sysbench/oltp_read_only.lua \</span></span><br><span class="line"><span class="string"> --mysql-host=10.1.1.10  --mysql-port=3307  --mysql-user=mha \</span></span><br><span class="line"><span class="string"> --mysql-password=123  --mysql-socket=/usr/local/mysql/mysql.sock \</span></span><br><span class="line"><span class="string"> --mysql-db=test  --db-driver=mysql  --tables=1 \</span></span><br><span class="line"><span class="string"> --table-size=100000 --report-interval=10 --threads=128 --time=120 prepare</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">mysql&gt; select count(*) from sbtest1;</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">| count(*) |</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">|   100000 |</span></span><br><span class="line"><span class="string">+----------+</span></span><br><span class="line"><span class="string">1 row in set (0.01 sec)</span></span><br></pre></td></tr></table></figure><h3 id="3、模拟故障"><a href="#3、模拟故障" class="headerlink" title="3、模拟故障"></a>3、模拟故障</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># service mysql stop</span></span><br><span class="line">Shutting down MySQL............ [ <span class="type">OK</span> ]</span><br></pre></td></tr></table></figure><h3 id="4、查看切换过程"><a href="#4、查看切换过程" class="headerlink" title="4、查看切换过程"></a>4、查看切换过程</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">mgr</span> ~]<span class="comment"># tail -f /data/mha/masterha/app1/app1-3307.log</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-57-33-%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E6%88%90%E5%8A%9F-fa7766.png" alt="自动切换成功"></p><h2 id="三、经验值分享"><a href="#三、经验值分享" class="headerlink" title="三、经验值分享"></a>三、经验值分享</h2><h3 id="1、管理节点配置文件错误"><a href="#1、管理节点配置文件错误" class="headerlink" title="1、管理节点配置文件错误"></a>1、管理节点配置文件错误</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">mgr</span> ~]<span class="comment"># cat /etc/mha/app1.conf</span></span><br><span class="line">[<span class="type">server</span> <span class="type">default</span>]</span><br><span class="line"><span class="comment"># 设置监控用户和密码,该用户是master上创建的数据库管理账号，拥有所有权限</span></span><br><span class="line">user=mha</span><br><span class="line">password=<span class="number">123</span></span><br><span class="line"><span class="comment"># 设置复制环境中的复制用户和密码，注意需要有以下权限：</span></span><br><span class="line"><span class="comment">#REPLICATION SLAVE和REPLICATION CLIENT</span></span><br><span class="line">repl_user=slave</span><br><span class="line">repl_password=<span class="number">123</span></span><br><span class="line"><span class="comment"># 设置ssh的登录用户名</span></span><br><span class="line">ssh_user=admin</span><br><span class="line">....</span><br><span class="line">[<span class="type">server1</span>]</span><br><span class="line">hostname=<span class="number">10.1</span>.<span class="number">1.10</span></span><br><span class="line">port= <span class="number">3307</span></span><br><span class="line">candidate_master=<span class="number">1</span></span><br><span class="line">[<span class="type">server2</span>]</span><br><span class="line">hostname=<span class="number">10.1</span>.<span class="number">1.20</span></span><br><span class="line">port= <span class="number">3306</span></span><br><span class="line">candidate_master=<span class="number">1</span></span><br><span class="line">[<span class="type">server3</span>]</span><br><span class="line">hostname=<span class="number">10.1</span>.<span class="number">1.30</span></span><br><span class="line">port= <span class="number">3306</span></span><br><span class="line">candidate_master=<span class="number">1</span></span><br><span class="line">注意：一定要配置正确的IP和端口号</span><br></pre></td></tr></table></figure><h3 id="2、配置MHA时数据只读设置"><a href="#2、配置MHA时数据只读设置" class="headerlink" title="2、配置MHA时数据只读设置"></a>2、配置MHA时数据只读设置</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-57-31-%E9%94%99%E8%AF%AF1-a253da.png" alt="错误1"></p><p>解决办法：设置从服务器为只读</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> <span class="selector-tag">@</span>@global.read_only=<span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;read_only&#x27;</span>;</span><br><span class="line">+<span class="literal">---------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+<span class="literal">---------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| read_only     | ON    |</span><br><span class="line">+<span class="literal">---------------</span>+<span class="literal">-------</span>+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、复制用户权限密码错误"><a href="#3、复制用户权限密码错误" class="headerlink" title="3、复制用户权限密码错误"></a>3、复制用户权限密码错误</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-57-29-%E9%94%99%E8%AF%AF2-1f8ae6.png" alt="错误2"></p><p>原因：</p><ol><li>复制用户slave没有相关权限，REPLICATION SLAVE和&#x3D;&#x3D;REPLICATION CLIENT&#x3D;&#x3D;</li><li>从服务器没有创建复制用户</li></ol><h3 id="4、其他错误"><a href="#4、其他错误" class="headerlink" title="4、其他错误"></a>4、其他错误</h3><p>MHA集群至少需要2个slave，所以如果只有一台slave的话，检查也是通不过的！</p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> MYSQL </tag>
            
            <tag> mysqls </tag>
            
            <tag> 数据库高可用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据库的备份与恢复</title>
      <link href="/2024/06/25/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
      <url>/2024/06/25/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="任务背景"><a href="#任务背景" class="headerlink" title="任务背景"></a>任务背景</h1><h2 id="一、真实案例"><a href="#一、真实案例" class="headerlink" title="一、真实案例"></a>一、真实案例</h2><p>​某天，公司领导安排刚入职不久的小冯同学将生产环境中的数据(MySQL数据库)全部导入到测试环境给测试人员使用。当小冯去拿备份数据时发现，备份数据是1个礼拜之前的。原因是之前运维同事通过脚本每天对数据库进行备份，根据结果判断应该是脚本的问题导致备份失败。于是乎，领导让小冯重新制定备份策略对数据库进行备份，并且把数据导入到测试环境。</p><h2 id="二、案例背后的核心技术"><a href="#二、案例背后的核心技术" class="headerlink" title="二、案例背后的核心技术"></a>二、案例背后的核心技术</h2><p>​1）掌握MySQL的备份工具使用及各自特点</p><p>​2）熟悉SHELL脚本</p><p>​3）熟悉MySQL数据的导入导出</p><h2 id="三、今日任务场景"><a href="#三、今日任务场景" class="headerlink" title="三、今日任务场景"></a>三、今日任务场景</h2><p>“手里有粮，心里不慌，数据有备，喜气洋洋”。对于重要的数据做好备份，是我们每个运维人员和DBA的重要职责。备份只&#x3D;&#x3D;是一种手段&#x3D;&#x3D;，我们最终目的是当数据出现问题时能够及时的通过备份&#x3D;&#x3D;进行恢复&#x3D;&#x3D;。所以，现在需要你对我们现有的MySQL数据库进行&#x3D;&#x3D;备份策略的制定&#x3D;&#x3D;以及实施。</p><h1 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h1><ol><li>选择&#x3D;&#x3D;合适的工具&#x3D;&#x3D;和&#x3D;&#x3D;方法&#x3D;&#x3D;对mysql数据库进行备份</li><li>编写脚本实现自动化备份</li></ol><h1 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h1><ul><li><input disabled="" type="checkbox"> 了解MySQL常见的&#x3D;&#x3D;备份方式和类型&#x3D;&#x3D;</li><li><input disabled="" type="checkbox"> 能够使用&#x3D;&#x3D;mysqldump工具&#x3D;&#x3D;进行数据库的备份。如全库备份，库级别备份，表级别备份</li><li><input disabled="" type="checkbox"> 能够使用mysqldump工具+binlog日志实现增量备份</li><li><input disabled="" type="checkbox"> 理解&#x3D;&#x3D;xtrabackup工具&#x3D;&#x3D;实现增量备份的&#x3D;&#x3D;原理&#x3D;&#x3D;和方法</li><li><input disabled="" type="checkbox"> 能够使用xtrabackup工具对数据库进行全备和增备</li></ul><h1 id="理论储备"><a href="#理论储备" class="headerlink" title="理论储备"></a>理论储备</h1><h2 id="一、MySQL备份概述"><a href="#一、MySQL备份概述" class="headerlink" title="一、MySQL备份概述"></a>一、MySQL备份概述</h2><h3 id="1、关于备份你要知道的"><a href="#1、关于备份你要知道的" class="headerlink" title="1、关于备份你要知道的"></a>1、关于备份你要知道的</h3><p><strong>思考：</strong>备份和冗余有什么区别？</p><p>备份： 能够防止由于<strong>机械故障</strong>以及<strong>人为误操作</strong>带来的数据丢失，例如将数据库文件保存在了其它地方。</p><p>冗余： 数据有多份冗余，但不等备份，<strong>只能防止机械故障</strong>带来的数据丢失，例如主备模式、数据库集群。 </p><h3 id="2、备份什么"><a href="#2、备份什么" class="headerlink" title="2、备份什么"></a>2、备份什么</h3><p>数据库：&#x3D;&#x3D;一堆物理文件的集合&#x3D;&#x3D;；日志文件(二进制日志)+数据文件+配置文件</p><p>DBFILEBINLOGmy.cnf</p><h3 id="3、备份过程须考虑的因素"><a href="#3、备份过程须考虑的因素" class="headerlink" title="3、备份过程须考虑的因素"></a>3、备份过程须考虑的因素</h3><ul><li>必须制定&#x3D;&#x3D;详细的备份计划(策略)&#x3D;&#x3D;（备份频率、时间点、周期）</li><li>备份数据应该放在&#x3D;&#x3D;非数据库本地&#x3D;&#x3D;，并建议&#x3D;&#x3D;有多份副本&#x3D;&#x3D;</li><li>必须做好&#x3D;&#x3D;<strong>数据恢复的演练</strong>&#x3D;&#x3D;（每隔一段时间，对备份的数据在测试环境中进行模拟恢复，保证当出现数据灾难的时候能够及时恢复数据。）</li><li>根据数据应用的场合、特点&#x3D;&#x3D;选择正确的备份工具&#x3D;&#x3D;。</li><li>数据的一致性</li><li>服务的可用性</li></ul><h3 id="4、备份类型"><a href="#4、备份类型" class="headerlink" title="4、备份类型"></a>4、备份类型</h3><h4 id="㈠-逻辑备份"><a href="#㈠-逻辑备份" class="headerlink" title="㈠ 逻辑备份"></a>㈠ 逻辑备份</h4><ul><li>备份的是<strong>建表、建库、插入等操作所执行SQL语句</strong>（DDL DML DCL）。</li><li>适用于&#x3D;&#x3D;中小型数据库，效率相对较低&#x3D;&#x3D;。 一般在数据库<strong>正常提供服务</strong>的前提下进行，如：<strong>mysqldump</strong>、mydumper、into outfile（表的导出导入）等。</li></ul><h4 id="㈡-物理备份"><a href="#㈡-物理备份" class="headerlink" title="㈡ 物理备份"></a>㈡ 物理备份</h4><ul><li>直接复制&#x3D;&#x3D;数据库文件&#x3D;&#x3D;</li><li>适用于&#x3D;&#x3D;大型数据库&#x3D;&#x3D;环境，不受存储引擎的限制，但不能恢复到不同的MySQL版本。 </li><li>一般是在&#x3D;&#x3D;数据库彻底关闭或者不能完成正常提供服务&#x3D;&#x3D;的前提下进行的备份）；如：tar、cp、&#x3D;&#x3D;xtrabackup&#x3D;&#x3D;（数据库可以&#x3D;&#x3D;正常提供服务&#x3D;&#x3D;）、lvm snapshot、rsync等</li></ul><h4 id="㈢-在线热备（冗余）"><a href="#㈢-在线热备（冗余）" class="headerlink" title="㈢ 在线热备（冗余）"></a>㈢ 在线热备（冗余）</h4><ul><li>MySQL的replication架构，如M-S|M-S-S|M-M-S等</li><li>实时在线备份</li></ul><h3 id="5、备份工具"><a href="#5、备份工具" class="headerlink" title="5、备份工具"></a>5、备份工具</h3><h4 id="㈠-社区版安装包中的备份工具"><a href="#㈠-社区版安装包中的备份工具" class="headerlink" title="㈠ 社区版安装包中的备份工具"></a>㈠ 社区版安装包中的备份工具</h4><h5 id="①-mysqldump-逻辑备份，只能-全量备份-）"><a href="#①-mysqldump-逻辑备份，只能-全量备份-）" class="headerlink" title="① mysqldump(逻辑备份，只能&#x3D;&#x3D;全量备份&#x3D;&#x3D;）"></a>① mysqldump(逻辑备份，只能&#x3D;&#x3D;全量备份&#x3D;&#x3D;）</h5><p>​1）企业版和社区版都包含</p><p>​2）本质上使用&#x3D;&#x3D;SQL语句描述数据库&#x3D;&#x3D;及数据并导出</p><p>​3）在MYISAM引擎上锁表，Innodb引擎上锁行</p><p>​4）数据量很大时不推荐使用</p><h5 id="②-mysqlhotcopy-物理备份工具）"><a href="#②-mysqlhotcopy-物理备份工具）" class="headerlink" title="② mysqlhotcopy(物理备份工具）"></a>② mysqlhotcopy(物理备份工具）</h5><p>​1）企业版和社区版都包含</p><p>​2）perl写的一个脚本，本质上是使用锁表语句后再拷贝数据</p><p>​3）&#x3D;&#x3D;只&#x3D;&#x3D;支持MYISAM数据引擎</p><h4 id="㈡-企业版安装包中的备份工具"><a href="#㈡-企业版安装包中的备份工具" class="headerlink" title="㈡ 企业版安装包中的备份工具"></a>㈡ 企业版安装包中的备份工具</h4><p><strong>mysqlbackup</strong></p><p>​1）在线备份</p><p>​2）增量备份</p><p>​3）部分备份</p><p>​4）在某个特定时间的一致性状态的备份</p><h4 id="㈢-第三方备份工具"><a href="#㈢-第三方备份工具" class="headerlink" title="㈢ 第三方备份工具"></a>㈢ 第三方备份工具</h4><h5 id="①-XtraBackup和innobackupex-物理备份）"><a href="#①-XtraBackup和innobackupex-物理备份）" class="headerlink" title="① XtraBackup和innobackupex(物理备份）"></a>① XtraBackup和innobackupex(物理备份）</h5><p>​1）Xtrabackup是一个对<strong>InnoDB</strong>做数据备份的工具，支持&#x3D;&#x3D;在线热备份&#x3D;&#x3D;（备份时不影响数据读写），是商业备份工具<strong>InnoDB Hotbackup</strong>的一个很好的替代品。</p><p>​2）Xtrabackup有两个主要的工具：xtrabackup、innobackupex</p><p>​a、xtrabackup只能备份&#x3D;&#x3D;InnoDB和XtraDB&#x3D;&#x3D;两种数据表，不能备份myisam类型的表。</p><p>​b、innobackupex是将Xtrabackup进行封装的perl脚本，所以能同时备份处理innodb和myisam的存储引擎，但在处理myisam时需要加一个读锁。</p><h5 id="②-mydumper-逻辑备份，备份SQL语句）"><a href="#②-mydumper-逻辑备份，备份SQL语句）" class="headerlink" title="② mydumper(逻辑备份，备份SQL语句）"></a>② mydumper(逻辑备份，备份SQL语句）</h5><p><strong>多线程备份工具</strong></p><p> <a href="https://launchpad.net/mydumper/mydumper-0.9.1.tar.gz">https://launchpad.net/mydumper/mydumper-0.9.1.tar.gz</a>        2015-11-06（最后更新时间）</p><h3 id="6、备份方法"><a href="#6、备份方法" class="headerlink" title="6、备份方法"></a>6、备份方法</h3><ul><li>完全备份（全备）</li><li>增量备份（增量备份基于全量备份）</li></ul><p> <img src="/./%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD.png" alt="增量备份"></p><h2 id="二、MySQL的逻辑备份"><a href="#二、MySQL的逻辑备份" class="headerlink" title="二、MySQL的逻辑备份"></a>二、MySQL的逻辑备份</h2><h3 id="1、mysqldump基本备份"><a href="#1、mysqldump基本备份" class="headerlink" title="1、mysqldump基本备份"></a>1、mysqldump基本备份</h3><p><strong>本质</strong>：导出的是sql语句文件</p><p><strong>优点</strong>：无论是什么存储引擎，都可以用mysqldump备成sql语句</p><p><strong>缺点</strong>：速度较慢,导入时可能会出现格式不兼容的突发状况.&#x3D;&#x3D;无法直接做增量备份&#x3D;&#x3D;.</p><p><strong>提供三种级别的备份，表级，库级和全库级</strong> </p><h4 id="㈠-基本语法"><a href="#㈠-基本语法" class="headerlink" title="㈠ 基本语法"></a>㈠ 基本语法</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表级别备份</span><br><span class="line">mysqldump [<span class="type">OPTIONS</span>] database [<span class="type">tables</span>]</span><br><span class="line">库级别备份</span><br><span class="line">mysqldump [<span class="type">OPTIONS</span>] <span class="literal">--databases</span> [<span class="type">OPTIONS</span>] DB1 [<span class="type">DB2</span> <span class="type">DB3...</span>]</span><br><span class="line">全库级别备份</span><br><span class="line">mysqldump [<span class="type">OPTIONS</span>] <span class="literal">--all-databases</span> [<span class="type">OPTIONS</span>]</span><br></pre></td></tr></table></figure><h4 id="㈡-常用参数"><a href="#㈡-常用参数" class="headerlink" title="㈡ 常用参数"></a>㈡ 常用参数</h4><table><thead><tr><th>常用参数</th><th>描述说明</th></tr></thead><tbody><tr><td>–flush-logs, -F</td><td>开始备份前刷新日志</td></tr><tr><td>–flush-privileges</td><td>备份包含mysql数据库时刷新授权表</td></tr><tr><td>–lock-all-tables, -x</td><td>MyISAM一致性，服务可用性（针对所有库所有表）</td></tr><tr><td>–lock-tables, -l</td><td>备份前锁表（针对要备份的库）</td></tr><tr><td>–single-transaction</td><td>适用InnoDB引擎，保证一致性，服务可用性</td></tr><tr><td>–master-data&#x3D;2</td><td>表示将二进制日志位置和文件名写入到备份文件并在dump文件中注释掉这一行</td></tr><tr><td>–master-data&#x3D;1</td><td>表示将二进制日志位置和文件名写入到备份文件,在dump文件中不注释这一行</td></tr></tbody></table><p><strong>–master-data参数其他说明：</strong></p><p>1）恢复时会执行，默认是1<br>2）需要RELOAD privilege并必须打开二进制文件<br>3）这个选项会自动打开–lock-all-tables，关闭–lock-tables</p><h4 id="㈢-举例说明"><a href="#㈢-举例说明" class="headerlink" title="㈢ 举例说明"></a>㈢ 举例说明</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">表级备份：</span><br><span class="line"><span class="comment"># mysqldump -p123 db01 emp &gt; /tmp/mysqlbak/emp.sql备份单个表</span></span><br><span class="line"><span class="comment"># mysqldump -p123 db01 emp dept &gt; /tmp/mysqlbak/emp.sql备份多个表</span></span><br><span class="line"></span><br><span class="line">表级恢复：</span><br><span class="line"><span class="comment"># mysql -p db01 &lt;/tmp/mysqlbak/emp.sql</span></span><br><span class="line">或者在mysql数据库内使用source命令来执行外部的sql文件</span><br><span class="line">mysql&gt; source /tmp/mysqlbackup/emp.sql</span><br><span class="line"></span><br><span class="line">库级备份:</span><br><span class="line"><span class="comment"># mysqldump --databases db01 -p &gt; /tmp/mysqlbak/db01.sql备份单个库</span></span><br><span class="line"><span class="comment"># mysqldump --databases db01 db02 -p &gt; /tmp/mysqlbak/db01.sql备份多个库</span></span><br><span class="line"></span><br><span class="line">库级恢复：</span><br><span class="line"><span class="comment"># mysql -p &lt;/tmp/mysqlbak/db01.sql </span></span><br><span class="line">mysql&gt; source /tmp/mysqlbak/db01.sql </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">全库级备份：</span><br><span class="line"><span class="comment"># mysqldump --all-databases --master-data --single-transaction &gt; all.sql</span></span><br></pre></td></tr></table></figure><h4 id="㈣-小结"><a href="#㈣-小结" class="headerlink" title="㈣ 小结"></a>㈣ 小结</h4><ol><li>mysqldump工具备份的是&#x3D;&#x3D;SQL语句&#x3D;&#x3D;，故备份不需要停服务</li><li>使用备份文件&#x3D;&#x3D;恢复&#x3D;&#x3D;时，要保证&#x3D;&#x3D;数据库处于运行状态&#x3D;&#x3D;</li><li>只能实现全库，指定库，表级别的&#x3D;&#x3D;某一时刻的备份&#x3D;&#x3D;，本身&#x3D;&#x3D;不能增量备份&#x3D;&#x3D;</li><li>适用于&#x3D;&#x3D;中小型&#x3D;&#x3D;数据库</li></ol><h3 id="2、mysqldump实现增量备份"><a href="#2、mysqldump实现增量备份" class="headerlink" title="2、mysqldump实现增量备份"></a>2、mysqldump实现增量备份</h3><p><strong>核心思路：</strong>结合binglog实现增量</p><ol><li>&#x3D;&#x3D;备份的目的为了数据出问题进行恢复&#x3D;&#x3D;</li><li>二进制日志文件默认会记录下所有对数据库数据变化的操作(增、删、改)</li><li>二进制文件同时还会记录具体sql执行时的环境、&#x3D;&#x3D;时间以及起始位置和结束位置&#x3D;&#x3D;（pos值）</li><li>通过获取二进制文件里的SQL操作来进行&#x3D;&#x3D;数据的恢复&#x3D;&#x3D;</li></ol><h4 id="㈠-实现思路"><a href="#㈠-实现思路" class="headerlink" title="㈠ 实现思路"></a>㈠ 实现思路</h4><ol><li>先做全量备份（mysqldump）</li><li>对数据库做更改操作</li><li>备份二进制日志文件</li><li>模拟故障进行</li><li>数据恢复</li><li>测试验证</li></ol><h4 id="㈡-实现步骤"><a href="#㈡-实现步骤" class="headerlink" title="㈡ 实现步骤"></a>㈡ 实现步骤</h4><h5 id="①-全库备份"><a href="#①-全库备份" class="headerlink" title="① 全库备份"></a>① 全库备份</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysqldump --single-transaction --flush-logs --master-data=2 --all-databases &gt; /tmp/all.sql -p</span></span><br></pre></td></tr></table></figure><h5 id="②-更改数据库"><a href="#②-更改数据库" class="headerlink" title="② 更改数据库"></a>② 更改数据库</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">select</span> * from db01.t1;</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">---------</span>+<span class="literal">-----------</span>+</span><br><span class="line">| id   | name   | salary  | dept      |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">---------</span>+<span class="literal">-----------</span>+</span><br><span class="line">|    <span class="number">1</span> | harry  | <span class="number">1300.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">2</span> | amy    | <span class="number">2200.00</span> | 人事部    |</span><br><span class="line">|    <span class="number">3</span> | tom    |  <span class="number">600.00</span> | 财务部    |</span><br><span class="line">|    <span class="number">4</span> | jack   | <span class="number">3300.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">5</span> | momo   | <span class="number">1700.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">6</span> | sarsha | <span class="number">1300.00</span> | 人事部    |</span><br><span class="line">|    <span class="number">7</span> | xiaom  | <span class="number">4300.00</span> | 市场部    |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">---------</span>+<span class="literal">-----------</span>+</span><br><span class="line">mysql&gt; <span class="built_in">select</span> * from db02.t1;</span><br><span class="line">+<span class="literal">----</span>+<span class="literal">-------</span>+</span><br><span class="line">| id | name  |</span><br><span class="line">+<span class="literal">----</span>+<span class="literal">-------</span>+</span><br><span class="line">|  <span class="number">1</span> | harry |</span><br><span class="line">|  <span class="number">2</span> | tom   |</span><br><span class="line">+<span class="literal">----</span>+<span class="literal">-------</span>+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">更改：</span><br><span class="line">mysql&gt; delete from db01.t1 <span class="built_in">where</span> id=<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into db01.t1 values(<span class="number">88</span>,<span class="string">&#x27;aaa&#x27;</span>,<span class="number">11111.23</span>,<span class="string">&#x27;安保&#x27;</span>),(<span class="number">99</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="number">22222.22</span>,<span class="string">&#x27;运维&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mysql&gt; update db02.t1 <span class="built_in">set</span> name=<span class="string">&#x27;jack&#x27;</span> <span class="built_in">where</span> id=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">select</span> * from db01.t1;</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">----------</span>+<span class="literal">-----------</span>+</span><br><span class="line">| id   | name   | salary   | dept      |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">----------</span>+<span class="literal">-----------</span>+</span><br><span class="line">|    <span class="number">1</span> | harry  |  <span class="number">1300.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">2</span> | amy    |  <span class="number">2200.00</span> | 人事部    |</span><br><span class="line">|    <span class="number">3</span> | tom    |   <span class="number">600.00</span> | 财务部    |</span><br><span class="line">|    <span class="number">4</span> | jack   |  <span class="number">3300.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">5</span> | momo   |  <span class="number">1700.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">6</span> | sarsha |  <span class="number">1300.00</span> | 人事部    |</span><br><span class="line">|   <span class="number">88</span> | aaa    | <span class="number">11111.23</span> | 安保      |</span><br><span class="line">|   <span class="number">99</span> | bbb    | <span class="number">22222.22</span> | 运维      |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">----------</span>+<span class="literal">-----------</span>+</span><br><span class="line"><span class="number">8</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; <span class="built_in">select</span> * from db02.t1;</span><br><span class="line">+<span class="literal">----</span>+<span class="literal">-------</span>+</span><br><span class="line">| id | name  |</span><br><span class="line">+<span class="literal">----</span>+<span class="literal">-------</span>+</span><br><span class="line">|  <span class="number">1</span> | harry |</span><br><span class="line">|  <span class="number">2</span> | jack  |</span><br><span class="line">+<span class="literal">----</span>+<span class="literal">-------</span>+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="③-备份二进制文件"><a href="#③-备份二进制文件" class="headerlink" title="③ 备份二进制文件"></a>③ 备份二进制文件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>：直接拷贝物理文件</span><br><span class="line">方法<span class="number">2</span>：备份改变过的数据（SQL）</span><br><span class="line"><span class="comment"># mysqlbinlog --start-position=120 binlog.000005 &gt; /opt/mybinlog.sql</span></span><br></pre></td></tr></table></figure><h5 id="④-故障模拟"><a href="#④-故障模拟" class="headerlink" title="④ 故障模拟"></a>④ 故障模拟</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database db01;</span><br><span class="line">Query OK, <span class="number">7</span> rows affected (<span class="number">0.07</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; drop database db02;</span><br><span class="line">Query OK, <span class="number">3</span> rows affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h5 id="⑤-全量恢复"><a href="#⑤-全量恢复" class="headerlink" title="⑤ 全量恢复"></a>⑤ 全量恢复</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 通过刚刚全量备份进行恢复</span><br><span class="line"><span class="comment"># mysql &lt; /tmp/all.sql -p</span></span><br><span class="line"><span class="number">2</span>. 进入数据库查看结果</span><br><span class="line">mysql&gt; <span class="built_in">select</span> * from db01.t1;</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">---------</span>+<span class="literal">-----------</span>+</span><br><span class="line">| id   | name   | salary  | dept      |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">---------</span>+<span class="literal">-----------</span>+</span><br><span class="line">|    <span class="number">1</span> | harry  | <span class="number">1300.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">2</span> | amy    | <span class="number">2200.00</span> | 人事部    |</span><br><span class="line">|    <span class="number">3</span> | tom    |  <span class="number">600.00</span> | 财务部    |</span><br><span class="line">|    <span class="number">4</span> | jack   | <span class="number">3300.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">5</span> | momo   | <span class="number">1700.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">6</span> | sarsha | <span class="number">1300.00</span> | 人事部    |</span><br><span class="line">|    <span class="number">7</span> | xiaom  | <span class="number">4300.00</span> | 市场部    |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">---------</span>+<span class="literal">-----------</span>+</span><br><span class="line"><span class="number">7</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line">mysql&gt; <span class="built_in">select</span> * from db02.t1;</span><br><span class="line">+<span class="literal">----</span>+<span class="literal">-------</span>+</span><br><span class="line">| id | name  |</span><br><span class="line">+<span class="literal">----</span>+<span class="literal">-------</span>+</span><br><span class="line">|  <span class="number">1</span> | harry |</span><br><span class="line">|  <span class="number">2</span> | tom   |</span><br><span class="line">+<span class="literal">----</span>+<span class="literal">-------</span>+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">说明：以上数据不是最新数据</span><br></pre></td></tr></table></figure><h5 id="⑥-二进制日志恢复到最新状态"><a href="#⑥-二进制日志恢复到最新状态" class="headerlink" title="⑥ &#x3D;&#x3D;二进制日志恢复到最新状态&#x3D;&#x3D;"></a>⑥ &#x3D;&#x3D;二进制日志恢复到最新状态&#x3D;&#x3D;</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysqlbinlog --start-position=120 /opt/mybinlog.000002 |mysql -p</span></span><br><span class="line">说明：</span><br><span class="line"><span class="number">1</span>.只有起始位置<span class="literal">--start-position</span>=<span class="number">120</span>说明从<span class="number">120</span>往后所有记录</span><br><span class="line"><span class="number">2</span>.一般SQL语句前面的at xxx代表该语句的position值</span><br><span class="line">mysql&gt; <span class="built_in">select</span> * from db01.t1;</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">----------</span>+<span class="literal">-----------</span>+</span><br><span class="line">| id   | name   | salary   | dept      |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">----------</span>+<span class="literal">-----------</span>+</span><br><span class="line">|    <span class="number">1</span> | harry  |  <span class="number">1300.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">2</span> | amy    |  <span class="number">2200.00</span> | 人事部    |</span><br><span class="line">|    <span class="number">3</span> | tom    |   <span class="number">600.00</span> | 财务部    |</span><br><span class="line">|    <span class="number">4</span> | jack   |  <span class="number">3300.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">5</span> | momo   |  <span class="number">1700.00</span> | 市场部    |</span><br><span class="line">|    <span class="number">6</span> | sarsha |  <span class="number">1300.00</span> | 人事部    |</span><br><span class="line">|   <span class="number">88</span> | aaa    | <span class="number">11111.23</span> | 安保      |</span><br><span class="line">|   <span class="number">99</span> | bbb    | <span class="number">22222.22</span> | 运维      |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">--------</span>+<span class="literal">----------</span>+<span class="literal">-----------</span>+</span><br></pre></td></tr></table></figure><h4 id="㈢-小结"><a href="#㈢-小结" class="headerlink" title="㈢ 小结"></a>㈢ 小结</h4><ol><li>mysqldump工具只能恢复到&#x3D;&#x3D;备份那一时刻&#x3D;&#x3D;</li><li>通过&#x3D;&#x3D;二进制日志&#x3D;&#x3D;来恢复到最新数据</li><li>二进制日志也可以跳过sql恢复</li><li>二进制日志恢复数据的&#x3D;&#x3D;重点就是找对相应的position值或者时间点&#x3D;&#x3D;</li></ol><h3 id="3、逻辑导入导出（-了解-）"><a href="#3、逻辑导入导出（-了解-）" class="headerlink" title="3、逻辑导入导出（&#x3D;&#x3D;了解&#x3D;&#x3D;）"></a>3、逻辑导入导出（&#x3D;&#x3D;了解&#x3D;&#x3D;）</h3><p>无论是什么存储引擎，以下方式本身是一种数据导出的方法，同时可以用来辅助备份，它可以对一个表的其中一列或者某几列做备份。备份的是&#x3D;&#x3D;数据记录。&#x3D;&#x3D;</p><h4 id="㈠-语法"><a href="#㈠-语法" class="headerlink" title="㈠ 语法"></a>㈠ 语法</h4><p>导出数据：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">select</span>  字段  into outfile <span class="string">&#x27;/path/file&#x27;</span> from table_name; </span><br><span class="line"><span class="built_in">select</span> * into outfile <span class="string">&#x27;/tmp/emp.txt&#x27;</span> from db01.emp;</span><br></pre></td></tr></table></figure><p>恢复数据：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>：</span><br><span class="line">load <span class="keyword">data</span> local infile <span class="string">&#x27;/tmp/emp.txt&#x27;</span>  into  table emp; </span><br><span class="line">说明：该方法要求在编译数据库时要加上<span class="literal">--enable-local-infile</span>参数才可以使用</span><br><span class="line">+<span class="literal">---------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+<span class="literal">---------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| local_infile  | ON   |</span><br><span class="line">+<span class="literal">---------------</span>+<span class="literal">-------</span>+</span><br><span class="line">方法<span class="number">2</span>：</span><br><span class="line"><span class="comment"># mysqlimport  dbname /path/file</span></span><br></pre></td></tr></table></figure><h4 id="㈡-举例说明1"><a href="#㈡-举例说明1" class="headerlink" title="㈡ 举例说明1"></a>㈡ 举例说明1</h4><p>把db01库的emp表导出成文本，然后误删掉数据后进行恢复</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">select</span> * into outfile <span class="string">&#x27;/tmp/backup/emp.bak&#x27;</span> from emp;</span><br><span class="line">ERROR <span class="number">1290</span> (HY000): The MySQL server is running with the <span class="literal">--secure-file-priv</span> option so it cannot execute this statement</span><br><span class="line">原因：没有给目录授权</span><br><span class="line">解决：修改配置文件加入以下内容，重启数据库</span><br><span class="line">secure_file_priv=/tmp/backup/</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">select</span> * into outfile <span class="string">&#x27;/tmp/backup/emp.bak&#x27;</span> from emp;</span><br><span class="line">ERROR <span class="number">1</span> (HY000): Can<span class="string">&#x27;t create/write to file &#x27;</span>/tmp/backup/emp.bak<span class="string">&#x27; (Errcode: 13 - Permission denied)</span></span><br><span class="line"><span class="string">原因：mysql用户没有权限在/tmp/backup目录里创建文件</span></span><br><span class="line"><span class="string">解决办法：</span></span><br><span class="line"><span class="string">[root@mysql01 ~]# ll -d /tmp/backup/</span></span><br><span class="line"><span class="string">drwxr-xr-x 2 root root 22 Aug  3 16:35 /tmp/backup/</span></span><br><span class="line"><span class="string">[root@mysql01 ~]# setfacl -m u:mysql:rwx /tmp/backup/</span></span><br></pre></td></tr></table></figure><h4 id="㈢-举例说明2"><a href="#㈢-举例说明2" class="headerlink" title="㈢ 举例说明2"></a>㈢ 举例说明2</h4><p>创建一个表，把你系统里的&#x2F;etc&#x2F;passwd导入到数据库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 创建表password</span><br><span class="line">CREATE TABLE `password` (</span><br><span class="line">  `uname` varchar(<span class="number">50</span>) DEFAULT NULL,</span><br><span class="line">  `pass` char(<span class="number">2</span>) DEFAULT NULL,</span><br><span class="line">  `uid` int(<span class="number">11</span>) DEFAULT NULL,</span><br><span class="line">  `gid` int(<span class="number">11</span>) DEFAULT NULL,</span><br><span class="line">  `comment` varchar(<span class="number">60</span>) DEFAULT NULL,</span><br><span class="line">  `home` varchar(<span class="number">50</span>) DEFAULT NULL,</span><br><span class="line">  `shell` varchar(<span class="number">50</span>) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 创建password.txt文件(文件内容必须是\t分割的多列)并导入到数据库</span><br><span class="line">方法一：使用sed或者awk处理成新文本</span><br><span class="line">方法二：直接用mysqlimport指定分隔符</span><br><span class="line"><span class="comment"># mysqlimport db01 --fields-terminated-by=&#x27;:&#x27; --lines-terminated-by=&#x27;\n&#x27; /tmp/mysqlbak/password -p</span></span><br><span class="line"></span><br><span class="line">\n 代表linux系统回车键的行结束符号</span><br><span class="line">windows默认为\r\n</span><br></pre></td></tr></table></figure><h2 id="三、MySQL的物理备份"><a href="#三、MySQL的物理备份" class="headerlink" title="三、MySQL的物理备份"></a>三、MySQL的物理备份</h2><h3 id="1、xtrabackup备份介绍"><a href="#1、xtrabackup备份介绍" class="headerlink" title="1、xtrabackup备份介绍"></a>1、xtrabackup备份介绍</h3><h4 id="㈠-xtrabackup优缺点"><a href="#㈠-xtrabackup优缺点" class="headerlink" title="㈠ xtrabackup优缺点"></a>㈠ xtrabackup优缺点</h4><p><strong>优点：</strong> </p><ol><li>备份过程&#x3D;&#x3D;快速、可靠(&#x3D;&#x3D;因为是物理备份)；</li><li>支持&#x3D;&#x3D;增量备份&#x3D;&#x3D;，更为灵活</li><li>备份过程<strong>不会打断正在执行的事务</strong>；</li><li>能够基于压缩等功能节约磁盘空间和流量；</li><li>自动实现备份检验；</li><li>&#x3D;&#x3D;还原速度快&#x3D;&#x3D;；</li></ol><p><strong>缺点：</strong></p><ol><li>只能对&#x3D;&#x3D;innodb表增量备份&#x3D;&#x3D;，myisam表增量备份时是全备</li><li>innobackupex备份MyISAM表之前要对全库进行加READ LOCK，阻塞写操作，若备份是在从库上进行的话会影响主从同步，造成延迟。对InnoDB表备份不会阻塞读写。</li></ol><h4 id="㈡-xtrabackup备份原理"><a href="#㈡-xtrabackup备份原理" class="headerlink" title="㈡ &#x3D;&#x3D;xtrabackup备份原理&#x3D;&#x3D;"></a>㈡ &#x3D;&#x3D;xtrabackup备份原理&#x3D;&#x3D;</h4><ol><li>innobackupex首先会&#x3D;&#x3D;启动&#x3D;&#x3D;一个&#x3D;&#x3D;xtrabackup_log&#x3D;&#x3D;后台检测的进程，实时检测mysql的&#x3D;&#x3D;redo log&#x3D;&#x3D;的变化，一旦发现redo有新的日志写入，立刻将日志写入到日志文件&#x3D;&#x3D;xtrabackup_log&#x3D;&#x3D;中。</li><li>&#x3D;&#x3D;物理&#x3D;&#x3D;拷贝i&#x3D;&#x3D;nnodb的数据文件和系统表空间文件idbdata1&#x3D;&#x3D;到对应的以默认时间戳为备份目录的地方</li><li>复制结束后，执行&#x3D;&#x3D;flush table with read lock&#x3D;&#x3D;操作进行全库锁表准备备份非InnoDB文件</li><li>物理复制.frm .myd .myi等非InnoDB引擎文件到备份目录</li><li>查看二进制日志的位置</li><li>解锁表unlock tables</li><li>&#x3D;&#x3D;停止&#x3D;&#x3D;xtrabackup_log进程</li></ol><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-26-47-innobackupex%E5%A4%87%E4%BB%BD%E5%8E%9F%E7%90%86%E5%9B%BE-377aef.png" alt="innobackupex备份原理图"></p><p>​图片来自网络</p><h4 id="㈢-xtrabackup备份恢复原理"><a href="#㈢-xtrabackup备份恢复原理" class="headerlink" title="㈢ &#x3D;&#x3D;xtrabackup备份恢复原理&#x3D;&#x3D;"></a>㈢ &#x3D;&#x3D;xtrabackup备份恢复原理&#x3D;&#x3D;</h4><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-26-46-xtrabackup%E6%81%A2%E5%A4%8D%E5%8E%9F%E7%90%86-0f8244.png" alt="xtrabackup恢复原理"></p><p><strong>具体文字描述如下（了解）：</strong></p><ul><li>在InnoDB内部会维护一个redo日志文件，我们也可以叫做事务日志文件。事务日志会存储每一个InnoDB表数据的记录修改。当InnoDB启动时，InnoDB会检查数据文件和事务日志，并执行两个步骤：它应用（前滚）已经提交的事务日志到数据文件，并将修改过但没有提交的数据进行回滚操作。</li><li>xtrabackup在启动时会记住log sequence number（LSN），并且复制所有的数据文件。复制过程需要一些时间，所以这期间如果数据文件有改动，那么将会使数据库处于一个不同的时间点。这时，xtrabackup会运行一个后台进程，用于监视事务日志，并从事务日志复制最新的修改。xtrabackup必须持续的做这个操作，是因为事务日志是会轮转重复的写入，并且事务日志可以被重用。所以xtrabackup自启动开始，就不停的将事务日志中每个数据文件的修改都记录下来。</li><li>上面就是xtrabackup的备份过程。接下来是准备（prepare）过程。在这个过程中，xtrabackup使用之前复制的事务日志，对各个数据文件执行灾难恢复（就像MySQL刚启动时要做的一样）。当这个过程结束后，数据库就可以做恢复还原了。</li><li>以上的过程在xtrabackup的编译二进制程序中实现。程序innobackupex可以允许我们备份MyISAM表和frm文件从而增加了便捷和功能。Innobackupex会启动xtrabackup，直到xtrabackup复制数据文件后，然后执行FLUSH TABLES WITH READ LOCK来阻止新的写入进来并把MyISAM表数据刷到硬盘上，之后复制MyISAM数据文件，最后释放锁。</li><li>备份MyISAM和InnoDB表最终会处于一致，在准备（prepare）过程结束后，InnoDB表数据已经前滚到整个备份结束的点，而不是回滚到xtrabackup刚开始时的点。这个时间点与执行FLUSH TABLES WITH READ LOCK的时间点相同，所以MyISAM表数据与InnoDB表数据是同步的。类似Oracle的recover和restore，InnoDB的prepare过程可以称为recover（恢复），MyISAM的数据复制过程可以称为restore（还原）。 </li><li>&#x3D;&#x3D;Mysql5.7.3以后开启二进制日志需要加上server-id选项，不然报错&#x3D;&#x3D;</li></ul><h3 id="2、xtrabackup全备及恢复"><a href="#2、xtrabackup全备及恢复" class="headerlink" title="2、xtrabackup全备及恢复"></a>2、xtrabackup全备及恢复</h3><h4 id="㈠-实现思路-1"><a href="#㈠-实现思路-1" class="headerlink" title="㈠ 实现思路"></a>㈠ 实现思路</h4><ol><li>innobackupex工具安装</li><li>innobackupex进行全备，备份集&#x3D;&#x3D;不能直接用于恢复&#x3D;&#x3D;</li><li>&#x3D;&#x3D;预备阶段&#x3D;&#x3D;，备份过程中产生的xtrabackup_log&#x3D;&#x3D;应用到全量备份集&#x3D;&#x3D;</li><li>模拟故障（删除数据）</li><li>进行全库恢复</li><li>测试验证</li></ol><h4 id="㈡-实现步骤-1"><a href="#㈡-实现步骤-1" class="headerlink" title="㈡ 实现步骤"></a>㈡ 实现步骤</h4><h5 id="①-安装工具"><a href="#①-安装工具" class="headerlink" title="① 安装工具"></a>① 安装工具</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># yum -y install libev-4.15-3.el7.x86_64.rpm</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># yum -y install percona-xtrabackup-24-2.4.7-2.el7.x86_64.rpm</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># rpm -ql percona-xtrabackup-24</span></span><br><span class="line">/usr/bin/innobackupex</span><br><span class="line">/usr/bin/xbcloud</span><br><span class="line">/usr/bin/xbcloud_osenv</span><br><span class="line">/usr/bin/xbcrypt</span><br><span class="line">/usr/bin/xbstream</span><br><span class="line">/usr/bin/xtrabackup</span><br><span class="line">/usr/share/doc/percona<span class="literal">-xtrabackup-24-2</span>.<span class="number">4.7</span></span><br><span class="line">/usr/share/doc/percona<span class="literal">-xtrabackup-24-2</span>.<span class="number">4.7</span>/COPYING</span><br><span class="line">/usr/share/<span class="built_in">man</span>/man1/innobackupex.<span class="number">1</span>.gz</span><br><span class="line">/usr/share/<span class="built_in">man</span>/man1/xbcrypt.<span class="number">1</span>.gz</span><br><span class="line">/usr/share/<span class="built_in">man</span>/man1/xbstream.<span class="number">1</span>.gz</span><br><span class="line">/usr/share/<span class="built_in">man</span>/man1/xtrabackup.<span class="number">1</span>.gz</span><br></pre></td></tr></table></figure><h5 id="②-全库备份"><a href="#②-全库备份" class="headerlink" title="② 全库备份"></a>② 全库备份</h5><h6 id="1）创建测试表"><a href="#1）创建测试表" class="headerlink" title="1）创建测试表"></a>1）创建测试表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">create database db02;</span><br><span class="line">use db02</span><br><span class="line">create table t1(id int,name varchar(10)) engine=myisam;</span><br><span class="line">insert into t1 values(1,&#x27;mona&#x27;);</span><br><span class="line">create table t2(id int,name varchar(10)) engine=innodb;</span><br><span class="line">insert into t2 values(2,&#x27;tom&#x27;);</span><br><span class="line">mysql&gt; select * from db02.t1;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | name |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 | mona |</span><br><span class="line">+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from db02.t2;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | name |</span><br><span class="line">+------+------+</span><br><span class="line">|    2 | tom  |</span><br><span class="line">+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h6 id="2）创建备份用户并授权"><a href="#2）创建备份用户并授权" class="headerlink" title="2）创建备份用户并授权"></a>2）创建备份用户并授权</h6><p>说明：管理员root用户拥有所有权限，可以省略</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">创建备份用户admin，并授予相应权限</span><br><span class="line">mysql&gt; grant reload,<span class="keyword">process</span>,lock tables,replication client on *.* to <span class="string">&#x27;admin&#x27;</span><span class="string">@&#x27;localhost&#x27; identified by &#x27;123&#x27;;</span></span><br><span class="line"><span class="string">mysql&gt; flush privileges;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">说明：</span></span><br><span class="line"><span class="string">在数据库中需要以下权限：</span></span><br><span class="line"><span class="string">RELOAD和LOCK TABLES权限:为了执行FLUSH TABLES WITH READ LOCK</span></span><br><span class="line"><span class="string">REPLICATION CLIENT权限：为了获取binary log位置</span></span><br><span class="line"><span class="string">PROCESS权限：显示有关在服务器中执行的线程的信息（即有关会话执行的语句的信息），允许使用SHOW ENGINE</span></span><br></pre></td></tr></table></figure><h6 id="3）全库备份"><a href="#3）全库备份" class="headerlink" title="3）全库备份"></a>3）全库备份</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># innobackupex --user=admin --password=123 /full_xtrabckup</span></span><br><span class="line">说明：备份目录默认会自动创建，也可以手动创建</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># ll /full_xtrabckup/2019-01-23_22-57-28/</span></span><br><span class="line"></span><br><span class="line">了解相关文件：</span><br><span class="line">xtrabackup_checkpoints：</span><br><span class="line">备份类型（如完全或增量）、备份状态（如是否已经为prepared状态）和LSN(日志序列号)范围信息；每个InnoDB页(通常为<span class="number">16</span>k大小)都会包含一个日志序列号，即LSN。</span><br><span class="line">LSN是整个数据库系统的系统版本号，每个页面相关的LSN能够表明此页面最近是如何发生改变的。</span><br><span class="line">xtrabackup_binlog_info：</span><br><span class="line">mysql服务器当前正在使用的二进制日志文件及至备份这一刻为止二进制日志事件的位置。</span><br><span class="line">xtrabackup_info：</span><br><span class="line">xtrabackup工具在备份时记录的使用工具及数据库信息</span><br><span class="line"><span class="built_in">backup-my</span>.cnf：备份命令用到的配置选项信息</span><br><span class="line">xtrabackup_logfile：xtrabackup记录innodb事物日志的信息</span><br></pre></td></tr></table></figure><h5 id="③-应用日志到备份集-预备"><a href="#③-应用日志到备份集-预备" class="headerlink" title="③ 应用日志到备份集(&#x3D;&#x3D;预备&#x3D;&#x3D;)"></a>③ 应用日志到备份集(&#x3D;&#x3D;预备&#x3D;&#x3D;)</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">--apply-log</span>表示应用日志到备份集</span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># innobackupex --user=admin --password=123 --apply-log /full_xtrabckup/2019-01-23_22-57-28/</span></span><br><span class="line">说明：</span><br><span class="line">在实现“准备”的过程中，innobackupex通常还可以使用<span class="literal">--use-memory</span>选项来指定其可以使用的内存的大小，默认通常为<span class="number">100</span>M。如果有足够的内存可用，可以多划分一些内存给prepare的过程，以提高其完成速度。</span><br></pre></td></tr></table></figure><h5 id="④-故障模拟-1"><a href="#④-故障模拟-1" class="headerlink" title="④ 故障模拟"></a>④ 故障模拟</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">删除数据目录里的所有文件</span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># rm -rf /usr/local/mysql/data/*</span></span><br><span class="line">停止mysql服务</span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># ps -ef|grep mysqld</span></span><br></pre></td></tr></table></figure><h5 id="⑤-数据恢复"><a href="#⑤-数据恢复" class="headerlink" title="⑤ 数据恢复"></a>⑤ 数据恢复</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">--copy-back</span> 表示从备份集拷贝文件到数据目录</span><br><span class="line"><span class="comment"># innobackupex --copy-back /full_xtrabckup/2019-01-23_22-57-28/</span></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"><span class="number">1</span>. innobackupex工具是物理拷贝文件，所以在恢复时不需要连接数据库，这样就不需要初始化数据库并启动服务。</span><br><span class="line"><span class="number">2</span>. 数据目录必须是为空的，innobackupex <span class="literal">--copy-back</span>不会覆盖已存在的文件，除非指定<span class="literal">--force-non-empty-directories</span>参数；</span><br><span class="line"><span class="number">3</span>. 还要注意，还原时需要先关闭服务</span><br><span class="line"></span><br><span class="line">如遇以下错误：</span><br><span class="line">innobackupex version <span class="number">2.4</span>.<span class="number">7</span> based on MySQL server <span class="number">5.7</span>.<span class="number">13</span> Linux (x86_64) (revision id: <span class="number">05</span>f1fcf)</span><br><span class="line">Error: datadir must be specified.</span><br><span class="line"></span><br><span class="line">原因：innobackupex工具不知道数据目录在哪里</span><br><span class="line">解决：指定配置文件位置<span class="literal">--defaults-file</span>=/path/my.cnf</span><br></pre></td></tr></table></figure><p>说明：恢复完毕务必要&#x3D;&#x3D;更改数据文件权限&#x3D;&#x3D;！</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># chown -R mysql.mysql /usr/local/mysql/data/</span></span><br><span class="line">启动数据库：</span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># service mysql start         </span></span><br><span class="line">Starting MySQL. SUCCESS! </span><br></pre></td></tr></table></figure><h5 id="⑥-测试验证"><a href="#⑥-测试验证" class="headerlink" title="⑥ 测试验证"></a>⑥ 测试验证</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">select</span> * from db02.t1;</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">------</span>+</span><br><span class="line">| id   | name |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">------</span>+</span><br><span class="line">|    <span class="number">1</span> | mona |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">------</span>+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">select</span> * from db02.t2;</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">------</span>+</span><br><span class="line">| id   | name |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">------</span>+</span><br><span class="line">|    <span class="number">2</span> | tom  |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">------</span>+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="㈢-小结-1"><a href="#㈢-小结-1" class="headerlink" title="㈢ 小结"></a>㈢ 小结</h4><h3 id="3、xtrabackup增量备份及恢复"><a href="#3、xtrabackup增量备份及恢复" class="headerlink" title="3、xtrabackup增量备份及恢复"></a>3、xtrabackup增量备份及恢复</h3><h4 id="㈠-增备恢复原理"><a href="#㈠-增备恢复原理" class="headerlink" title="㈠ 增备恢复原理"></a>㈠ 增备恢复原理</h4><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-26-42-xtrabackup%E5%A2%9E%E5%A4%87%E6%81%A2%E5%A4%8D%E5%8E%9F%E7%90%86-9ca081.png" alt="xtrabackup增备恢复原理"></p><h4 id="㈡-实现思路"><a href="#㈡-实现思路" class="headerlink" title="㈡ 实现思路"></a>㈡ 实现思路</h4><ol><li>全量备份（&#x3D;&#x3D;增量基于全备&#x3D;&#x3D;）</li><li>应用日志到全量备份集中（预备）</li><li>更改数据</li><li>增量备份</li><li>应用&#x3D;&#x3D;增备的备份集到全量备份集中&#x3D;&#x3D;</li><li>模拟故障</li><li>数据恢复</li><li>测试验证</li></ol><h4 id="㈢-实现步骤"><a href="#㈢-实现步骤" class="headerlink" title="㈢ 实现步骤"></a>㈢ 实现步骤</h4><h5 id="①-xtrabackup全量备份"><a href="#①-xtrabackup全量备份" class="headerlink" title="① xtrabackup全量备份"></a>① xtrabackup全量备份</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">清空环境</span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># rm -rf /full_xtrabckup/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># innobackupex --user=admin --password=123 /full_xtrabckup</span></span><br></pre></td></tr></table></figure><h5 id="②-应用日志到全量备份集"><a href="#②-应用日志到全量备份集" class="headerlink" title="② 应用日志到全量备份集"></a>② 应用日志到全量备份集</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">--apply-log</span>表示应用日志</span><br><span class="line"><span class="literal">--redo-only</span>表示只应用已经提交的事务，不回滚未提交的事务</span><br><span class="line">注意：如果已经回滚了未提交事务，那么就无法再应用增量备份。</span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># innobackupex --user=admin --password=123 --apply-log --redo-only /full_xtrabckup/2019-01-23_23-59-58/</span></span><br></pre></td></tr></table></figure><h5 id="③-修改数据"><a href="#③-修改数据" class="headerlink" title="③ 修改数据"></a>③ 修改数据</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into db02.t1 values(<span class="number">2</span>,<span class="string">&#x27;harry&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line">mysql&gt; <span class="built_in">select</span> * from db02.t1;</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">-------</span>+</span><br><span class="line">| id   | name  |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">-------</span>+</span><br><span class="line">|    <span class="number">1</span> | mona  |</span><br><span class="line">|    <span class="number">2</span> | harry |</span><br><span class="line">|    <span class="number">3</span> | jack  |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">-------</span>+</span><br></pre></td></tr></table></figure><h5 id="④-xtrabackup增量备份"><a href="#④-xtrabackup增量备份" class="headerlink" title="④ xtrabackup增量备份"></a>④ xtrabackup增量备份</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">innobackupex <span class="literal">--incremental</span> /incre_backup <span class="literal">--incremental-basedir</span>=BASEDIR</span><br><span class="line">说明：</span><br><span class="line"><span class="number">1</span>.BASEDIR指的是完全备份所在的目录;/incre_backup目录中产生以时间命名的目录以存放所有的增量备份数据。</span><br><span class="line"><span class="number">2</span>.在执行过增量备份之后再一次进行增量备份时，其<span class="literal">--incremental-basedir</span>应该指向上一次的增量备份所在的目录。</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># innobackupex --user=admin --password=123 --incremental /incre_backup --incremental-basedir=/full_xtrabckup/2019-01-23_23-59-58/</span></span><br></pre></td></tr></table></figure><h5 id="⑤-应用增备备份集到全量备份集"><a href="#⑤-应用增备备份集到全量备份集" class="headerlink" title="⑤ 应用增备备份集到全量备份集"></a>⑤ 应用增备备份集到全量备份集</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">innobackupex <span class="literal">--apply-log</span> /全量备份集目录 <span class="literal">--incremental-dir</span>=/增量备份集</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># innobackupex --user=admin --password=123 --apply-log /full_xtrabckup/2019-01-23_23-59-58/ --incremental-dir=/incre_backup/2019-01-24_00-13-41/</span></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"><span class="number">1</span>.<span class="literal">--redo-only</span>除了最后一个不用加之外，其他的增量应用都要加，最后一个应用的时候可以直接进入回滚未提交事务阶段;如果加了也没事，服务启动的时候会进入recovery过程，来回滚</span><br><span class="line"><span class="number">2</span>.应用增量备份的时候只能按照备份的顺序来应用。如果应用顺序错误，那么备份就不可用。如果无法确定顺序，可以使用xtra<span class="built_in">backup-checkpoints</span>来确定顺序。</span><br></pre></td></tr></table></figure><h5 id="⑥-模拟故障"><a href="#⑥-模拟故障" class="headerlink" title="⑥ 模拟故障"></a>⑥ 模拟故障</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">删除所有数据库文件并停止mysql进程</span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># rm -rf /usr/local/mysql/data/*</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># pkill -9 mysqld</span></span><br></pre></td></tr></table></figure><h5 id="⑦-数据恢复"><a href="#⑦-数据恢复" class="headerlink" title="⑦ 数据恢复"></a>⑦ 数据恢复</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">注意：在准备步骤完成后，还原时只需要还原完全备份即可</span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># innobackupex --user=admin --password=123 --copy-back /full_xtrabckup/2019-01-23_23-59-58/</span></span><br><span class="line">修改数据目录权限</span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># chown -R mysql. /usr/local/mysql/data/</span></span><br><span class="line">启动数据库</span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># service mysql start</span></span><br><span class="line">Starting MySQL.Logging to <span class="string">&#x27;/usr/local/mysql/data/mysql3307.err&#x27;</span>.</span><br><span class="line">. SUCCESS!</span><br></pre></td></tr></table></figure><h5 id="⑧-测试验证"><a href="#⑧-测试验证" class="headerlink" title="⑧ 测试验证"></a>⑧ 测试验证</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">select</span> * from db02.t1;</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">-------</span>+</span><br><span class="line">| id   | name  |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">-------</span>+</span><br><span class="line">|    <span class="number">1</span> | mona  |</span><br><span class="line">|    <span class="number">2</span> | harry |</span><br><span class="line">|    <span class="number">3</span> | jack  |</span><br><span class="line">+<span class="literal">------</span>+<span class="literal">-------</span>+</span><br><span class="line"><span class="number">3</span> rows <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="四、MySQL备份经验分享"><a href="#四、MySQL备份经验分享" class="headerlink" title="四、MySQL备份经验分享"></a>四、MySQL备份经验分享</h2><h3 id="1、逻辑备份-mysqldump"><a href="#1、逻辑备份-mysqldump" class="headerlink" title="1、逻辑备份(mysqldump)"></a>1、逻辑备份(mysqldump)</h3><p>​某同学使用mysqldump工具对数据库每天进行备份，有一天数据库有问题需要进行恢复，他发现数据不能恢复到最新状态，原因是因为他只是全库备份数据，没有备份二进制日志文件导致。</p><p>​<strong>所以，大家一定要明白：</strong></p><p>​① mysqldump工具只能恢复到&#x3D;&#x3D;备份那一时刻&#x3D;&#x3D;</p><p>​② 通过&#x3D;&#x3D;二进制日志&#x3D;&#x3D;来恢复到最新数据</p><h3 id="2、物理备份-xtrabackup"><a href="#2、物理备份-xtrabackup" class="headerlink" title="2、物理备份(xtrabackup)"></a>2、物理备份(xtrabackup)</h3><p>​① 如果数据库在第1次增量备份后发生故障，那么数据恢复时只能够使用xtrabackup全量备份加xtrabackup增量备份的时间点，即&#x3D;&#x3D;恢复到第1次增量备份结束的点&#x3D;&#x3D;</p><p>​② 如果要将数据库恢复到最新状态，需要&#x3D;&#x3D;结合binlog日志恢复&#x3D;&#x3D;</p><p>​③ 以上全量和增量的备份集是不能用的，需要将xtrabackup_log(事务日志，在备份过程中数据库的更改)应用到全量的备份集中才有效（应用日志&#x3D;&#x3D;必须按照顺序去应用&#x3D;&#x3D;：全备—&gt;增备1—&gt;增备2…）</p><p>​④ 应用所有日志到全量备份集中时，需注意</p><p>​1) 除了&#x3D;&#x3D;最后一次增量备份&#x3D;&#x3D;应用日志可以不加–redo-only外,其他都要加;只应用已经提交的事务，不回滚未提交的事务!!!</p><p>​2) 应用日志到全量备份集中时一定要&#x3D;&#x3D;严格按照时间顺序执行，否则无效&#x3D;&#x3D;！</p><p>​3) 在恢复数据时，确保数据目录为空；数据库服务是停止状态</p><h1 id="课后实战"><a href="#课后实战" class="headerlink" title="课后实战"></a>课后实战</h1><p>根据任务要求完成MySQL数据库的备份。</p><ol><li>备份策略制定（了解业务|运营）|备份周期（1周）、备份时间点（避开业务高峰）</li><li>备份工具选择（mysqldump |xtrabackup）</li><li>脚本编写</li><li>计划任务执行</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span> <span class="number">01</span> * * <span class="number">0</span>  bash full_backup.sh</span><br><span class="line"><span class="number">30</span> <span class="number">01</span> * * <span class="number">1</span> bash incremental1_backup.sh</span><br><span class="line"><span class="number">30</span> <span class="number">01</span> * * <span class="number">2</span>  bash incremental2_backup.sh</span><br><span class="line"><span class="number">30</span> <span class="number">01</span> * * <span class="number">3</span>  bash full_backup.sh</span><br><span class="line"><span class="number">30</span> <span class="number">01</span> * * <span class="number">4</span>  bash incremental1_backup.sh</span><br><span class="line"><span class="number">30</span> <span class="number">01</span> * * <span class="number">5</span>  bash full_backup.sh</span><br><span class="line"><span class="number">30</span> <span class="number">01</span> * * <span class="number">6</span>  bash incremental1_backup.sh</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="number">30</span> <span class="number">01</span> * * <span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>  bash full_backup.sh</span><br><span class="line"><span class="number">30</span> <span class="number">01</span> * * <span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>  bash incremental1_backup.sh</span><br><span class="line"><span class="number">30</span> <span class="number">01</span> * * <span class="number">2</span>  bash incremental2_backup.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> MYSQL </tag>
            
            <tag> mysql </tag>
            
            <tag> 数据库备份与恢复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql主从架构</title>
      <link href="/2024/06/25/Mysql%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/"/>
      <url>/2024/06/25/Mysql%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="任务背景"><a href="#任务背景" class="headerlink" title="任务背景"></a>任务背景</h1><h2 id="一、真实案例"><a href="#一、真实案例" class="headerlink" title="一、真实案例"></a>一、真实案例</h2><p>​某同学刚入职公司，在熟悉公司业务环境的时候，发现他们的数据库架构是一主两从，但是两台从数据库和主库不同步。询问得知，已经好几个月不同步了，但是每天会全库备份主服务器上的数据到从服务器上，由于数据量不是很大，所以一直没有人处理主从不同步的问题。这次正好问到了，于是乎就安排该同学处理一下这个主从不同步的问题。</p><h2 id="二、案例背后核心技术"><a href="#二、案例背后核心技术" class="headerlink" title="二、案例背后核心技术"></a>二、案例背后核心技术</h2><p>1、熟悉MySQL数据库常见的主从架构</p><p>2、理解MySQL主从架构的实现原理</p><p>3、掌握MySQL主从架构的搭建</p><h2 id="三、今日任务场景"><a href="#三、今日任务场景" class="headerlink" title="三、今日任务场景"></a>三、今日任务场景</h2><p>​随着业务量不断增长，公司对数据的安全性越来越重视，由于常规的备份不能够实时记录下数据库的所有状态，为了能够保障数据库的实时备份冗余，希望将现有单机数据库变成双机热备。</p><h1 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h1><ul><li><input checked="" disabled="" type="checkbox"> 备份数据库</li><li><input checked="" disabled="" type="checkbox"> 搭建双机热备数据库架构M-S</li></ul><h1 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h1><ul><li><input checked="" disabled="" type="checkbox"> 了解什么是MySQL的Replication</li><li><input checked="" disabled="" type="checkbox"> <strong>理解MySQL的Replication的架构原理</strong></li><li><input checked="" disabled="" type="checkbox"> &#x3D;&#x3D;<strong>掌握MySQL的基本复制架构的搭建（M-S重点</strong>&#x3D;&#x3D;）</li><li><input checked="" disabled="" type="checkbox"> 了解和掌握基于GTIDs的复制特点及搭建</li></ul><h1 id="理论储备"><a href="#理论储备" class="headerlink" title="理论储备"></a>理论储备</h1><h2 id="一、MySQL集群概述"><a href="#一、MySQL集群概述" class="headerlink" title="一、MySQL集群概述"></a>一、MySQL集群概述</h2><h3 id="1、集群的主要类型"><a href="#1、集群的主要类型" class="headerlink" title="1、集群的主要类型"></a>1、集群的主要类型</h3><ul><li>高可用集群（High Available Cluster，HA）</li><li>高可用集群是指通过<strong>特殊的软件</strong>把独立的服务器连接起来，组成一个能够<strong>提供故障切换</strong>（Fail Over）功能的集群</li></ul><h3 id="2、如何衡量高可用"><a href="#2、如何衡量高可用" class="headerlink" title="2、如何衡量高可用"></a>2、如何衡量高可用</h3><table><thead><tr><th>可用性级别(指标)</th><th>年度宕机时间</th><th>描述</th><th>叫法</th></tr></thead><tbody><tr><td>99%</td><td>3.65天&#x2F;年</td><td>基本可用系统</td><td>2个9</td></tr><tr><td>99.9%</td><td>8.76小时&#x2F;年</td><td>可用系统</td><td>3个9</td></tr><tr><td>99.99%</td><td>52.6分钟&#x2F;年</td><td>高可用系统</td><td>4个9</td></tr><tr><td>99.999%</td><td>5.3分钟&#x2F;年</td><td>抗故障系统</td><td>5个9</td></tr><tr><td>99.9999%</td><td>32秒&#x2F;年</td><td>容错系统</td><td>6个9</td></tr></tbody></table><p><strong>计算方法：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>年 = <span class="number">365</span>天 = <span class="number">8760</span>小时</span><br><span class="line"><span class="number">99</span>% = <span class="number">8760</span> * <span class="number">1</span>% = <span class="number">8760</span> * <span class="number">0.01</span> = <span class="number">87.6</span>小时=<span class="number">3.65</span>天</span><br><span class="line"><span class="number">99.9</span> = <span class="number">8760</span> * <span class="number">0.1</span>% = <span class="number">8760</span> * <span class="number">0.001</span> = <span class="number">8.76</span>小时</span><br><span class="line"><span class="number">99.99</span> = <span class="number">8760</span> * <span class="number">0.0001</span> = <span class="number">0.876</span>小时 = <span class="number">0.876</span> * <span class="number">60</span> = <span class="number">52.6</span>分钟</span><br><span class="line"><span class="number">99.999</span> = <span class="number">8760</span> * <span class="number">0.00001</span> = <span class="number">0.0876</span>小时 = <span class="number">0.0876</span> * <span class="number">60</span> = <span class="number">5.26</span>分钟</span><br></pre></td></tr></table></figure><h3 id="3、常用的集群架构"><a href="#3、常用的集群架构" class="headerlink" title="3、常用的集群架构"></a>3、常用的集群架构</h3><ul><li>&#x3D;&#x3D;<strong>MySQL Replication</strong>&#x3D;&#x3D;</li><li>MySQL Cluster</li><li>MySQL Group Replication （MGR）   5.7.17</li><li>MariaDB Galera Cluster </li><li>&#x3D;&#x3D;MHA&#x3D;&#x3D;|Keepalived|HeartBeat|Lvs，Haproxy等技术构建高可用集群</li></ul><h2 id="二、MySQL复制简介"><a href="#二、MySQL复制简介" class="headerlink" title="二、MySQL复制简介"></a>二、MySQL复制简介</h2><h3 id="1、什么是MySQL复制"><a href="#1、什么是MySQL复制" class="headerlink" title="1、什么是MySQL复制"></a>1、什么是MySQL复制</h3><ul><li>Replication可以实现将数据从一台数据库服务器（master）复制到一台到多台数据库服务器(slave)</li><li>默认情况下，属于<strong>异步</strong>复制，所以无需维持长连接</li></ul><h3 id="2、-MySQL复制原理"><a href="#2、-MySQL复制原理" class="headerlink" title="2、 MySQL复制原理"></a>2、 MySQL复制原理</h3><p>简单来说，master将数据库的改变写入**&#x3D;&#x3D;二进制日志&#x3D;&#x3D;<strong>，slave同步这些二进制日志，并根据这些二进制日志进行</strong>&#x3D;&#x3D;数据重演操作&#x3D;&#x3D;**，实现数据异步同步。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-16-51-mysql%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86-e4a7f7.png" alt="mysql复制原理"></p><p><strong>详细描述：</strong></p><ol><li>slave端的IO线程发送请求给master端的binlog dump线程</li><li>master端binlog dump线程&#x3D;&#x3D;获取二进制日志&#x3D;&#x3D;信息(&#x3D;&#x3D;文件名和位置信息&#x3D;&#x3D;)发送给slave端的IO线程</li><li>salve端IO线程获取到的内容&#x3D;&#x3D;依次&#x3D;&#x3D;写到slave端relay log里，并把master端的bin-log文件名和位置记录到master.info里</li><li>salve端的SQL线程，检测到relay  log中内容更新，就会解析relay log里更新的内容，并&#x3D;&#x3D;执行这些操作&#x3D;&#x3D;，从而达到和master数据一致</li></ol><h3 id="3、MySQL复制架构"><a href="#3、MySQL复制架构" class="headerlink" title="3、MySQL复制架构"></a>3、MySQL复制架构</h3><h4 id="㈠-双机热备（AB复制）"><a href="#㈠-双机热备（AB复制）" class="headerlink" title="㈠  双机热备（AB复制）"></a>㈠  双机热备（AB复制）</h4><p> <img src="/%5B/M-S%E7%AE%80%E5%9B%BE.png%5D(https:/cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-21-32-M-S%E7%AE%80%E5%9B%BE-6bf309.png)" alt="M-S简图"></p><p><strong>默认情况下，master接受读写请求，slave只接受读请求以减轻master的压力。</strong></p><h4 id="㈡-级联复制"><a href="#㈡-级联复制" class="headerlink" title="㈡  级联复制"></a>㈡  级联复制</h4><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-16-52-m-s1-s2%E7%AE%80%E5%9B%BE-e64920.png" alt="m-s1-s2简图"></p><p><strong>优点：</strong>进一步分担读压力</p><p><strong>缺点：</strong>slave1 出现故障，后面的所有级联slave服务器都会同步失败</p><h4 id="㈢-并联复制"><a href="#㈢-并联复制" class="headerlink" title="㈢ 并联复制"></a>㈢ 并联复制</h4><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-17-21-m-s-s%E5%B9%B6%E8%81%94%E5%A4%8D%E5%88%B6-747c0c.png" alt="m-s-s并联复制"></p><p><strong>优点：</strong>解决上面的slave1的单点故障，同时也分担读压力</p><p><strong>缺点：</strong>间接增加master的压力（传输二进制日志压力）</p><h4 id="㈣-双主复制"><a href="#㈣-双主复制" class="headerlink" title="㈣ 双主复制"></a>㈣ 双主复制</h4><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-17-19-m-m-5f01e1.png" alt="m-m"></p><p><strong>特点：</strong></p><p>从命名来看，两台master好像都能接受读、写请求，但实际上，往往运作的过程中，同一时刻只有其中一台master会接受写请求，另外一台接受读请求。</p><h2 id="三、MySQL复制搭建"><a href="#三、MySQL复制搭建" class="headerlink" title="三、MySQL复制搭建"></a>三、MySQL复制搭建</h2><h3 id="1、传统AB复制架构-M-S"><a href="#1、传统AB复制架构-M-S" class="headerlink" title="1、传统AB复制架构(M-S)"></a>1、传统AB复制架构(M-S)</h3><p><strong>说明</strong>：当前环境中master上已有mysql数据库，版本为5.7.31</p><h4 id="㈠-环境说明"><a href="#㈠-环境说明" class="headerlink" title="㈠ 环境说明"></a>㈠ 环境说明</h4><table><thead><tr><th>IP</th><th>主机名</th><th>角色</th></tr></thead><tbody><tr><td>10.1.1.10</td><td>db01.heima.cc  别名:master</td><td>master(主)</td></tr><tr><td>10.1.1.20</td><td>db02.heima.cc  别名:slave</td><td>salve(从)</td></tr></tbody></table><h4 id="㈡-安装前环境准备"><a href="#㈡-安装前环境准备" class="headerlink" title="㈡ 安装前环境准备"></a>㈡ 安装前环境准备</h4><p>1、关闭防火墙和selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl stop firewalld</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl <span class="built_in">disable</span> firewalld</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl list-unit-files|grep firewalld</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setenforce 0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sed -i <span class="string">&#x27;/^SELINUX=/cSELINUX=disabled&#x27;</span> /etc/selinux/config</span></span><br></pre></td></tr></table></figure><p>2、修改主机名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">master上</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hostnamectl set-hostname db01.heima.cc</span></span><br><span class="line">slave上</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hostnamectl set-hostname db02.heima.cc</span></span><br></pre></td></tr></table></figure><p>3、绑定IP地址和主机名到hosts文件</p><p>说明：主从两台服务器一起完成</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/hosts</span></span><br><span class="line">追加以下内容</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.10</span> db01.heima.cc master</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.20</span> db02.heima.cc slave</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、同步系统时间</p><p>说明：保证两台服务器系统时间一致即可</p><h4 id="㈢-搭建主从复制思路"><a href="#㈢-搭建主从复制思路" class="headerlink" title="㈢ 搭建主从复制思路"></a>㈢ 搭建主从复制思路</h4><ol><li>slave必须安装相同版本的mysql数据库软件</li><li>master端必须开启&#x3D;&#x3D;二进制日志&#x3D;&#x3D;；slave端必须开启&#x3D;&#x3D;relay log日志&#x3D;&#x3D;</li><li>master端和slave端的server-id号&#x3D;&#x3D;不能一致&#x3D;&#x3D;</li><li>slave端配置向master来同步数据<ul><li>master端必须创建一个复制用户</li><li>保证master和slave端&#x3D;&#x3D;初始数据一致&#x3D;&#x3D;</li><li>配置主从复制（slave端）</li></ul></li></ol><h4 id="㈣-主从搭建步骤"><a href="#㈣-主从搭建步骤" class="headerlink" title="㈣ 主从搭建步骤"></a>㈣ 主从搭建步骤</h4><h5 id="①-Slave安装MySQL软件"><a href="#①-Slave安装MySQL软件" class="headerlink" title="① Slave安装MySQL软件"></a>① Slave安装MySQL软件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># useradd -r -s /sbin/nologin mysql</span></span><br><span class="line"><span class="comment"># tar -xf mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz</span></span><br><span class="line"><span class="comment"># mv mysql-5.7.31-linux-glibc2.12-x86_64 /usr/local/mysql</span></span><br><span class="line"><span class="comment"># echo &quot;export PATH=$PATH:/usr/local/mysql/bin&quot; &gt;&gt; /etc/profile</span></span><br><span class="line"><span class="comment"># source /etc/profile</span></span><br><span class="line"><span class="comment"># cd /usr/local/mysql</span></span><br><span class="line"><span class="comment"># cp support-files/mysql.server /etc/init.d/mysql</span></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">暂时不需要初始化数据库文件，只是安装好了和master相同版本的mysql数据库软件；后面向master来同步所有数据。</span><br></pre></td></tr></table></figure><h5 id="②-修改主从配置文件"><a href="#②-修改主从配置文件" class="headerlink" title="② 修改主从配置文件"></a>② 修改主从配置文件</h5><p>注意：master和slave都要修改！</p><ul><li>Master服务器配置文件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># cat /etc/my.cnf</span></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">port=<span class="number">3310</span></span><br><span class="line">log<span class="literal">-error</span>=/usr/local/mysql/db01<span class="literal">-master</span>.err</span><br><span class="line">log<span class="literal">-bin</span>=/usr/local/mysql/<span class="keyword">data</span>/binlog</span><br><span class="line">server<span class="literal">-id</span>=<span class="number">10</span></span><br><span class="line">character_set_server=utf8mb4</span><br></pre></td></tr></table></figure><ul><li>Slave服务器配置文件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">db02</span> ~]<span class="comment"># cat /etc/my.cnf</span></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">port=<span class="number">3320</span></span><br><span class="line">log<span class="literal">-error</span>=/usr/local/mysql/db02<span class="literal">-slave</span>.err</span><br><span class="line">relay<span class="literal">-log</span>=/usr/local/mysql/<span class="keyword">data</span>/relaylog</span><br><span class="line">server<span class="literal">-id</span>=<span class="number">20</span></span><br><span class="line">character_set_server=utf8mb4</span><br></pre></td></tr></table></figure><h5 id="③-同步master数据到slave"><a href="#③-同步master数据到slave" class="headerlink" title="③ 同步master数据到slave"></a>③ 同步master数据到slave</h5><p>1）停止master上的mysql服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service mysql stop</span></span><br></pre></td></tr></table></figure><p>2）&#x3D;&#x3D;删除master上auto.cnf文件&#x3D;&#x3D;</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">db01</span> <span class="type">data</span>]<span class="comment"># pwd</span></span><br><span class="line">/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> <span class="type">data</span>]<span class="comment"># rm -f auto.cnf</span></span><br><span class="line">说明：auto.cnf文件里保存的是每个数据库实例的UUID信息，代表数据库的唯一标识</span><br></pre></td></tr></table></figure><p>3）同步master数据到slave</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># rsync -av /usr/local/mysql/data 10.1.1.20:/usr/local/mysql/</span></span><br></pre></td></tr></table></figure><p>4）启动master和slave数据库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">db02</span> ~]<span class="comment"># service mysql start</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># service mysql start</span></span><br></pre></td></tr></table></figure><h5 id="④-配置slave同步master数据"><a href="#④-配置slave同步master数据" class="headerlink" title="④ 配置slave同步master数据"></a>④ 配置slave同步master数据</h5><p>1）&#x3D;&#x3D;master&#x3D;&#x3D;端创建授权用户</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create user <span class="string">&#x27;slave&#x27;</span><span class="string">@&#x27;10.1.1.%&#x27; identified by &#x27;123&#x27;;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; grant replication slave on *.* to &#x27;slave&#x27;@&#x27;10.1.1.%&#x27;;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; flush privileges;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br></pre></td></tr></table></figure><p>2）查看&#x3D;&#x3D;master&#x3D;&#x3D;上正在写的二进制文件名和位置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先加锁，防止两边数据不一致</span><br><span class="line">mysql&gt; flush tables with read lock;</span><br><span class="line">查看当前数据库的二进制日志写到什么位置（只有打开二进制日志，这句命令才有结果）</span><br><span class="line">mysql&gt; show master status;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-17-30-%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E1-e8f97e.png" alt="配置主从1"></p><p>3）&#x3D;&#x3D;slave&#x3D;&#x3D;上配置同步信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to</span><br><span class="line">    -&gt; master_host=<span class="string">&#x27;10.1.1.10&#x27;</span>,</span><br><span class="line">    -&gt; master_user=<span class="string">&#x27;slave&#x27;</span>,</span><br><span class="line">    -&gt; master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    -&gt; master_port=<span class="number">3310</span>,</span><br><span class="line">    -&gt; master_log_file=<span class="string">&#x27;binlog.000002&#x27;</span>,</span><br><span class="line">    -&gt; master_log_pos=<span class="number">1218</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">master_host   master的IP</span><br><span class="line">master_user  复制的用户</span><br><span class="line">master_password  复制用户密码</span><br><span class="line">master_portmaster的端口号</span><br><span class="line">master_log_filemaster正在写的二进制文件名，锁表后查看的</span><br><span class="line">master_log_pos    master正在写的二进制位置</span><br></pre></td></tr></table></figure><p>4）启动复制线程，开始同步</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">start</span> slave;</span><br><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">.....</span><br><span class="line">            Slave_IO_Running: Yes 代表成功连接到master并且下载日志</span><br><span class="line">            Slave_SQL_Running: Yes 代表成功执行日志中的SQL语句</span><br><span class="line">启动slave报如下错误：</span><br><span class="line">mysql&gt; <span class="built_in">start</span> slave;</span><br><span class="line">ERROR <span class="number">1872</span> (HY000): Slave failed to initialize relay log info structure from the repository</span><br><span class="line">解决：删除relay<span class="literal">-log</span>.info，重启mysql服务或者mysql&gt;reset slave;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-17-13-%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E2-3698b0.png" alt="配置主从2"></p><p>5）master上解锁</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; unlock tables;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>6）测试验证</p><h5 id="⑤-主从配置总结"><a href="#⑤-主从配置总结" class="headerlink" title="⑤ 主从配置总结"></a>⑤ 主从配置总结</h5><ol><li>主从复制必须保证两台数据库实例的&#x3D;&#x3D;server-id不一致&#x3D;&#x3D;</li><li>主服务器&#x3D;&#x3D;必须开启二进制日志&#x3D;&#x3D;；从服务器&#x3D;&#x3D;必须开启中继日志&#x3D;&#x3D;</li><li>主从复制搭建&#x3D;&#x3D;必须保证初始数据一致&#x3D;&#x3D;</li><li>主服务器必须要给从服务器&#x3D;&#x3D;创建一个复制用户，并授予复制权限&#x3D;&#x3D;</li><li>Master—&gt;Slave架构，&#x3D;&#x3D;主写会同步到从&#x3D;&#x3D;；而&#x3D;&#x3D;从写不会同步到主&#x3D;&#x3D;</li></ol><h5 id="⑥-数据不一致导致同步失效"><a href="#⑥-数据不一致导致同步失效" class="headerlink" title="⑥ 数据不一致导致同步失效"></a>⑥ 数据不一致导致同步失效</h5><p>问：</p><p>如果由于人为操作或者其他原因直接将数据更改到从服务器导致数据同步失效，怎么解决？</p><p>答：可以通过变量<code>sql_slave_skip_counter</code>临时跳过事务进行处理</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SET</span> GLOBAL sql_slave_skip_counter = N  N代表跳过N个事务</span><br><span class="line">举例说明：</span><br><span class="line">mysql&gt; <span class="built_in">SET</span> GLOBAL sql_slave_skip_counter=<span class="number">1</span>;</span><br><span class="line">mysql&gt; stop slave;</span><br><span class="line">mysql&gt; <span class="built_in">start</span> slave;</span><br><span class="line">注意：</span><br><span class="line"><span class="number">1</span>. 跳过事务应该在slave上进行</span><br><span class="line"><span class="number">2</span>. 传统的AB复制方式可以使用变量：sql_slave_skip_counter，基于GTIDs的方式不支持</span><br></pre></td></tr></table></figure><h3 id="2、基于GTIDs的AB复制架构-M-S"><a href="#2、基于GTIDs的AB复制架构-M-S" class="headerlink" title="2、基于GTIDs的AB复制架构(M-S)"></a>2、基于GTIDs的AB复制架构(M-S)</h3><h4 id="㈠-关于GTIDs概述"><a href="#㈠-关于GTIDs概述" class="headerlink" title="㈠ 关于GTIDs概述"></a>㈠ 关于GTIDs概述</h4><ul><li><strong>什么是GTIDs以及有什么特点？</strong></li></ul><ol><li><p>GTIDs（Global transaction identifiers）&#x3D;&#x3D;全局事务标识符&#x3D;&#x3D;，是mysql 5.6新加入的一项技术</p></li><li><p>当使用GTIDs时，每一个事务都可以被&#x3D;&#x3D;识别并且跟踪&#x3D;&#x3D; </p></li><li><p>添加新的slave或者当发生故障需要将master身份或者角色迁移到slave上时，都无需考虑是哪一个二进制日志以及哪个position值，&#x3D;&#x3D;极大简化了相关操作&#x3D;&#x3D;</p></li><li><p>GTIDs是完全基于事务的，因此&#x3D;&#x3D;不支持MYISAM存储引擎&#x3D;&#x3D; </p></li><li><p>&#x3D;&#x3D;GTID由source_id和transaction_id组成&#x3D;&#x3D;： </p><p>1）source_id来自于server_uuid,可以在auto.cnf中看到</p><p>2）transation_id是一个序列数字，自动生成.</p></li></ol><ul><li><strong>使用GTIDs的限制条件有哪些？</strong></li></ul><ol><li>不支持非事务引擎（MyISAM），因为可能会导致多个gtid分配给同一个事务</li><li>create table … select 语句不支持（主库语法报错）</li><li>create&#x2F;drop <strong>temporary table</strong> 语句不支持</li><li>必须使用enforce-gtid-consistency参数 </li><li>sql-slave-skip-counter不支持(传统的跳过错误方式) </li><li>GTID复制环境中必须要求统一开启和GTID或者关闭GTID </li><li>在mysql 5.6.7之前，使用&#x3D;&#x3D;mysql_upgrade&#x3D;&#x3D;命令会出现问题</li></ol><h4 id="㈡-基于GTIDs的配置"><a href="#㈡-基于GTIDs的配置" class="headerlink" title="㈡ 基于GTIDs的配置"></a>㈡ 基于GTIDs的配置</h4><p>在生产环境中，大多数情况下使用的MySQL5.6基本上都是从5.5或者更低的版本升级而来，这就意味着之前的mysql replication方案是基于传统的方式部署，并且已经在运行，因此，接下来我们就利用已有的环境升级至基于GITDs的Replication</p><h5 id="〇-思路"><a href="#〇-思路" class="headerlink" title="〇 思路"></a>〇 思路</h5><ol><li>修改配置文件支持GTIDs  (主+从)</li><li>重启数据库  (主+从)</li><li>为了保证数据一致性，master和slave设置为只读模式 (主+从)</li><li>&#x3D;&#x3D;从服务器上重新配置同步&#x3D;&#x3D; （从）</li></ol><h5 id="①-修改配置文件支持GTIDs"><a href="#①-修改配置文件支持GTIDs" class="headerlink" title="① 修改配置文件支持GTIDs"></a>① 修改配置文件支持GTIDs</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># cat /etc/my.cnf</span></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">port=<span class="number">3310</span></span><br><span class="line">log<span class="literal">-error</span>=/usr/local/mysql/db01<span class="literal">-master</span>.err</span><br><span class="line">log<span class="literal">-bin</span>=/usr/local/mysql/<span class="keyword">data</span>/binlog</span><br><span class="line">server<span class="literal">-id</span>=<span class="number">10</span></span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line">gtid<span class="literal">-mode</span>=on</span><br><span class="line">log<span class="literal">-slave-updates</span>=<span class="number">1</span></span><br><span class="line">enforce<span class="literal">-gtid-consistency</span></span><br><span class="line"></span><br><span class="line">[<span class="type">client</span>]</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">db02</span> ~]<span class="comment"># cat /etc/my.cnf</span></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">port=<span class="number">3320</span></span><br><span class="line">log<span class="literal">-error</span>=/usr/local/mysql/db02<span class="literal">-slave</span>.err</span><br><span class="line">relay<span class="literal">-log</span>=/usr/local/mysql/<span class="keyword">data</span>/relaylog</span><br><span class="line">server<span class="literal">-id</span>=<span class="number">20</span></span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line">log<span class="literal">-slave-updates</span>=<span class="number">1</span></span><br><span class="line">gtid<span class="literal">-mode</span>=on</span><br><span class="line">enforce<span class="literal">-gtid-consistency</span></span><br><span class="line"><span class="built_in">skip-slave</span><span class="literal">-start</span></span><br><span class="line"></span><br><span class="line">[<span class="type">client</span>]</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"><span class="number">1</span>）开启GITDs需要在master和slave上都配置gtid<span class="literal">-mode</span>，log<span class="literal">-bin</span>，log<span class="literal">-slave-updates</span>，enforce<span class="literal">-gtid-consistency</span>（该参数在<span class="number">5.6</span>.<span class="number">9</span>之前是<span class="literal">--disable-gtid-unsafe-statement</span>）</span><br><span class="line"><span class="number">2</span>）其次，slave还需要增加<span class="built_in">skip-slave</span><span class="literal">-start</span>参数,目的是启动的时候，先不要把slave起来，需要做一些配置</span><br><span class="line"><span class="number">3</span>）基于GTIDs复制从服务器必须开启二进制日志！</span><br></pre></td></tr></table></figure><h5 id="②-重起主从数据库服务"><a href="#②-重起主从数据库服务" class="headerlink" title="② 重起主从数据库服务"></a>② 重起主从数据库服务</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">db01</span> ~]<span class="comment"># service mysql restart</span></span><br><span class="line">Shutting down MySQL............ SUCCESS!</span><br><span class="line">Starting MySQL.. SUCCESS!</span><br><span class="line">[<span class="type">root</span>@<span class="type">db02</span> ~]<span class="comment"># service mysql restart</span></span><br><span class="line">Shutting down MySQL.... SUCCESS!</span><br><span class="line">Starting MySQL.. SUCCESS! </span><br></pre></td></tr></table></figure><h5 id="③-主从设置只读模式"><a href="#③-主从设置只读模式" class="headerlink" title="③ 主从设置只读模式"></a>③ 主从设置只读模式</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> <span class="selector-tag">@</span>@global.read_only=ON;</span><br></pre></td></tr></table></figure><h5 id="④-slave重新配置同步"><a href="#④-slave重新配置同步" class="headerlink" title="④ slave重新配置同步"></a>④ slave重新配置同步</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to master_host=<span class="string">&#x27;10.1.1.10&#x27;</span>,master_user=<span class="string">&#x27;slave&#x27;</span>,master_password=<span class="string">&#x27;123&#x27;</span>,master_port=<span class="number">3310</span>,master_auto_position=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1</span>.确保有复制用户</span><br><span class="line"><span class="number">2</span>.主要区别于传统复制的参数是：master_auto_position=<span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="⑤-slave上启动同步线程"><a href="#⑤-slave上启动同步线程" class="headerlink" title="⑤ slave上启动同步线程"></a>⑤ slave上启动同步线程</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">start</span> slave;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-17-08-%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E3-2f5f3f.png" alt="配置主从3"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-17-10-%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E4-bce8f0.png" alt="配置主从4"></p><h5 id="⑥-关闭master只读模式"><a href="#⑥-关闭master只读模式" class="headerlink" title="⑥ 关闭master只读模式"></a>⑥ 关闭master只读模式</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> <span class="selector-tag">@</span>@global.read_only=OFF;</span><br></pre></td></tr></table></figure><h5 id="⑦-测试验证"><a href="#⑦-测试验证" class="headerlink" title="⑦ 测试验证"></a>⑦ 测试验证</h5><h4 id="㈢-基于GTIDs手动跳过事务"><a href="#㈢-基于GTIDs手动跳过事务" class="headerlink" title="㈢ 基于GTIDs手动跳过事务"></a>㈢ 基于GTIDs手动跳过事务</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">指定需要跳过的GTIDs编号</span><br><span class="line"><span class="built_in">SET</span> GTID_NEXT=<span class="string">&#x27;aaa-bbb-ccc-ddd:N&#x27;</span>;</span><br><span class="line">开始一个空事务</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">COMMIT;</span><br><span class="line">使用下一个自动生成的全局事务ID。</span><br><span class="line"><span class="built_in">SET</span> GTID_NEXT=<span class="string">&#x27;AUTOMATIC&#x27;</span>;</span><br><span class="line"></span><br><span class="line">举例说明：</span><br><span class="line">mysql&gt; stop slave;</span><br><span class="line">mysql&gt; <span class="built_in">SET</span> <span class="selector-tag">@</span>@SESSION.GTID_NEXT= <span class="string">&#x27;044e6392-cf9b-11e8-a748-000c294ca304:3&#x27;</span>;</span><br><span class="line">mysql&gt; <span class="keyword">BEGIN</span>;</span><br><span class="line">mysql&gt; commit;</span><br><span class="line">mysql&gt; <span class="built_in">SET</span> <span class="selector-tag">@</span>@SESSION.GTID_NEXT= <span class="string">&#x27;AUTOMATIC&#x27;</span>;</span><br><span class="line">mysql&gt; <span class="built_in">start</span> slave;</span><br><span class="line">mysql&gt; show slave status\G</span><br><span class="line"></span><br><span class="line">说明：需要跳过哪个事务，需要手动查看relaylog文件得到</span><br><span class="line">[<span class="type">root</span>@<span class="type">slave1</span> <span class="type">data</span>]<span class="comment"># ../bin/mysqlbinlog relay.000003|less</span></span><br><span class="line">。。。。</span><br><span class="line"><span class="comment"># at 756</span></span><br><span class="line"><span class="comment">#181015 12:04:45 server id 10  end_log_pos 817 CRC32 0x5374f49e         GTID [commit=yes]</span></span><br><span class="line"><span class="built_in">SET</span> <span class="selector-tag">@</span>@SESSION.GTID_NEXT= <span class="string">&#x27;044e6392-cf9b-11e8-a748-000c294ca304:3&#x27;</span>/*!*/;</span><br></pre></td></tr></table></figure><h3 id="3、其他复制架构"><a href="#3、其他复制架构" class="headerlink" title="3、其他复制架构"></a>3、其他复制架构</h3><h4 id="㈠-M-S1-S2"><a href="#㈠-M-S1-S2" class="headerlink" title="㈠ M-S1-S2"></a>㈠ M-S1-S2</h4><p><strong>核心：</strong></p><ol><li>中间&#x3D;&#x3D;slave1&#x3D;&#x3D;机器打开<code>log-slave-updates=1</code>参数，将master上的二进制日志同事保存到自己的二进制日志中，以便其他从服务器来同步</li><li>其他配置和M-S架构一样</li><li>测试验证<ul><li>master上更新数据，slave1和slave2都可以同步</li><li>关闭slave1，再次更新master数据，slave2不能同步</li><li>启动slave1后，slave1和slave2又再次同步了数据</li></ul></li></ol><h4 id="㈡-M1-M2"><a href="#㈡-M1-M2" class="headerlink" title="㈡ M1-M2"></a>㈡ M1-M2</h4><ol><li>配置和M-S一样，再互换角色配置同步</li><li>测试验证：M1写数据M2同步；M2写数据M1同步</li></ol><h3 id="4、复制总结"><a href="#4、复制总结" class="headerlink" title="4、复制总结"></a>4、复制总结</h3><p>​        上面的复制架构&#x3D;&#x3D;默认都是异步&#x3D;&#x3D;的，也就是主库将binlog日志发送给从库，这一动作就结束了，并&#x3D;&#x3D;不会验证从库是否接受完毕&#x3D;&#x3D;。这样可以提供&#x3D;&#x3D;最佳的性能&#x3D;&#x3D;。但是同时也带来了很高的风险，当主服务器或者从服务器发生故障时，极有可能从服务器没有接到主服务器发过来的binglog日志，这样就会&#x3D;&#x3D;导致主从数据不一致&#x3D;&#x3D;，甚至导致数据丢失。为了解决该问题，mysql5.5引入了&#x3D;&#x3D;半同步复制模式。&#x3D;&#x3D;</p><h3 id="5、半同步复制"><a href="#5、半同步复制" class="headerlink" title="5、半同步复制"></a>5、半同步复制</h3><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-17-06-%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%A4%8D%E5%88%B6-e44484.png" alt="半同步复制"></p><p>所谓的半同步复制就是master每commit一个事务(简单来说就是做一个改变数据的操作）,要确保slave接受完主服务器发送的binlog日志文件&#x3D;&#x3D;并写入到自己的中继日志relay log里&#x3D;&#x3D;，然后会给master信号，告诉对方已经接收完毕，这样master才能把事物成功&#x3D;&#x3D;commit&#x3D;&#x3D;。这样就保证了master-slave的&#x3D;&#x3D;数据绝对的一致&#x3D;&#x3D;（但是以牺牲&#x3D;&#x3D;master的性能为代价&#x3D;&#x3D;).但等待时间也是可以调整的。</p><h4 id="㈠-准备M-S复制架构"><a href="#㈠-准备M-S复制架构" class="headerlink" title="㈠ 准备M-S复制架构"></a>㈠ 准备M-S复制架构</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自己准备完成</span><br></pre></td></tr></table></figure><h4 id="㈡-半同步复制配置步骤"><a href="#㈡-半同步复制配置步骤" class="headerlink" title="㈡ 半同步复制配置步骤"></a>㈡ 半同步复制配置步骤</h4><h5 id="①-安装插件"><a href="#①-安装插件" class="headerlink" title="① 安装插件"></a>① 安装插件</h5><p>插件存放目录：&#96;&#96;$basedir&#x2F;lib&#x2F;plugin&#x2F;&#96;</p><ul><li>master上安装插件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; install plugin rpl_semi_sync_master soname <span class="string">&#x27;semisync_master.so&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br><span class="line">查看是否安装成功</span><br><span class="line">mysql&gt; show global variables like <span class="string">&#x27;rpl_semi_sync%&#x27;</span>;</span><br><span class="line">+<span class="literal">------------------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Variable_name                      | Value |</span><br><span class="line">+<span class="literal">------------------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| rpl_semi_sync_master_enabled       | OFF   |</span><br><span class="line">是否启用master的半同步复制</span><br><span class="line">| rpl_semi_sync_master_timeout       | <span class="number">10000</span> |</span><br><span class="line">默认主等待从返回信息的超时间时间，<span class="number">10</span>秒。动态可调</span><br><span class="line">| rpl_semi_sync_master_trace_level   | <span class="number">32</span>    |</span><br><span class="line">用于开启半同步复制模式时的调试级别，默认是<span class="number">32</span> </span><br><span class="line">| rpl_semi_sync_master_wait_no_slave | ON    |</span><br><span class="line">是否允许每个事物的提交都要等待slave的信号.on为每一个事物都等待，off则表示slave追赶上后，也不会开启半同步模式，需要手动开启</span><br><span class="line">+<span class="literal">------------------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>slave上安装插件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; install plugin rpl_semi_sync_slave soname <span class="string">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class="line">mysql&gt; show global variables like <span class="string">&#x27;rpl_semi_sync%&#x27;</span>;</span><br><span class="line">+<span class="literal">---------------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+<span class="literal">---------------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| rpl_semi_sync_slave_enabled     | OFF   |   slave是否启用半同步复制</span><br><span class="line">| rpl_semi_sync_slave_trace_level | <span class="number">32</span>    |</span><br><span class="line">+<span class="literal">---------------------------------</span>+<span class="literal">-------</span>+</span><br></pre></td></tr></table></figure><h5 id="②-激活半同步复制"><a href="#②-激活半同步复制" class="headerlink" title="② 激活半同步复制"></a>② 激活半同步复制</h5><ul><li>master上</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  <span class="built_in">set</span> global rpl_semi_sync_master_enabled =on;</span><br><span class="line"></span><br><span class="line">mmysql&gt; show global status like <span class="string">&#x27;rpl_semi_sync%&#x27;</span>;</span><br><span class="line">+<span class="literal">--------------------------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Variable_name                              | Value |</span><br><span class="line">+<span class="literal">--------------------------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Rpl_semi_sync_master_clients               | <span class="number">1</span>     |</span><br><span class="line">有一个从服务器启用半同步复制</span><br><span class="line">| Rpl_semi_sync_master_net_avg_wait_time     | <span class="number">0</span>     |</span><br><span class="line">master等待slave回复的平均等待时间。单位毫秒</span><br><span class="line">| Rpl_semi_sync_master_net_wait_time         | <span class="number">0</span>     |</span><br><span class="line">master总的等待时间。单位毫秒</span><br><span class="line">| Rpl_semi_sync_master_net_waits             | <span class="number">0</span>     |</span><br><span class="line">master等待slave回复的总的等待次数</span><br><span class="line">| Rpl_semi_sync_master_no_times              | <span class="number">0</span>     |</span><br><span class="line">master关闭半同步复制的次数</span><br><span class="line">| Rpl_semi_sync_master_no_tx                 | <span class="number">0</span>     |</span><br><span class="line">表示从服务器确认的不成功提交的数量</span><br><span class="line">| Rpl_semi_sync_master_status                | ON    |</span><br><span class="line">标记master现在是否是半同步复制状态</span><br><span class="line">| Rpl_semi_sync_master_timefunc_failures     | <span class="number">0</span>     |</span><br><span class="line">master调用时间（如gettimeofday())失败的次数</span><br><span class="line">| Rpl_semi_sync_master_tx_avg_wait_time      | <span class="number">0</span>     |</span><br><span class="line">master花在每个事务上的平均等待时间</span><br><span class="line">| Rpl_semi_sync_master_tx_wait_time          | <span class="number">0</span>     |</span><br><span class="line">master花在事物上总的等待时间</span><br><span class="line">| Rpl_semi_sync_master_tx_waits              | <span class="number">0</span>     |</span><br><span class="line">master事物等待次数</span><br><span class="line">| Rpl_semi_sync_master_wait_pos_backtraverse | <span class="number">0</span>     |</span><br><span class="line">后来的先到了，而先来的还没有到的次数</span><br><span class="line">| Rpl_semi_sync_master_wait_sessions         | <span class="number">0</span>     |</span><br><span class="line">当前有多少个session因为slave回复而造成等待</span><br><span class="line">| Rpl_semi_sync_master_yes_tx                | <span class="number">0</span>     |</span><br><span class="line">表示从服务器确认的成功提交数量</span><br><span class="line">+<span class="literal">--------------------------------------------</span>+<span class="literal">-------</span>+</span><br></pre></td></tr></table></figure><ul><li>slave上</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global rpl_semi_sync_slave_enabled=on;</span><br><span class="line">mysql&gt; show global status like <span class="string">&#x27;rpl_semi_sync%&#x27;</span>;</span><br><span class="line">+<span class="literal">----------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Variable_name              | Value |</span><br><span class="line">+<span class="literal">----------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Rpl_semi_sync_slave_status | ON    |</span><br><span class="line">+<span class="literal">----------------------------</span>+<span class="literal">-------</span>+</span><br></pre></td></tr></table></figure><h5 id="③-重启slave的IO线程"><a href="#③-重启slave的IO线程" class="headerlink" title="③ 重启slave的IO线程"></a>③ 重启slave的IO线程</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; stop slave IO_THREAD;</span><br><span class="line">mysql&gt; <span class="built_in">start</span> slave IO_THREAD;</span><br></pre></td></tr></table></figure><h5 id="④-测试验证"><a href="#④-测试验证" class="headerlink" title="④ 测试验证"></a>④ 测试验证</h5><p>&#x3D;&#x3D;原理：&#x3D;&#x3D;</p><p>当slave从库的IO_Thread 线程将binlog日志接受完毕后，要给master一个确认，如果超过10s未收到slave的接收确认信号，那么就会自动转换为传统的异步复制模式。</p><p>1）master插入一条记录，查看slave是否有成功返回</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into a values (<span class="number">3</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show global status like <span class="string">&#x27;rpl_semi_sync%_yes_tx&#x27;</span>; </span><br><span class="line">+<span class="literal">-----------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Variable_name               | Value |</span><br><span class="line">+<span class="literal">-----------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Rpl_semi_sync_master_yes_tx |  <span class="number">1</span>    |</span><br><span class="line">表示这次事物成功从slave返回一次确认信号</span><br><span class="line">+<span class="literal">-----------------------------</span>+<span class="literal">-------</span>+</span><br></pre></td></tr></table></figure><p>2）slave上模拟故障查看返回时间</p><p>当slave挂掉后，master这边更改操作</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service stop mysql</span></span><br><span class="line">或者直接停止slave的IO_thread线程</span><br><span class="line">mysql&gt; stop slave io_thread;</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into a values (<span class="number">4</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">10.00</span> sec)</span><br><span class="line">这次插入一个值需要等待<span class="number">10</span>秒（默认的等待时间)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into a values (<span class="number">5</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.01</span> sec)</span><br><span class="line">现在自动转成了原来的异步模式</span><br></pre></td></tr></table></figure><p>3）再次启动slave，查看同步模式</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like <span class="string">&#x27;rpl_semi_sync%&#x27;</span>;</span><br><span class="line">+<span class="literal">----------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Variable_name              | Value |</span><br><span class="line">+<span class="literal">----------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">| Rpl_semi_sync_slave_status | OFF    |</span><br><span class="line">+<span class="literal">----------------------------</span>+<span class="literal">-------</span>+</span><br><span class="line">如需要再次半同步复制，则按照以上步骤重新开启就可以</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global rpl_semi_sync_slave_enabled=on;</span><br><span class="line">mysql&gt; stop slave IO_THREAD;</span><br><span class="line">mysql&gt; <span class="built_in">start</span> slave IO_THREAD;</span><br><span class="line"></span><br><span class="line">或者可以将该参数写入到配置文件中：</span><br><span class="line">master：rpl_semi_sync_master_enabled=<span class="number">1</span></span><br><span class="line">slave：rpl_semi_sync_slave_enabled=<span class="number">1</span>  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、测试结果</p><p>5、master需要等到slave确认后才能提交，如果等不到确认消息，master等待10s种后自动变成异步同步;slave启起来后，master上改变的数据还是会自动复制过来，数据又回到一致。</p><p>6、等待时间可以在master上动态调整，如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global rpl_semi_sync_master_timeout=<span class="number">3600000</span>;</span><br><span class="line">mysql&gt; show global variables like <span class="string">&#x27;rpl_semi_sync%&#x27;</span>;</span><br><span class="line">+<span class="literal">------------------------------------</span>+<span class="literal">---------</span>+</span><br><span class="line">| Variable_name                      | Value   |</span><br><span class="line">+<span class="literal">------------------------------------</span>+<span class="literal">---------</span>+</span><br><span class="line">| rpl_semi_sync_master_enabled       | ON      |</span><br><span class="line">| rpl_semi_sync_master_timeout       | <span class="number">3600000</span> |</span><br><span class="line">| rpl_semi_sync_master_trace_level   | <span class="number">32</span>      |</span><br><span class="line">| rpl_semi_sync_master_wait_no_slave | ON      |</span><br><span class="line">+<span class="literal">------------------------------------</span>+<span class="literal">---------</span>+</span><br></pre></td></tr></table></figure><h5 id="⑤-卸载插件"><a href="#⑤-卸载插件" class="headerlink" title="⑤ 卸载插件"></a>⑤ 卸载插件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">select</span> plugin_name,load_option from information_schema.plugins;</span><br><span class="line">mysql&gt; uninstall plugin plugin_name;</span><br></pre></td></tr></table></figure><h3 id="6、经验值分享"><a href="#6、经验值分享" class="headerlink" title="6、经验值分享"></a>6、经验值分享</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-17-01-%E5%B8%B8%E8%A7%81%E5%A4%8D%E5%88%B6%E9%94%99%E8%AF%AF1-1a2d14.png" alt="常见复制错误1"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-16-59-%E5%B8%B8%E8%A7%81%E5%A4%8D%E5%88%B6%E9%94%99%E8%AF%AF2-9b0dc4.png" alt="常见复制错误2"></p><h3 id="7、扩展补充"><a href="#7、扩展补充" class="headerlink" title="7、扩展补充"></a>7、扩展补充</h3><ul><li>跟复制相关的文件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">master.info</span><br><span class="line">用于保存slave连接至master的相关信息，包括服务器地址，用户名，密码等</span><br><span class="line">relay<span class="literal">-log</span>.info</span><br><span class="line">保存在当前的slave节点上已经复制的当前二进制日志和本地relay log日志的对应关系</span><br></pre></td></tr></table></figure><ul><li>复制的监控和维护</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">purge 命令 </span><br><span class="line">    mysql&gt; purge binary logs to <span class="string">&#x27;mysql-bin.000008&#x27;</span>; </span><br><span class="line">    指明这个二进制文件之前的所有的文件都会被清理</span><br><span class="line"></span><br><span class="line">    mysql&gt; purge binary logs before <span class="string">&#x27;2017-04-23 20:46:26&#x27;</span>; </span><br><span class="line">    指明二进制日志文件中这个时间点之前的所有的事件都会被清理</span><br><span class="line"></span><br><span class="line">监控操作</span><br><span class="line">    mysql&gt; show master status; 显示主节点正在写哪个二进制日志文件</span><br><span class="line">    mysql&gt; show binlog events; 显示在二进制文件中记录了哪些信息</span><br><span class="line">    mysql&gt; show binary logs ; 显示记录了哪些二进制日志文件</span><br><span class="line">    mysql&gt; show slave status; 显示从服务器的状态</span><br><span class="line">    mysql&gt; show processlist; 显示当前启用的线程</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> MYSQL </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程检测与控制</title>
      <link href="/2024/06/25/Linux%E8%BF%9B%E7%A8%8B%E6%A3%80%E6%B5%8B%E4%B8%8E%E7%A9%BA%E5%80%BC/"/>
      <url>/2024/06/25/Linux%E8%BF%9B%E7%A8%8B%E6%A3%80%E6%B5%8B%E4%B8%8E%E7%A9%BA%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux进程检测与控制"><a href="#Linux进程检测与控制" class="headerlink" title="Linux进程检测与控制"></a>Linux进程检测与控制</h1><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><p>1、了解进程和程序的关系</p><p>2、了解进程的特点</p><p>3、能够使用top动态查看进程信息</p><p>4、能够使用ps静态查看进程信息</p><p>5、能够使用kill命令给进程发送信号</p><p>6、能够调整进程的优先级（扩展）</p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​        在运维的日常工作中，监视系统的运行状况是每天例行的工作，在 Windows 中我们可以很直观的使用”任务管理器”来进行进程管理，了解系统的运行状态</p><p>通常，使用”任务管理器”主要有 3 个目的：</p><ol><li>利用”应用程序”和”进程”标签来査看系统中到底运行了哪些程序和进程；</li><li>利用”性能”和”用户”标签来判断服务器的健康状态；</li><li>在”应用程序”和”进程”标签中强制中止任务和进程；</li></ol><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-09-jincheng04-6c9da3.jpg" style="width:960px" /><p>​        </p><p>​         在工作中，我们很少会用到Linux的图形化界面，更多时候会使用命令进行进程管理，但是进程管理的主要目的是一样的，即：</p><p>​    <strong>查看系统中运行的程序和进程</strong></p><p>​    <strong>判断服务器的健康状态</strong></p><p>​    <strong>停止不需要的进程。</strong></p><h1 id="一、相关概念"><a href="#一、相关概念" class="headerlink" title="一、相关概念"></a>一、相关概念</h1><h2 id="1、什么是进程和程序？"><a href="#1、什么是进程和程序？" class="headerlink" title="1、什么是进程和程序？"></a>1、什么是进程和程序？</h2><p>​        <strong>进程</strong>是正在执行的一个程序或命令，每个进程都是一个运行的实体，并占用一定的系统资源。<strong>程序</strong>是人使用计算机语言编写的可以实现特定目标或解决特定问题的代码集合。</p><p>​        简单来说，程序是人使用计算机语言编写的，可以实现一定功能，并且可以执行的代码集合。进程是正在执行中的程序。</p><p><strong>举例</strong>：谷歌浏览器是一个程序，当我们打开谷歌浏览器，就会在系统中看到一个浏览器的进程，当程序被执行时，程序的代码都会被加载入内存，操作系统给这个进程分配一个 ID，称为 <strong>PID</strong>（进程 ID）。我们打开多个谷歌浏览器，就有多个浏览器子进程，但是这些进程使用的程序，都是chrome</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-10-jincheng06-5bd54e.jpg" style="width:960px" /><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-12-jincheng05-675113.jpg" style="width:960px" /><p>​    </p><h2 id="2、进程管理的内容"><a href="#2、进程管理的内容" class="headerlink" title="2、进程管理的内容"></a>2、进程管理的内容</h2><p>​        进程查看，通过查看，判断健康状态</p><p>​        进程终止</p><p>​        进程优先级控制</p><h1 id="二、进程管理命令"><a href="#二、进程管理命令" class="headerlink" title="二、进程管理命令"></a>二、进程管理命令</h1><p>工作场景：</p><p>​        小黑入职到一家公司，接到的第一项任务，就是监控生产服务器的性能，提到服务器性能，我们首先想到的就是CPU，内存和磁盘。</p><h2 id="1、top查看-CPU使用情况"><a href="#1、top查看-CPU使用情况" class="headerlink" title="1、top查看 CPU使用情况"></a>1、top查看 CPU使用情况</h2><p>命令：top</p><p>作用：查看服务器的进程占用的资源（100%使用）</p><p>语法：# top （动态显示）</p><p>交换操作快捷键：</p><p>M（大写）：表示将结果按照内存（MEM）从高到低进行降序排列；</p><p>P（大写）：，表示将结果按照CPU 使用率从高到低进行降序排列；</p><p>1 ：当服务器拥有多个cpu 的时候可以使用“1”快捷键来切换是否展示显示各个cpu 的详细信息；</p><p>q：退出</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法一：top</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#top</span></span><br><span class="line">含义：查看CPU使用情况</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-18-top01-d3afdc.jpg" style="width:960px" /><h3 id="1）系统整体信息："><a href="#1）系统整体信息：" class="headerlink" title="1）系统整体信息："></a>1）系统整体信息：</h3><h4 id="①第一行"><a href="#①第一行" class="headerlink" title="①第一行"></a>①第一行</h4><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-09-04-top02-6e443e.jpg" style="width:960px" /><table><thead><tr><th>内 容</th><th>说 明</th></tr></thead><tbody><tr><td>10:12:28</td><td>系统当前时间</td></tr><tr><td>up 13:05</td><td>系统的运行时间.本机己经运行 13 小时 05 分钟</td></tr><tr><td>3 users</td><td>当前登录了三个用户</td></tr><tr><td>load average: 0.00,0.01，0.05</td><td>系统在之前 1 分钟、5 分钟、15 分钟的平均负载。如果 CPU 是单核的，则这个数值超过 1 就是高负载：如果 CPU 是四核的，则这个数值超过 4 就是高负载</td></tr></tbody></table><blockquote><p>扩展：如何获取CPU的总核心数？</p><p>grep ‘core id’ &#x2F;proc&#x2F;cpuinfo |sort -u |wc -l</p></blockquote><h4 id="②第二行"><a href="#②第二行" class="headerlink" title="②第二行"></a>②第二行</h4><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-09-03-top03-da20d2.jpg" style="width:960px" /><table><thead><tr><th>Tasks:   230 total</th><th>系统中的进程总数</th></tr></thead><tbody><tr><td>1 running</td><td>正在运行的进程数</td></tr><tr><td>229 sleeping</td><td>睡眠的进程数</td></tr><tr><td>0 stopped</td><td>正在停止的进程数</td></tr><tr><td>0 zombie</td><td>僵尸进程数。如果不是   0，则需要手工检查僵尸进程</td></tr></tbody></table><h4 id="③第三行"><a href="#③第三行" class="headerlink" title="③第三行"></a>③第三行</h4><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-09-01-top04-265cf0.jpg" style="width:960px" /><table><thead><tr><th>内 容</th><th>说 明</th></tr></thead><tbody><tr><td>Cpu(s): 0.1 %us</td><td>用户模式占用的   CPU 百分比</td></tr><tr><td>0.1%sy</td><td>系统模式占用的   CPU 百分比</td></tr><tr><td>0.0%ni</td><td>改变过优先级的用户进程占用的   CPU 百分比</td></tr><tr><td>99.7%id</td><td>idle缩写，空闲   CPU 占用的 CPU 百分比</td></tr><tr><td>0.1%wa</td><td>等待输入&#x2F;输出的进程占用的   CPU 百分比</td></tr><tr><td>0.0%hi</td><td>硬中断请求服务占用的   CPU 百分比</td></tr><tr><td>0.1%si</td><td>软中断请求服务占用的   CPU 百分比</td></tr><tr><td>0.0%st</td><td>st（steal   time）意为虚拟时间百分比，就是当有虚拟机时，虚拟 CPU 等待实际 CPU 的时间百分比</td></tr></tbody></table><h4 id="问题：如果我的机器有4核CPU，我想查看每一核心分别的负载情况怎能办？"><a href="#问题：如果我的机器有4核CPU，我想查看每一核心分别的负载情况怎能办？" class="headerlink" title="问题：如果我的机器有4核CPU，我想查看每一核心分别的负载情况怎能办？"></a>问题：如果我的机器有4核CPU，我想查看每一核心分别的负载情况怎能办？</h4><p>答：交换快捷键 “1”</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-58-top10-b0be30.jpg" style="width:960px" /><h4 id="④第四行"><a href="#④第四行" class="headerlink" title="④第四行"></a>④第四行</h4><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-57-top05-d3b5c8.jpg" style="width:960px" /><table><thead><tr><th>内 容</th><th>说 明</th></tr></thead><tbody><tr><td>Mem: 1863252 total</td><td>物理内存的总量，单位为KB</td></tr><tr><td>829960 used</td><td>己经使用的物理内存数量</td></tr><tr><td>68352 free</td><td>空闲的物理内存数量。我们使用的是虚拟机，共分配了 628MB内存，所以只有53MB的空闲内存</td></tr><tr><td>96490 buff&#x2F;cache</td><td>作为缓冲的内存数量</td></tr></tbody></table><h4 id="⑤第五行"><a href="#⑤第五行" class="headerlink" title="⑤第五行"></a>⑤第五行</h4><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-55-top06-3d38bf.jpg" style="width:960px" /><table><thead><tr><th>内 容</th><th>说 明</th></tr></thead><tbody><tr><td>Swap: 2097148 total</td><td>交换分区（虚拟内存）的总大小</td></tr><tr><td>3336 used</td><td>已经使用的交换分区的大小</td></tr><tr><td>2093812 free</td><td>空闲交换分区的大小</td></tr><tr><td>622420 avail Mem</td><td>可用内存</td></tr></tbody></table><p>​        我们通过 top 命令的整体信息部分，就可以判断服务器的健康状态。如果 1 分钟、5 分钟、15 分钟的平均负载高于CPU核数，说明系统压力较大。如果物理内存的空闲内存过小，则也证明系统压力较大。</p><p>问题：根据以上信息，目前我们的系统压力如何？</p><p>问题：如果我们发现CPU负载过大，接下来怎么办？</p><h3 id="2）进程信息："><a href="#2）进程信息：" class="headerlink" title="2）进程信息："></a>2）进程信息：</h3><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-53-top07-505e32.jpg" style="width:960px" /><table><thead><tr><th>PID</th><th>进程的 ID。</th></tr></thead><tbody><tr><td>USER</td><td>该进程所属的用户。</td></tr><tr><td>PR</td><td>优先级，数值越小优先级越高。</td></tr><tr><td>NI</td><td>优先级，数值越小优先级越高。</td></tr><tr><td>VIRT</td><td>该进程使用的虚拟内存的大小，单位为 KB。</td></tr><tr><td>RES</td><td>该进程使用的物理内存的大小，单位为 KB。</td></tr><tr><td>SHR</td><td>共享内存大小，单位为 KB。计算一个进程实际使用的内存 &#x3D; 常驻内存（RES）- 共享内存（SHR）</td></tr><tr><td>S</td><td>进程状态。其中S 表示睡眠，R 表示运行</td></tr><tr><td>%CPU</td><td>该进程占用 CPU 的百分比。</td></tr><tr><td>%MEM</td><td>该进程占用内存的百分比。</td></tr><tr><td>TIME+</td><td>该进程共占用的 CPU 时间。</td></tr><tr><td>COMMAND</td><td>进程名</td></tr></tbody></table><h4 id="问题：如果我们发现CPU负载过大，接下来怎么办？"><a href="#问题：如果我们发现CPU负载过大，接下来怎么办？" class="headerlink" title="问题：如果我们发现CPU负载过大，接下来怎么办？"></a>问题：如果我们发现CPU负载过大，接下来怎么办？</h4><p>答：查看占用CPU最多的进程</p><h4 id="问题：如何查看占用CPU最多的进程？"><a href="#问题：如何查看占用CPU最多的进程？" class="headerlink" title="问题：如何查看占用CPU最多的进程？"></a>问题：如何查看占用CPU最多的进程？</h4><p>答：交互操作快捷键P，P（大写）：，表示将结果按照CPU 使用率从高到低进行降序排列</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-51-top08-366eb5.jpg" style="width:960px" /><h4 id="问题：如果我们发现内存可用量很小，接下来怎么办？"><a href="#问题：如果我们发现内存可用量很小，接下来怎么办？" class="headerlink" title="问题：如果我们发现内存可用量很小，接下来怎么办？"></a>问题：如果我们发现内存可用量很小，接下来怎么办？</h4><p>答：查看占用内存最多的进程，使用交互快捷键M（大写）：表示将结果按照内存（MEM）从高到低进行降序排列</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-49-top09-4a05e0.jpg" style="width:960px" /><h4 id="问题：当我们查看完系统状态，需要做什么？"><a href="#问题：当我们查看完系统状态，需要做什么？" class="headerlink" title="问题：当我们查看完系统状态，需要做什么？"></a>问题：当我们查看完系统状态，需要做什么？</h4><p>答：退出，使用q，按键盘上的q，就会回到#提示符的状态。</p><h2 id="2、free查看内存使用情况"><a href="#2、free查看内存使用情况" class="headerlink" title="2、free查看内存使用情况"></a>2、free查看内存使用情况</h2><p>命令：free</p><p>作用：查看内存使用情况</p><p>语法：#free  -m </p><p>选项：-m 表示以mb为单位查看（1g &#x3D; 1024mb，1mb &#x3D; 1024kb）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法一：free <span class="literal">-m</span></span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#free -m</span></span><br><span class="line">含义：查看内存使用情况</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-09-25-free01-7a182d.jpg" style="width:960px" /><p>​    和Centos6相比，buffer和cached被合成一组，加入了一个available。</p><p>​    关于此available，即系统可用内存，用户不需要去计算buffer&#x2F;cache，即可以看到还有多少内存可用，更加简单直观</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">1</span>行Mem数据：</span><br><span class="line">total 内存总数: <span class="number">1819</span></span><br><span class="line">used 已经使用的内存数: <span class="number">774</span></span><br><span class="line">free 空闲的内存数: <span class="number">152</span></span><br><span class="line">shared 共享内存数: <span class="number">77</span></span><br><span class="line">buff/Cache块设备缓存区内存数: <span class="number">892</span></span><br><span class="line">available可用内存: <span class="number">746</span></span><br><span class="line"></span><br><span class="line">第<span class="number">2</span>行数据是Swap交换分区，也就是我们通常所说的虚拟内存。可以在内存不够使用的情况下当临时内存来使用，交换分区并不是越大越好，一般话它就等同于实际内存的大小。</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="3、df查看磁盘"><a href="#3、df查看磁盘" class="headerlink" title="3、df查看磁盘"></a>3、df查看磁盘</h2><p>命令：df</p><p>作用：查看磁盘的空间(disk  free)</p><p>语法：# df   [-h]</p><p>选项：-h表示可读性较高的形式展示大小</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-45-df01-33f8b5.jpg" style="width:960px" /><p>这几列依次是：</p><table><thead><tr><th>Filesystem</th><th>磁盘名称</th></tr></thead><tbody><tr><td>Size</td><td>总大小</td></tr><tr><td>Used</td><td>被使用的大小</td></tr><tr><td>Avail</td><td>剩余大小</td></tr><tr><td>Use%</td><td>使用百分比</td></tr><tr><td>Mounted on</td><td>挂载路径（相当于Windows 的磁盘符）</td></tr></tbody></table><p>回到开始的工作场景：</p><p>​        小黑入职到一家公司，接到的第一项任务，就是监控生产服务器的性能，提到服务器性能，我们首先想到的就是CPU，内存和磁盘。</p><h4 id="问题：小黑具体应该如何监控CPU，内存和磁盘？"><a href="#问题：小黑具体应该如何监控CPU，内存和磁盘？" class="headerlink" title="问题：小黑具体应该如何监控CPU，内存和磁盘？"></a>问题：小黑具体应该如何监控CPU，内存和磁盘？</h4><p>总结：CPU：</p><p>​           内存：</p><p>​           磁盘：</p><h4 id="作业1：课下将总结的部分落实到笔记"><a href="#作业1：课下将总结的部分落实到笔记" class="headerlink" title="作业1：课下将总结的部分落实到笔记"></a>作业1：课下将总结的部分落实到笔记</h4><h2 id="4、ps查看进程命令"><a href="#4、ps查看进程命令" class="headerlink" title="4、ps查看进程命令"></a>4、ps查看进程命令</h2><p>命令：ps（process show进程显示）</p><p>语法：ps [参数选项]</p><p>作用：主要是查看服务器的进程信息</p><p>选项含义：</p><p>-e：等价于“-A”，表示列出全部（all）的进程</p><p>-f :   表示full，显示全部的列（显示全字段）</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-43-ps01-d1fba8.jpg" style="width:960px" /><table><thead><tr><th>UID</th><th>该进程执行的用户ID</th></tr></thead><tbody><tr><td>PID</td><td>进程ID</td></tr><tr><td>PPID</td><td>该进程的父级进程ID，如果找不到，则该进程就被称之为僵尸进程（Parent Process ID）</td></tr><tr><td>C</td><td>Cpu的占用率，其形式是百分数</td></tr><tr><td>STIME</td><td>进程的启动时间</td></tr><tr><td>TTY</td><td>终端设备，发起该进程的设备识别符号，如果显示“?”则表示该进程并不是由终端设备发起</td></tr><tr><td>TIME</td><td>进程实际使用CPU的时间</td></tr><tr><td>CMD</td><td>该进程的名称或者对应的路径</td></tr></tbody></table><p>工作场景</p><p>​        小黑用学到的命令，发现某个进程占用CPU很高，希望进一步查看这个简称的信息。</p><p>​        ps -ef 会列出全部进程，但是我们发现进程非常多，我们很难找到自己想要看的进程。这里需要使用过滤命令grep，来过滤掉我们不需要的信息。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用法：<span class="built_in">ps</span> <span class="literal">-ef</span> |grep 想要看到的进程名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#ps -ef |grep crond</span></span><br><span class="line">含义：查看crond进程的详细情况</span><br><span class="line">注意：查询结果中，如果只有一条则表示没查到对应的进程（这<span class="number">1</span> 条表示刚才<span class="built_in">ps</span> 指令的自身）。只有查到的结果多余<span class="number">1</span> 条，才表示有对应的进程。</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-42-ps03-02b7bb.jpg" style="width:960px" /><blockquote><p>补充：针对上述情况的优化：如果没有对应的进程，则什么都不显示。</p></blockquote><p>思路：在现有的基础之上再次使用管道去处理下（-v 选项表示“排除”）。</p><p>扩展：ps  aux  BSD格式命令，注意没有横杠”-“</p><p>Unix有很多分支，目前主流的显示风格分为System V和BSD，我们之前使用的ps -ef属于system V风格，ps aux是BSD风格，大家可以理解为两种风格只是显示不同。</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-39-ps04-5bb04f.jpg" style="width:960px" /><p>USER：该 process 属于哪个使用者账号<br>PID ：该 process 的ID<br>%CPU：该 process 使用掉的 CPU 资源百分比<br>%MEM：该 process 所占用的物理内存百分比<br>VSZ ：该 process 使用掉的虚拟内存量 (Kbytes)<br>RSS ：该 process 占用的固定的内存量 (Kbytes)<br>TTY ：该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts&#x2F;0 等等的，则表示为由网络连接进主机的程序。<br>STAT：该程序目前的状态，主要的状态有<br>​    R ：该程序目前正在运作，或者是可被运作<br>​    S ：该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。<br>​    T ：该程序目前正在侦测或者是停止了<br>​    Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态<br>START：该 process 被触发启动的时间<br>TIME ：该 process 实际使用 CPU 运作的时间<br>COMMAND：该程序的实际指令</p><h2 id="5、netstat查看进程网络访问"><a href="#5、netstat查看进程网络访问" class="headerlink" title="5、netstat查看进程网络访问"></a>5、netstat查看进程网络访问</h2><p>命令：netstat</p><p>作用：查看网络连接状态</p><p>语法：netstat   -tnlp</p><p>选项：-t：表示只列出tcp 协议的连接；</p><p>​   -n：表示将地址从字母组合转化成ip 地址，将协议转化成端口号来显示；</p><p>​   -l ：表示过滤出”state（状态）”列中其值为LISTEN（监听）的连接；</p><p>​   -p：表示显示发起连接的进程pid 和进程名称；</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-37-netstat02-256e37.jpg" style="width:960px" /><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Protocol：协议（tcp、upd、http、https、icmp、ssh…）</span><br><span class="line">Receive：接收</span><br><span class="line">Send：发送</span><br><span class="line">Local Address:本地地址</span><br><span class="line">Foreign：远程地址</span><br><span class="line">State：状态，LISTEN表示侦听来自远方的TCP端口的连接请求</span><br><span class="line">PID/Program name：进程ID和程序名</span><br></pre></td></tr></table></figure><h2 id="6、kill关闭进程"><a href="#6、kill关闭进程" class="headerlink" title="6、kill关闭进程"></a>6、kill关闭进程</h2><p>命令：kill</p><p>语法：kill [信号] PID</p><p>作用：kill 命令会向操作系统内核发送一个信号（多是终止信号）和目标进程的 PID，然后系统内核根据收到的信号类型，对指定进程进行相应的操作</p><p>信号种类：</p><table><thead><tr><th>信号编号</th><th>含义</th></tr></thead><tbody><tr><td>9</td><td>杀死进程，即强制结束进程。</td></tr><tr><td>15</td><td>正常结束进程，是 kill   命令的默认信号。</td></tr></tbody></table><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">用法一：<span class="built_in">kill</span> [信号编号] PID</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#ps -ef |grep crond</span></span><br><span class="line">查询crond进程信息，想知道它的PID，以便使用<span class="built_in">kill</span>终止进程</span><br><span class="line"></span><br><span class="line"><span class="comment">#kill 6925</span></span><br><span class="line">结束<span class="number">6925</span>的进程，这里使用默认信号，正常结束，如果强制结束，就是<span class="built_in">kill</span> <span class="literal">-9</span> <span class="number">6925</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ps -ef |grep crond</span></span><br><span class="line">查询crond进程信息,这次查询是为了确认crond进程是否被终止了，我们发现<span class="number">6925</span>进程已经没有了</span><br><span class="line"></span><br><span class="line"><span class="comment">#systemctl start crond</span></span><br><span class="line">使用前面学过的systemctl命令，重启crond服务</span><br><span class="line"></span><br><span class="line"><span class="comment">#ps -ef |grep crond</span></span><br><span class="line">查询crond进程信息,这次查询是为了确认crond进程已经重新启动了，我们看到多了一个<span class="number">32934</span>的进程，表明crond已经启动，并且进程ID变化了，这是一个新的进程</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-33-ps05-bd0ee7.jpg" style="width:960px" /><blockquote><p>备注：在互联网中，经常看到kill  -9  进程PID，强制杀死某个进程，kill -l</p></blockquote><h2 id="7、killall关闭进程"><a href="#7、killall关闭进程" class="headerlink" title="7、killall关闭进程"></a>7、killall关闭进程</h2><p>命令：killall</p><p>作用：通过程序的&#x3D;&#x3D;进程名&#x3D;&#x3D;来杀死&#x3D;&#x3D;一类&#x3D;&#x3D;进程</p><p>语法：# killall  [信号] 进程名称</p><p>信号种类：和kill相同，这里不再重复</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用法一：killall [信号编号] 进程名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#ps -ef |grep crond</span></span><br><span class="line">查询crond进程信息，想知道它的进程名，以便使用killall终止进程</span><br><span class="line"></span><br><span class="line"><span class="comment">#kill 6925</span></span><br><span class="line">结束<span class="number">6925</span>的进程，这里使用默认信号，正常结束，如果强制结束，就是<span class="built_in">kill</span> <span class="literal">-9</span> <span class="number">6925</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-33-ps05-bd0ee7.jpg" style="width:960px" /><h1 id="三、进程优先级"><a href="#三、进程优先级" class="headerlink" title="三、进程优先级"></a>三、进程优先级</h1><h2 id="1、什么是进程优先级？"><a href="#1、什么是进程优先级？" class="headerlink" title="1、什么是进程优先级？"></a>1、什么是进程优先级？</h2><p>​        Linux是一个多用户、多任务的操作系统，系统中通常运行着非常多的进程。哪些进程先运行，哪些进程后运行，就由进程优先级来控制</p><h2 id="2、查看进程优先级"><a href="#2、查看进程优先级" class="headerlink" title="2、查看进程优先级"></a>2、查看进程优先级</h2><p>PR  优先级，数值越小优先级越高。<br>NI  优先级，数值越小优先级越高。</p><p>问题：这两个数值是在哪里看到的？</p><p>答：</p><h2 id="3、调整进程优先级"><a href="#3、调整进程优先级" class="headerlink" title="3、调整进程优先级"></a>3、调整进程优先级</h2><h4 id="①-调整-正在运行-进程的优先级-renice"><a href="#①-调整-正在运行-进程的优先级-renice" class="headerlink" title="① 调整&#x3D;&#x3D;正在运行&#x3D;&#x3D;进程的优先级(renice)"></a>① 调整&#x3D;&#x3D;正在运行&#x3D;&#x3D;进程的优先级(renice)</h4><h5 id="1）使用top按”r”来调整"><a href="#1）使用top按”r”来调整" class="headerlink" title="1）使用top按”r”来调整"></a>1）使用top按”r”来调整</h5><p>​      如果要改变某个进程的优先级，就要利用 “r” 交互命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">改变NICE<span class="literal">---</span>&gt;PR</span><br><span class="line">优先级的范围：</span><br><span class="line"><span class="literal">-20</span>——<span class="number">19</span>  数字越低，优先级越高，系统会按照更多的cpu时间给该进程</span><br><span class="line">注意：我们能够修改的只有 <span class="built_in">Ni</span> 的优先级，而不能修改 Pr 的优先级。</span><br></pre></td></tr></table></figure><p>步骤1：运行top命令，按r，会提示输入希望修改优先级的进程的PID，这里输入6451，表示想修改firewalld进程的优先级</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-31-youxianji01-b8d0dc.jpg" style="width:960px" /><p>步骤2：输入6451后回车，提示希望修改的具体数字，这个数字是从-20到19，这里输入5，数字越大，优先级别越低，所以，这里是降低了firewalld的优先级</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-29-youxianji02-dd8a9c.jpg" style="width:960px" /><p>步骤3：输入5后，按回车，会发现6451进程的NI, 从0变成了5，PR从20变成了25</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-28-youxianji03-2fa72d.jpg" style="width:960px" /><h5 id="2）命令行使用renice调整"><a href="#2）命令行使用renice调整" class="headerlink" title="2）命令行使用renice调整"></a>2）命令行使用renice调整</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令：renice</span><br><span class="line">语法：renice [<span class="type">NI</span>优先级设置的数字] 想调整的进程ID</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># renice -5 6451</span></span><br><span class="line">含义：将<span class="number">6451</span>进程的<span class="built_in">NI</span>优先级设置为<span class="literal">-5</span>，实际效果是提高了<span class="number">6451</span>进程的优先级</span><br><span class="line">注意：这里的<span class="literal">-5</span>代表设置成<span class="literal">-5</span>，不是所谓加减的关系，如果当前<span class="built_in">NI</span>的值是<span class="number">10</span>，当设置成<span class="literal">-5</span>后，<span class="built_in">NI</span>的值会变为<span class="literal">-5</span>.</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-26-youxianji04-f1b13d.jpg" style="width:960px" /><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-08-25-youxianji05-f8a3a8.jpg" style="width:960px" /><h4 id="②-程序启动时指定优先级-nice-，只能调整不在运行的程序。"><a href="#②-程序启动时指定优先级-nice-，只能调整不在运行的程序。" class="headerlink" title="② 程序启动时指定优先级(nice)，只能调整不在运行的程序。"></a>② 程序启动时指定优先级(nice)，只能调整不在运行的程序。</h4><p>步骤1：将程序停止</p><p>步骤2：启动并制定优先级</p><p>步骤3：确认优先级（查看优先级）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">命令：nice</span><br><span class="line">语法：nice [<span class="type">NI</span>优先级设置的数字] 想调整的进程名</span><br><span class="line">启动进程时，通常会继承父进程的 nice级别，默认为<span class="number">0</span></span><br><span class="line"><span class="comment">#ps -ef |grep crond</span></span><br><span class="line">含义：查看crond的进程信息</span><br><span class="line">目的：找出crond的PID，用于结束进程</span><br><span class="line"></span><br><span class="line"><span class="comment">#kill -9 crond的进程ID</span></span><br><span class="line">含义：结束crond的进程</span><br><span class="line">目的：nice只能修改不在运行的进程的优先级</span><br><span class="line"></span><br><span class="line"><span class="comment">#ps -ef |grep crond</span></span><br><span class="line">含义:查看crond的进程信息</span><br><span class="line">目的：确认crond进程是不是已经停止了</span><br><span class="line"></span><br><span class="line"><span class="comment">#nice -n -5 crond</span></span><br><span class="line">含义：启动crond进程，将<span class="built_in">NI</span>设置成<span class="literal">-5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#ps -ef |grep crond</span></span><br><span class="line">含义：查看crond的进程信息</span><br><span class="line">目的：找出crond的PID，用于查看此进程的优先级</span><br><span class="line"></span><br><span class="line"><span class="comment">#top -p crond的进程ID</span></span><br><span class="line">含义：使用TOP命令，只查看和crond进程相关的信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux命令 </tag>
            
            <tag> 进程检测与控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux自有服务和软件包</title>
      <link href="/2024/06/25/Linux%E8%87%AA%E6%9C%89%E6%9C%8D%E5%8A%A1%E5%92%8C%E8%BD%AF%E4%BB%B6%E5%8C%85/"/>
      <url>/2024/06/25/Linux%E8%87%AA%E6%9C%89%E6%9C%8D%E5%8A%A1%E5%92%8C%E8%BD%AF%E4%BB%B6%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>自有服务，即不需要用户独立去安装的软件的服务，而是当系统安装好之后就可以直接使用的服务（内置）</p><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><p>1、了解systemctl命令用途</p><p>2、掌握使用systemctl开启，关闭，重启服务</p><p>3、了解常见自有服务ntpd,firewalld,crond的作用</p><p>4、掌握ntpdate时间同步原理与实现</p><p>5、掌握防火墙的相关操作（添加和删除简单规则，开启，关闭防火墙）</p><p>6、了解源码包和二进制包的区别</p><p>7、掌握rpm包的卸载、安装以及更新操作</p><p>8、了解计划任务的作用</p><p>9、掌握计划任务的编辑</p><h1 id="一、自有服务概述"><a href="#一、自有服务概述" class="headerlink" title="一、自有服务概述"></a>一、自有服务概述</h1><p>​        服务是一些特定的进程，自有服务就是系统开机后就自动运行的一些进程，一旦客户发出请求，这些进程就自动为他们提供服务，windows系统中，把这些自动运行的进程，称为”服务”<br>​        举例：当我们使用SSH客户端软件连接linux的时候，我们的服务器为什么会对连接做出响应？是因为SSH服务开机就自动运行了。</p><p>​        所谓自有服务，简单来说，可以理解为Linux系统开机自动运行的服务（程序）。</p><p>​        我们如何管理这些自有服务呢？</p><h1 id="二、systemctl管理服务命令"><a href="#二、systemctl管理服务命令" class="headerlink" title="二、systemctl管理服务命令"></a>二、systemctl管理服务命令</h1><p>​        在Centos7之前，通过service 和 chkconfig两个命令来管理服务</p><p>service: 负责启动，停止服务，显示服务状态</p><p>chkconfig: 指定服务是否开机启动</p><p>​        从Centos7开始，统一使用systemctl来管理服务， systemctl同时具有service和chkconfig命令的功能。</p><h2 id="1、显示服务"><a href="#1、显示服务" class="headerlink" title="1、显示服务"></a>1、显示服务</h2><p>命令：systemctl</p><p>作用：管理服务</p><p>语法：#systemctl   [选项]</p><p>选项：list-units –type service –all：列出所有服务（包含启动的和没启动的）</p><p>​           list-units –type service：列出所有启动的服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用法一：systemctl list<span class="literal">-units</span> <span class="literal">--type</span> service <span class="literal">--all</span> 不加具体服务名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#systemctl list-units --type service --all</span></span><br><span class="line">含义：列出所有服务，包括已运行的和没有运行的</span><br><span class="line">空格可以翻页，q退出</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-55-systemctl01-d4045c.jpg" style="width:960px" /><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用法二：systemctl list<span class="literal">-units</span> <span class="literal">--type</span> service 不加具体服务名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#systemctl list-units --type service</span></span><br><span class="line">含义：列出已运行的服务</span><br><span class="line">空格可以翻页，q退出</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-53-systemctl02-efb1ac.jpg" style="width:960px" /><h2 id="2、查看启动和停止服务"><a href="#2、查看启动和停止服务" class="headerlink" title="2、查看启动和停止服务"></a>2、查看启动和停止服务</h2><p>命令：systemctl</p><p>作用：管理服务</p><p>语法：#systemctl   [选项]  服务名</p><p>选项： status：检查指定服务的运行状况</p><p>​            start：启动指定服务</p><p>​    stop：停止指定服务</p><p>​    restart：重启指定服务</p><p>​    reload：重新加载指定服务的配置文件（并非所有服务都支持reload，通常使用restart)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法三：systemctl 选项 服务名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#systemctl status crond</span></span><br><span class="line">含义：查看crond服务的状态</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-51-systemctl03-fbe81f.jpg" style="width:960px" /><p>Active:active(running) 表示当前crond服务是运行状态。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法四：systemctl 选项 服务名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#systemctl stop crond</span></span><br><span class="line">含义：停止crond服务</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-50-systemctl04-66d04d.jpg" style="width:960px" /><p>Inactive,表示crond服务当前是停止状态</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法五：systemctl 选项 服务名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#systemctl start crond</span></span><br><span class="line">含义：启动crond服务</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-47-systemctl05-0ca4fb.jpg" style="width:960px" /><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用法六：systemctl 选项 服务名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#systemctl restart crond</span></span><br><span class="line">含义：重启crond服务</span><br><span class="line"></span><br><span class="line"><span class="comment">#systemctl reload crond</span></span><br><span class="line">含义：重新加载crond服务配置文件</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-46-systemctl06-d53d18.jpg" style="width:960px" /><h2 id="3、服务持久化"><a href="#3、服务持久化" class="headerlink" title="3、服务持久化"></a>3、服务持久化</h2><p>​        所谓服务持久化，就是服务在开机的时候，是否自动启动。</p><p>命令：systemctl</p><p>作用：管理服务</p><p>语法：#systemctl   [选项]  服务名</p><p>选项： enable：指定服务开机自动启动</p><p>​            disable：取消服务开机自动启动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法七：systemctl 选项 服务名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#systemctl disable crond</span></span><br><span class="line">含义：取消crond服务开机启动</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-44-systemctl07-c17911.jpg" style="width:960px" /><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法八：systemctl 选项 服务名</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#systemctl disable crond</span></span><br><span class="line">含义：指定crond服务开机启动</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-42-systemctl08-1f7a7b.jpg" style="width:960px" /><p>systemctl参数总结</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>list-units –type service   –all</td><td>列出所有服务</td></tr><tr><td>list-units –type service</td><td>列出所有启动的服务</td></tr><tr><td>start</td><td>启动指定服务</td></tr><tr><td>stop</td><td>停止指定服务</td></tr><tr><td>status</td><td>检查指定服务的运行状况</td></tr><tr><td>restart</td><td>重启指定服务</td></tr><tr><td>reload</td><td>重新加载指定服务的配置文件（并非所有服务都支持reload，通常使用restart)</td></tr><tr><td>enable</td><td>指定服务开机自动启动</td></tr><tr><td>disable</td><td>取消服务开机自动启动</td></tr></tbody></table><h1 id="三、常用自有服务（ntp-firewalld-crond"><a href="#三、常用自有服务（ntp-firewalld-crond" class="headerlink" title="三、常用自有服务（ntp,firewalld,crond)"></a>三、常用自有服务（ntp,firewalld,crond)</h1><table><thead><tr><th>服务名</th><th>含义</th></tr></thead><tbody><tr><td>ntpd</td><td>用于同步计算机的系统时间的服务</td></tr><tr><td>firewalld</td><td>防火墙服务</td></tr><tr><td>crond</td><td>计划任务服务</td></tr></tbody></table><h2 id="1、ntp时间同步服务"><a href="#1、ntp时间同步服务" class="headerlink" title="1、ntp时间同步服务"></a>1、ntp时间同步服务</h2><p>​        NTP是网络时间协议(Network Time Protocol)，它是用来同步网络中各个计算机的时间的协议。</p><p> 工作场景：</p><p>​        公司开发了一个电商网站，由于访问量很大，网站后端由100台服务器组成集群。50台负责接收订单，50台负责安排发货，接收订单的服务器需要记录用户下订单的具体时间，把数据传给负责发货的服务器，由于100台服务器时间各不相同，记录的时间经常不一致，甚至会出现下单时间是明天，发货时间是昨天的情况。</p><h3 id="1）NTP同步服务器原理"><a href="#1）NTP同步服务器原理" class="headerlink" title="1）NTP同步服务器原理"></a>1）NTP同步服务器原理</h3><p>​        标准时间是哪里来的？</p><p>​        现在的标准时间是由原子钟报时的国际标准时间UTC（Universal Time Coordinated，世界协调时)，所以NTP获得UTC的时间来源可以是原子钟、天文台、卫星，也可以从Internet上获取。</p><p>​        在NTP中，定义了时间按照服务器的等级传播，<strong>Stratum层的总数限制在15以内</strong></p><p>​        工作中，&#x3D;&#x3D;通常我们会直接使用各个组织提供的，现成的NTP服务器&#x3D;&#x3D;</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-40-ntp02-519dad.jpg" style="width:960px" /><h3 id="2）到哪里去找NTP服务器"><a href="#2）到哪里去找NTP服务器" class="headerlink" title="2）到哪里去找NTP服务器"></a>2）到哪里去找NTP服务器</h3><p>​        NTP授时网站：<a href="http://www.ntp.org.cn/pool.php">http://www.ntp.org.cn/pool.php</a></p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-38-image-20190109151845806-7018325-9ddbe1.png" style="width:960px" /><h3 id="3）时间同步操作"><a href="#3）时间同步操作" class="headerlink" title="3）时间同步操作"></a>3）时间同步操作</h3><p>同步服务器时间方式有2 个：一次性同步手动同步、通过服务自动同步。</p><p>手动同步</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用法一：ntpdate 时间服务器IP</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#ntpdate 120.25.108.11</span></span><br><span class="line">含义：从服务器<span class="number">120.25</span>.<span class="number">108.11</span>同步标准网络时间到服务器（<span class="number">120.25</span>.<span class="number">108.11</span>服务器由阿里云提供，可以从http://www.ntp.org.cn/pool.php网站获取）</span><br><span class="line">注意：从网络同步时间，要确保自己的服务器可以访问互联网</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-36-ntp03-5edaef.jpg" style="width:960px" /><p>错误信息：no servers can be used</p><p>含义：服务器不可用，这里的服务器是指网络上的时间服务器，不可用，不代表是对方服务器有问题，也有可能是你自己的服务器网络不通，无法连接到网络上的时间服务器。</p><p>自动同步</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用法二：启动ntpd服务，并配置为开机启动</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#systemctl start ntpd</span></span><br><span class="line"><span class="comment">#systemctl enable ntpd</span></span><br><span class="line">含义：启动ntpd服务，并配置为开机启动，服务启动后，系统会自动同步网络时间</span><br><span class="line">注意：从网络同步时间，要确保自己的服务器可以访问互联网</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-34-ntp05-db09ae.jpg" style="width:960px" /><p>问题1：启动ntpd服务后，是不是时间就自动同步了？</p><p>启动后就自动同步了</p><p>问题2：需不需要让ntpd服务，开机自动运行？</p><p>需要</p><p>ntpd服务配置文件位置  &#x2F;etc&#x2F;ntp.conf</p><h2 id="2、firewalld防火墙"><a href="#2、firewalld防火墙" class="headerlink" title="2、firewalld防火墙"></a>2、firewalld防火墙</h2><h3 id="1-什么是防火墙"><a href="#1-什么是防火墙" class="headerlink" title="1)什么是防火墙"></a>1)什么是防火墙</h3><p>防火墙：防范一些网络攻击。有软件防火墙、硬件防火墙之分。</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-33-image-20190109152927209-7018967-b21a26.png" style="width:960px" /><blockquote><p>防火墙选择让正常请求通过，从而保证网络安全性。</p></blockquote><p>Windows防火墙：</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-32-image-20190109152909128-7018949-70d7e3.png" style="width:960px" /><h3 id="2-传统Linux防火墙"><a href="#2-传统Linux防火墙" class="headerlink" title="2)传统Linux防火墙"></a>2)传统Linux防火墙</h3><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-30-iptables02-f21c48.png" style="width:960px" /><h2 id="3、firewalld防火墙的概念"><a href="#3、firewalld防火墙的概念" class="headerlink" title="3、firewalld防火墙的概念"></a>3、firewalld防火墙的概念</h2><h3 id="1）区域"><a href="#1）区域" class="headerlink" title="1）区域"></a>1）区域</h3><p>CentOS6x中防火墙叫做iptables</p><p>CentOS7.x 中默认使用的防火墙是firewalld</p><p>​        firewalld增加了区域的概念，所谓区域是指，firewalld<strong>预先准备了几套防火墙策略的集合</strong>，类似于<strong>策略的模板</strong>，用户可以根据需求选择区域。</p><p>常见区域及相应策略规则</p><table><thead><tr><th>区域</th><th>默认策略</th></tr></thead><tbody><tr><td>trusted</td><td>允许所有数据包</td></tr><tr><td>home</td><td>拒绝流入的流量，除非与流出的流量相关，允许ssh,mdns,ippclient,amba-client,dhcpv6-client服务通过</td></tr><tr><td>internal</td><td>等同于home</td></tr><tr><td>work</td><td>拒绝流入的流量，除非与流出的流量相关，允许ssh,ipp-client,dhcpv6-client服务通过</td></tr><tr><td>public</td><td>拒绝流入的流量，除非与流出的流量相关，允许ssh,dhcpv6-client服务通过</td></tr><tr><td>external</td><td>拒绝流入的流量，除非与流出的流量相关，允许ssh服务通过</td></tr><tr><td>dmz</td><td>拒绝流入的流量，除非与流出的流量相关，允许ssh服务通过</td></tr><tr><td>block</td><td>拒绝流入的流量，除非与流出的流量相关，非法流量采取拒绝操作</td></tr><tr><td>drop</td><td>拒绝流入的流量，除非与流出的流量相关，非法流量采取丢弃操作</td></tr></tbody></table><h3 id="2）运行模式和永久模式"><a href="#2）运行模式和永久模式" class="headerlink" title="2）运行模式和永久模式"></a>2）运行模式和永久模式</h3><p>运行模式：此模式下，配置的防火墙策略立即生效，但是不写入配置文件</p><p>永久模式：此模式下，配置的防火墙策略写入配置文件，但是需要reload重新加载才能生效。</p><p>&#x3D;&#x3D;firewalld默认采用运行模式&#x3D;&#x3D;</p><h2 id="4、firewalld防火墙的配置"><a href="#4、firewalld防火墙的配置" class="headerlink" title="4、firewalld防火墙的配置"></a>4、firewalld防火墙的配置</h2><h3 id="1）查看，开启和停止firewalld服务"><a href="#1）查看，开启和停止firewalld服务" class="headerlink" title="1）查看，开启和停止firewalld服务"></a>1）查看，开启和停止firewalld服务</h3><p>命令：systemctl</p><p>作用：管理服务</p><p>语法：#systemctl   [选项]  firewalld</p><p>选项： status：检查指定服务的运行状况</p><p>​            start：启动指定服务</p><p>​    stop：停止指定服务</p><p>​    restart：重启指定服务</p><p>​    reload：重新加载指定服务的配置文件（并非所有服务都支持reload，通常使用restart)</p><p>​        <strong>使用systemctl来管理firewalld的服务，具体命令前面已经讲过，只是服务名换成了firewalld，这里不再赘述</strong></p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-28-firewall02-387c8e.jpg" style="width:960px" /><h3 id="2-管理firewall配置"><a href="#2-管理firewall配置" class="headerlink" title="2) 管理firewall配置"></a>2) 管理firewall配置</h3><p>命令：firewall-cmd</p><p>作用：管理firewall具体配置</p><p>语法：#firewall-cmd  [参数选项1] ….[参数选项n]</p><p>常用选项：  </p><h3 id="①查看默认使用的区域"><a href="#①查看默认使用的区域" class="headerlink" title="①查看默认使用的区域"></a>①查看默认使用的区域</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法一：firewall<span class="literal">-cmd</span> 选项</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#firewall-cmd --get-default-zone</span></span><br><span class="line">含义：查看默认使用区域，当前默认使用区域为public</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-22-firewall03-2702c2.jpg" style="width:960px" /><h3 id="②查看所有可用区域"><a href="#②查看所有可用区域" class="headerlink" title="②查看所有可用区域"></a>②查看所有可用区域</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法二：firewall<span class="literal">-cmd</span> 选项</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#firewall-cmd --get-zones</span></span><br><span class="line">含义：查看所有可用区域</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-21-firewall05-19586a.jpg" style="width:960px" /><h3 id="③列出当前使用区域配置"><a href="#③列出当前使用区域配置" class="headerlink" title="③列出当前使用区域配置"></a>③列出当前使用区域配置</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法三：firewall<span class="literal">-cmd</span> 选项</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#firewall-cmd --list-all</span></span><br><span class="line">含义：查看所有可用区域</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-18-firewall06-efd571.jpg" style="width:960px" /><h3 id="④列出所有区域的配置"><a href="#④列出所有区域的配置" class="headerlink" title="④列出所有区域的配置"></a>④列出所有区域的配置</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法四：firewall<span class="literal">-cmd</span> 选项</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#firewall-cmd --list-all-zones</span></span><br><span class="line">含义：查看所有可用区域</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-17-firewall04-0903a9.jpg" style="width:960px" /><h3 id="⑤添加允许通过的服务或端口"><a href="#⑤添加允许通过的服务或端口" class="headerlink" title="⑤添加允许通过的服务或端口"></a>⑤添加允许通过的服务或端口</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用法五：firewall<span class="literal">-cmd</span> 选项</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#firewall-cmd --zone=public --add-port=1024/tcp</span></span><br><span class="line">含义:在public区域，添加允许tcp协议的<span class="number">1024</span>端口通过的规则</span><br><span class="line"></span><br><span class="line"><span class="comment">#firewall-cmd --zone=public --add-service=ftp</span></span><br><span class="line">含义:在public区域，添加允许ftp服务通过的规则 =&gt; 必须在/usr/lib/firewalld/services</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-09-firewall07-770e39.jpg" style="width:960px" /><h3 id="⑥去掉允许通过的服务或端口"><a href="#⑥去掉允许通过的服务或端口" class="headerlink" title="⑥去掉允许通过的服务或端口"></a>⑥去掉允许通过的服务或端口</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用法五：firewall<span class="literal">-cmd</span> 选项</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#firewall-cmd --zone=public --remove-port=1024/tcp</span></span><br><span class="line">含义:在public区域，去掉允许tcp协议的<span class="number">1024</span>端口通过的规则</span><br><span class="line"></span><br><span class="line"><span class="comment">#firewall-cmd --zone=public --remove-service=ftp</span></span><br><span class="line">含义:在public区域，去掉允许ftp服务通过的规则</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-07-firewall08-4df1ee.jpg" style="width:960px" /><h3 id="⑦永久模式参数permanent"><a href="#⑦永久模式参数permanent" class="headerlink" title="⑦永久模式参数permanent"></a>⑦永久模式参数permanent</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法七：firewall<span class="literal">-cmd</span> 选项</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment"># firewall-cmd --zone=public --add-port=1024/tcp --permanent</span></span><br><span class="line">含义:在public区域，使用permanent参数，永久添加允许<span class="number">1024</span>端口通过的规则</span><br></pre></td></tr></table></figure><h3 id="⑧重新加载配置reload"><a href="#⑧重新加载配置reload" class="headerlink" title="⑧重新加载配置reload"></a>⑧重新加载配置reload</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法七：firewall<span class="literal">-cmd</span> 选项</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#firewall-cmd --reload</span></span><br><span class="line">含义:重新加载配置</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-04-firewall09-2bd2c7.jpg" style="width:960px" /><h2 id="5、计划任务crontab"><a href="#5、计划任务crontab" class="headerlink" title="5、计划任务crontab"></a>5、计划任务crontab</h2><h3 id="1-计划任务的作用"><a href="#1-计划任务的作用" class="headerlink" title="1)计划任务的作用"></a>1)计划任务的作用</h3><p>作用：操作系统不可能24 小时都有人在操作，有些时候想在指定的时间点去执行任务（例如：每天凌晨 2 点去重新启动httpd&#x3D;&gt;阿帕奇），此时不可能真有人每天夜里 2 点去执行命令，这就可以交给计划任务程序去执行操作了。</p><h3 id="2-查看计划任务"><a href="#2-查看计划任务" class="headerlink" title="2)查看计划任务"></a>2)查看计划任务</h3><p>&#x3D;&#x3D;语法：# crontab   选项&#x3D;&#x3D;</p><p>常用选项：</p><p>&#x3D;&#x3D;-l：list，列出指定用户的计划任务列表&#x3D;&#x3D;</p><p>&#x3D;&#x3D;-e：edit，编辑指定用户的计划任务列表，简单来说，计划任务就是一个文件&#x3D;&#x3D;</p><p>-u：user，指定的用户名，如果不指定，则表示当前用户</p><p>-r：remove，删除指定用户的计划任务列表</p><p>示例代码：列出当前用户的计划任务列表</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-01-11-image-20190115114136260-7523696-3526f3.png" alt="image-20190115114136260"></p><p>上述的提示，代表 root 用户没有计划任务需要去做。</p><h3 id="3-编辑计划任务（重点）"><a href="#3-编辑计划任务（重点）" class="headerlink" title="3)编辑计划任务（重点）"></a>3)编辑计划任务（重点）</h3><p>进入计划任务编辑文件</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-00-01-image-20190115114609118-7523969-0ceae8.png" alt="image-20190115114609118"></p><p>打开计划任务编辑文件后，可以在此文件中编写我们自定义的计划任务：</p><p>计划任务的规则语法格式，以行为单位，一行则为一个计划：</p><p>&#x3D;&#x3D;分      时      日      月      周      需要执行的命令&#x3D;&#x3D;</p><p>例如：0 0 * * * reboot，代表每天0时0分执行reboot指令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">取值范围（常识）：</span><br><span class="line">分：<span class="number">0</span>~<span class="number">59</span></span><br><span class="line">时：<span class="number">0</span>~<span class="number">23</span></span><br><span class="line">日：<span class="number">1</span>~<span class="number">31</span></span><br><span class="line">月：<span class="number">1</span>~<span class="number">12</span></span><br><span class="line">周：<span class="number">0</span>~<span class="number">7</span>，<span class="number">0</span> 和 <span class="number">7</span> 表示星期天</span><br><span class="line"></span><br><span class="line">四个符号：</span><br><span class="line">*：表示取值范围中的每一个数字</span><br><span class="line">-：做连续区间表达式的，要想表示<span class="number">1</span>~<span class="number">7</span>，则可以写成：<span class="number">1</span><span class="literal">-7</span></span><br><span class="line">/：表示每多少个，例如：想每 <span class="number">10</span> 分钟一次，则可以在分的位置写：*/<span class="number">10</span></span><br><span class="line">,：表示多个取值，比如想在 <span class="number">1</span> 点，<span class="number">2</span> 点 <span class="number">6</span> 点执行，则可以在时的位置写：<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span></span><br></pre></td></tr></table></figure><blockquote><p>特别补充：在Linux系统中，有些命令不能直接在计划任务中使用，使用后，其也不会生效。如useradd命令。如果想让其生效必须使用完整路径。</p></blockquote><p>问题：如何查询一个命令的真实路径在哪个位置？</p><blockquote><p>答：使用whereis  命令名称</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-59-1554258277505-c4a2c0.png" alt="1554258277505"></p><h3 id="4-几个小案例"><a href="#4-几个小案例" class="headerlink" title="4)几个小案例"></a>4)几个小案例</h3><p>问题1：每月1、10、22 日的4:45 重启network 服务</p><p>问题2：每周六、周日的1:10 重启network 服务</p><p>问题3：每天18:00 至23:00 之间每隔30 分钟重启network 服务</p><p>问题4：每隔两天的上午8 点到11 点的第3 和第15 分钟执行一次重启</p><p>分时日月周  命令或服务</p><p>问题1：45  4  1,10,22   *   *   service   network   restart</p><p>问题2：10  1  *  *  6,7  service   network   restart</p><p>问题3：*&#x2F;30  18-23   *   *   *   service network restart</p><p>问题4：3,15   8-11  *&#x2F;2   *   *   reboot</p><p>案例：每1 分钟往 root 家目录中的 readme.txt 中输一个1，为了看到效果使用追加输出【输出使用echo 命令，语法：# echo 输出的内容】</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-53-image-20190115120136784-7524896-d9dc60.png" alt="image-20190115120136784"></p><p>在末行模式下输入<code>:wq</code>保存并退出，使用tail -f查看readme.txt动态变化</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-51-image-20190115120402179-7525042-f58df6.png" alt="image-20190115120402179"></p><blockquote><p>注意：在计划任务中，默认最小单位就是分，不能再小了。如果需要做到秒级别则需要配合研发相关代码。</p></blockquote><h3 id="5-扩展"><a href="#5-扩展" class="headerlink" title="5)扩展"></a>5)扩展</h3><h4 id="①-crontab-权限问题"><a href="#①-crontab-权限问题" class="headerlink" title="① crontab 权限问题"></a>① crontab 权限问题</h4><p>crontab是任何用户都可以创建的计划任务，但是超级管理员可以通过配置来设置某些用户不允许设置计划任务 。</p><p>&#x3D;&#x3D;黑名单&#x3D;&#x3D;配置文件位于：<code>/etc/cron.deny</code> 里面写用户名，一行只能写一个</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-49-image-20190115120847967-7525328-83db11.png" alt="image-20190115120847967"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-48-image-20190115121037269-7525437-ca2ccd.png" alt="image-20190115121037269"></p><p>保存退出，切换到cndws普通用户，执行crontab命令，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-46-image-20190115121134052-7525494-39a32f.png" alt="image-20190115121134052"></p><p>&#x3D;&#x3D;白名单&#x3D;&#x3D;还有一个配置文件</p><p>&#x2F;etc&#x2F;cron.allow （本身不存在，自己创建）</p><blockquote><p>注意：白名单优先级高于黑名单，如果一个用户同时存在两个名单文件中，则会被默认允许创建计划任务。</p></blockquote><h4 id="②-查看计划任务文件保存路径"><a href="#②-查看计划任务文件保存路径" class="headerlink" title="② 查看计划任务文件保存路径"></a>② 查看计划任务文件保存路径</h4><p>问题：计划任务文件具体保存在哪里呢？</p><p>答：<code>/var/spool/cron/用户名文件中</code>，如果使用root用户编辑计划任务，则用户文件名为root</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-41-image-20190115135145162-7531505-225758.png" alt="image-20190115135145162"></p><h4 id="③-查看计划任务日志信息"><a href="#③-查看计划任务日志信息" class="headerlink" title="③ 查看计划任务日志信息"></a>③ 查看计划任务日志信息</h4><p>问题：在实际应用中，我们如何查看定时任务运行情况？</p><p>答：通过计划任务日志，日志文件位于<code>/var/log/cron</code></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-39-image-20190115141951856-7533191-597e01.png" alt="image-20190115141951856"></p><h1 id="四、Linux软件包"><a href="#四、Linux软件包" class="headerlink" title="四、Linux软件包"></a>四、Linux软件包</h1><h2 id="1、软件包概述"><a href="#1、软件包概述" class="headerlink" title="1、软件包概述"></a>1、软件包概述</h2><p>​        这是什么？</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-37-rjb01-2868c1.jpg" style="width:960px" /><p>​        Linux下也有很多可以安装的软件，而这些软件的安装包可细分为两种，分别是<strong>源码包</strong>和<strong>二进制包</strong>。</p><h3 id="1）源码包"><a href="#1）源码包" class="headerlink" title="1）源码包"></a>1）源码包</h3><p>​        源码包就是一大堆源代码程序，是由程序员按照特定的格式和语法编写出来的。计算机只能识别机器语言，也就是二进制语言，所以源码包安装之前需要编译。</p><p>​        编译过程耗时较长<br>​        大多数用户不懂开发，编译过程中可能会有各种错误，用户无力解决。</p><p>​        为了解决使用源码包安装的问题，Linux 软件包的安装出现了使用二进制包的安装方式。</p><h3 id="2）二进制包"><a href="#2）二进制包" class="headerlink" title="2）二进制包"></a>2）二进制包</h3><p>​        二进制包，也就是源码包经过成功编译之后产生的包。</p><p>​        二进制包是 Linux 下默认的软件安装包，目前主要有以下 2 大主流的二进制包管理系统：</p><ul><li>&#x3D;&#x3D;RPM 包&#x3D;&#x3D;管理系统：功能强大，安装、升级、査询和卸载非常简单方便，因此很多 Linux 发行版都默认使用此机制作为软件安装的管理方式，例如 Fedora、&#x3D;&#x3D;CentOS&#x3D;&#x3D;、SuSE 等。</li><li>DPKG 包管理系统：由 Debian Linux 所开发的包管理机制，通过 DPKG 包，Debian Linux 就可以进行软件包管理，主要应用在 Debian 和 Ubuntu 中。</li></ul><p>​        <strong>RPM</strong>是RedHat Package Manager（RedHat软件包管理工具）的缩写</p><p>​        作用：rpm 的作用类似于豌豆荚，华为应用市场，App Store，主要作用是对linux 服务器上的软件包进行对应管理操作，管理分为：查询、卸载、安装&#x2F;更新。</p><h2 id="2、如何获取rpm包"><a href="#2、如何获取rpm包" class="headerlink" title="2、如何获取rpm包"></a>2、如何获取rpm包</h2><blockquote><p>要想装软件，和windows 下一样，先得找到安装包：xxx.rpm</p></blockquote><p>软件包的获得方式：</p><p>a. 去官网去下载（<a href="http://rpm.pbone.net);/">http://rpm.pbone.net）；</a></p><p>b. 不介意老版本的话，可以从光盘（或者镜像文件）中读取；</p><h2 id="3、从光盘获取"><a href="#3、从光盘获取" class="headerlink" title="3、从光盘获取"></a>3、从光盘获取</h2><h4 id="3-1-虚拟机中加载光盘"><a href="#3-1-虚拟机中加载光盘" class="headerlink" title="3.1 虚拟机中加载光盘"></a>3.1 虚拟机中加载光盘</h4><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-35-rpm01-ff354d.png" style="width:960px" /><h4 id="3-2-使用-lsblk（list-block-devices）或者df-T-查看块状设备的信息"><a href="#3-2-使用-lsblk（list-block-devices）或者df-T-查看块状设备的信息" class="headerlink" title="3.2 使用 # lsblk（list block devices）或者df -T 查看块状设备的信息"></a>3.2 使用 # lsblk（list block devices）或者df -T 查看块状设备的信息</h4><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-34-rpm02-c37f73.jpg" style="width:960px" /><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name：名称</span><br><span class="line">Size：设备大小</span><br><span class="line"><span class="built_in">Type</span>：类型</span><br><span class="line">MountPoint：挂载点</span><br><span class="line">此界面类似于Windows 下的磁盘管理界面：</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-32-image-20190109170027122-7024427-61ea58.png" style="width:960px" /><h4 id="3-3-进入-run-media-root-CentOS-7-x86-64-Packages目录"><a href="#3-3-进入-run-media-root-CentOS-7-x86-64-Packages目录" class="headerlink" title="3.3 进入&#x2F;run&#x2F;media&#x2F;root&#x2F;CentOS 7 x86_64&#x2F;Packages目录"></a>3.3 进入&#x2F;run&#x2F;media&#x2F;root&#x2F;CentOS 7 x86_64&#x2F;Packages目录</h4><p>#&#x2F;run&#x2F;media&#x2F;root&#x2F;CentOS 7 x86_64&#x2F;Packages</p><p>#ls</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-31-rpm03-25c066.png" style="width:960px" /><h2 id="4、查询某个软件安装情况"><a href="#4、查询某个软件安装情况" class="headerlink" title="4、查询某个软件安装情况"></a>4、查询某个软件安装情况</h2><p>语法：# rpm -qa | grep 软件名称</p><p>选项：</p><p>-q：查询，query</p><p>-a：全部，all</p><p>示例代码：查询firefox浏览器的安装情况，已安装</p><p>#rpm -qa |grep firefox</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-29-rpm03-1a1374.jpg" style="width:960px" /><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-28-rpm04-ec5abc.jpg" style="width:960px" /><p>示例代码：查询qq软件的安装情况，未安装</p><p>#rpm -qa |grep qq</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-26-rpm05-be623b.jpg" style="width:960px" /><h2 id="5、卸载某个软件"><a href="#5、卸载某个软件" class="headerlink" title="5、卸载某个软件"></a>5、卸载某个软件</h2><p>卸载某个软件</p><p>语法：# rpm -e 软件的名称（建议写完整的名称，通过-qa 查询）</p><p>案例：卸载火狐浏览器</p><p>#rpm -qa |grep firefox      首先查询firefox软件的完整名称<br>firefox-45.7.0-2.el6.centos.x86_64</p><p>#rpm -e firefox-45.7.0-2.el6.centos.x86_64</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-24-rpm06-16753c.jpg" style="width:960px" /><p>卸载完成后，单击firefox浏览器图标，运行结果如下图所示：</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-20-rpm07-755499.jpg" style="width:960px" /><h2 id="6、安装某个软件"><a href="#6、安装某个软件" class="headerlink" title="6、安装某个软件"></a>6、安装某个软件</h2><p>命令：rpm</p><p>作用：管理rpm软件包</p><p>语法：# rpm -ivh 软件包完整路径名称</p><p>选项：</p><p>-i：install，安装</p><p>-v：显示进度条</p><p>-h：表示以”#”形式显示进度条</p><p>示例代码：将刚刚卸载的firefox火狐浏览器重新安装（在DVD光盘1中）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">用法：rpm <span class="literal">-ivh</span> 软件包名称</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#cd /run/media/root/CentOS\ 7\ x86_64/Packages/</span></span><br><span class="line">进入光盘Packages目录，里面存放了很多rpm的安装包</span><br><span class="line"></span><br><span class="line"><span class="comment">#ll |grep firefox</span></span><br><span class="line">查看Packages目录下，包含firefox的安装包</span><br><span class="line"></span><br><span class="line"><span class="comment">#rpm -ivh firefox-60.2.2-1.el7.centos.x86_64.rpm</span></span><br><span class="line">使用rpm命令，安装firefox软件包</span><br><span class="line"></span><br><span class="line"><span class="comment">#rpm -qa |grep firefox</span></span><br><span class="line">查询是否安装完成</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-17-rpm08-d28faa.jpg" style="width:960px" /><p>安装完成后，打开firefox浏览器</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-15-rpm04-64e935.jpg" style="width:960px" /><h2 id="7、更新某个软件"><a href="#7、更新某个软件" class="headerlink" title="7、更新某个软件"></a>7、更新某个软件</h2><p>语法：# rpm -Uvh 完整的安装包路径</p><p>选项：</p><p>-U：upgrade，升级</p><p>-v：表示显示进度条</p><p>-h：表示以#形式显示进度条</p><p>这里我会提供给大家firefox的高版本的安装包</p><p>firefox-60.8.0-1.el7.centos.x86_64.rpm    这个包是用来升级的</p><p>firefox-68.4.1-1.el7.centos.x86_64.rpm</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">用法：rpm <span class="literal">-Uvh</span> 软件包名称</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#rpm -qa |grep firefox</span></span><br><span class="line">查询当前firefox的版本</span><br><span class="line"></span><br><span class="line"><span class="comment">#ll</span></span><br><span class="line">查看root目录下，我们刚刚拷到虚机上的RPM安装包的名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#rpm -Uvh firefox-60.8.0-1.el7.centos.x86_64.rpm</span></span><br><span class="line">使用rpm命令，安装<span class="number">60.8</span>.<span class="number">0</span>版本的软件包</span><br><span class="line"></span><br><span class="line"><span class="comment">#rpm -qa |grep firefox</span></span><br><span class="line">查询升级后的firefox版本</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-12-rpm09-4b2554.jpg" style="width:960px" /><h2 id="8、rpm扩展"><a href="#8、rpm扩展" class="headerlink" title="8、rpm扩展"></a>8、rpm扩展</h2><h4 id="8-1依赖关系"><a href="#8-1依赖关系" class="headerlink" title="8.1依赖关系"></a>8.1依赖关系</h4><p>一个软件必须先有其他软件才能运行，例如之前xmind启动过程中提示的缺少DLL，称之为依赖</p><p>WAMP（Windows + Apache + MySQL + PHP）安装前必须先安装VC++ 2014 x86_64，这种情况就称之为有依赖关系。</p><p>60.8.0的firefox可以更新成功</p><p>下面我们尝试更新到68.4.1的版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用法：rpm <span class="literal">-Uvh</span> 软件包名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#rpm -Uvh firefox-68.4.1-1.el7.centos.x86_64.rpm</span></span><br><span class="line">使用rpm命令，安装<span class="number">68.4</span>.<span class="number">1</span>版本的软件包</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-10-rpm10-9d0ecc.jpg" style="width:960px" /><p>错误提示：</p><p>error：Failed dependencies:</p><p>提示安装68版本的firefox需要依赖nspr4.21的版本，nss的3.44的版本，这就是我们说的&#x3D;&#x3D;依赖关系&#x3D;&#x3D;。</p><p>为了解决依赖关系的问题，有另外一个管理工具叫做&#x3D;&#x3D;yum&#x3D;&#x3D;，后面我们会讲到</p><h4 id="8-2-查看文件所属的包名（实用）"><a href="#8-2-查看文件所属的包名（实用）" class="headerlink" title="8.2 查看文件所属的包名（实用）"></a>8.2 查看文件所属的包名（实用）</h4><p>语法：# rpm -qf 需要查询的文件路径</p><p>选项：</p><p>-f：查询文件所属包</p><p>示例代码：查询&#x2F;etc&#x2F;ntp.conf 属于哪个软件包？</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-09-rpm11-24189c.jpg" style="width:960px" /><h4 id="8-3查询软件安装完成后，生成了哪些文件"><a href="#8-3查询软件安装完成后，生成了哪些文件" class="headerlink" title="8.3查询软件安装完成后，生成了哪些文件"></a>8.3查询软件安装完成后，生成了哪些文件</h4><p>语法：# rpm  -ql   需要查询的软件包名称</p><p>#rpm -ql firefox</p><p>#rpm -ql openssh</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-06-rpm12-1a0092.jpg" style="width:960px" /><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">特别说明：软件安装完成后，一共生成了以下几类文件</span><br><span class="line">配置文件类：/etc目录</span><br><span class="line">程序文件本身，二进制文件命令：/usr/sbin目录</span><br><span class="line">文档手册：/usr/share/doc或<span class="built_in">man</span>目录</span><br></pre></td></tr></table></figure><h2 id="9、扩展：光盘的挂载和解挂"><a href="#9、扩展：光盘的挂载和解挂" class="headerlink" title="9、扩展：光盘的挂载和解挂"></a>9、扩展：光盘的挂载和解挂</h2><p>① 解挂操作</p><p>命令：umount</p><p>语法：# umount 当前设备的挂载点（路径）</p><p>例如：</p><p>#umount &#x2F;run&#x2F;media&#x2F;root&#x2F;CentOS\ 7\ x86_64&#x2F;</p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-04-mount01-760e3f.jpg" style="width:960px" /><p>② 挂载光盘</p><p>首先新建一个挂载点，然后使用mount命令进行挂在，挂载点可以理解为就是一个空目录</p><p>命令：mount</p><p>语法：# mount  设备文件原始地址（&#x2F;dev目录）  要挂载的位置路径（盘符）</p><p>设备原始地址：地址统一都在&#x2F;dev 下，然后根据大小确定具体name 值，拼凑在一起组成原</p><p>始地址，例如当前：”&#x2F;dev&#x2F;sr0”</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">用法：<span class="built_in">mount</span> 设备 挂载点</span><br><span class="line">示例代码：</span><br><span class="line"><span class="comment">#mkdir /mnt/dvd</span></span><br><span class="line">新建一个目录作为挂载点</span><br><span class="line"></span><br><span class="line"><span class="comment">#mount /dev/sr0 /mnt/dvd</span></span><br><span class="line">将光驱设备/dev/sr0 挂载到 /mnt/dvd这个挂载点</span><br><span class="line"></span><br><span class="line"><span class="comment">#df -T</span></span><br><span class="line">可以看到已经成功挂载</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/20-59-00-mount02-00c013.jpg" style="width:960px" /><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/21-05-13-9cdc45b70b1d804c9facf80821f4dc29-081d0e.png" alt="9cdc45b70b1d804c9facf80821f4dc29"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud微服务以及集成Gogs+Jenkins</title>
      <link href="/2024/06/25/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E9%9B%86%E6%88%90Gogs-Jenkins/"/>
      <url>/2024/06/25/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E9%9B%86%E6%88%90Gogs-Jenkins/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步：环境准备"><a href="#第一步：环境准备" class="headerlink" title="第一步：环境准备"></a>第一步：环境准备</h2><blockquote><p>系统环境：Centos7.6</p></blockquote><h3 id="①部署规划"><a href="#①部署规划" class="headerlink" title="①部署规划"></a>①部署规划</h3><table><thead><tr><th align="center">编号</th><th align="center">主机名称</th><th align="center">IP地址</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">sh1</td><td align="center">192.168.31.151</td><td align="center">SpringCloud01服务器</td></tr><tr><td align="center">2</td><td align="center">sh2</td><td align="center">192.168.31.152</td><td align="center">SpringCloud02服务器</td></tr></tbody></table><h3 id="②软件列表"><a href="#②软件列表" class="headerlink" title="②软件列表"></a>②软件列表</h3><table><thead><tr><th>软件名称</th><th>安装方式</th><th>进度</th></tr></thead><tbody><tr><td>JDK17</td><td>SHELL脚本</td><td>√</td></tr><tr><td>MVN</td><td>SHELL脚本</td><td>√</td></tr><tr><td>DOCKER</td><td>SHELL脚本</td><td>√</td></tr><tr><td>GOGS</td><td>SHELL脚本</td><td>√</td></tr><tr><td>DOCKER-COMPOSE</td><td>SHELL脚本</td><td>√</td></tr></tbody></table><h3 id="0-微服务环境准备"><a href="#0-微服务环境准备" class="headerlink" title="0.微服务环境准备"></a>0.微服务环境准备</h3><h4 id="①克隆母鸡或模板机，生产sh1服务器和sh2服务器"><a href="#①克隆母鸡或模板机，生产sh1服务器和sh2服务器" class="headerlink" title="①克隆母鸡或模板机，生产sh1服务器和sh2服务器"></a>①克隆母鸡或模板机，生产sh1服务器和sh2服务器</h4><h4 id="②更改主机名称，采用FQDN格式【这里不采用】"><a href="#②更改主机名称，采用FQDN格式【这里不采用】" class="headerlink" title="②更改主机名称，采用FQDN格式【这里不采用】"></a>②更改主机名称，采用FQDN格式【这里不采用】</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#192.168.31.151 </span></span><br><span class="line">hostnamectl <span class="built_in">set-hostname</span> sh1</span><br><span class="line">su</span><br><span class="line"></span><br><span class="line"><span class="comment">#192.168.31.152</span></span><br><span class="line">hostnamectl <span class="built_in">set-hostname</span> sh2</span><br><span class="line">su</span><br></pre></td></tr></table></figure><h4 id="③更改服务器的IP地址（使用静态模式）"><a href="#③更改服务器的IP地址（使用静态模式）" class="headerlink" title="③更改服务器的IP地址（使用静态模式）"></a>③更改服务器的IP地址（使用静态模式）</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line">...</span><br><span class="line">IPADDR=<span class="string">&quot;192.168.31.151&quot;</span></span><br><span class="line">NETMASK=<span class="string">&quot;255.255.255.0&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.31.2&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;114.114.114.114&quot;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="1-JDK17环境安装"><a href="#1-JDK17环境安装" class="headerlink" title="1.JDK17环境安装"></a>1.JDK17环境安装</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># -------------------------------------------------</span></span><br><span class="line"><span class="comment"># Script Name: java.sh</span></span><br><span class="line"><span class="comment"># Author: Flaw</span></span><br><span class="line"><span class="comment"># -------------------------------------------------</span></span><br><span class="line"><span class="comment"># 欢迎语</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[36m</span></span><br><span class="line"><span class="string">███╗   ██╗ ██████╗     ██╗  ██╗ ██████╗ ███╗   ███╗███████╗    ██╗     ██╗██╗  ██╗███████╗    </span></span><br><span class="line"><span class="string">████╗  ██║██╔═══██╗    ██║  ██║██╔═══██╗████╗ ████║██╔════╝    ██║     ██║██║ ██╔╝██╔════╝    </span></span><br><span class="line"><span class="string">██╔██╗ ██║██║   ██║    ███████║██║   ██║██╔████╔██║█████╗      ██║     ██║█████╔╝ █████╗      </span></span><br><span class="line"><span class="string">██║╚██╗██║██║   ██║    ██╔══██║██║   ██║██║╚██╔╝██║██╔══╝      ██║     ██║██╔═██╗ ██╔══╝      </span></span><br><span class="line"><span class="string">██║ ╚████║╚██████╔╝    ██║  ██║╚██████╔╝██║ ╚═╝ ██║███████╗    ███████╗██║██║  ██╗███████╗    </span></span><br><span class="line"><span class="string">╚═╝  ╚═══╝ ╚═════╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝    ╚══════╝╚═╝╚═╝  ╚═╝╚══════╝    </span></span><br><span class="line"><span class="string">                                                                                              </span></span><br><span class="line"><span class="string"> ██╗██████╗ ███████╗    ██████╗     ██████╗     ██╗                                           </span></span><br><span class="line"><span class="string">███║╚════██╗╚════██║   ██╔═████╗   ██╔═████╗   ███║                                           </span></span><br><span class="line"><span class="string">╚██║ █████╔╝    ██╔╝   ██║██╔██║   ██║██╔██║   ╚██║                                           </span></span><br><span class="line"><span class="string"> ██║██╔═══╝    ██╔╝    ████╔╝██║   ████╔╝██║    ██║                                           </span></span><br><span class="line"><span class="string"> ██║███████╗   ██║  ██╗╚██████╔╝██╗╚██████╔╝██╗ ██║                                           </span></span><br><span class="line"><span class="string"> ╚═╝╚══════╝   ╚═╝  ╚═╝ ╚═════╝ ╚═╝ ╚═════╝ ╚═╝ ╚═╝</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">BY: \033[32mFlaw\033[0m</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查用户是否为root</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$</span>(id -u)&quot;</span> != <span class="string">&quot;0&quot;</span> ]; then</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m脚本运行中需要root权限,请提权后重试\033[0m&quot;</span> <span class="number">1</span>&gt;&amp;<span class="number">2</span></span><br><span class="line">        <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">clear</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否已安装必要的命令</span></span><br><span class="line">required_commands=(<span class="string">&quot;wget&quot;</span> <span class="string">&quot;rpm&quot;</span> <span class="string">&quot;tar&quot;</span> <span class="string">&quot;ln&quot;</span> <span class="string">&quot;sed&quot;</span> <span class="string">&quot;iptables&quot;</span> <span class="string">&quot;systemctl&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> cmd <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$</span>&#123;required_commands[@]&#125;&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> ! command <span class="literal">-v</span> <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span>; then</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m检测到缺少 <span class="variable">$cmd</span> 命令,正在安装...\033[0m&quot;</span></span><br><span class="line">        yum install <span class="literal">-y</span> <span class="string">&quot;<span class="variable">$cmd</span>&quot;</span></span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查本地是否已安装 Java 环境</span></span><br><span class="line">installed_java=<span class="variable">$</span>(rpm <span class="literal">-qa</span> | grep <span class="literal">-E</span> <span class="string">&#x27;^java-|^jdk-&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">n</span> <span class="string">&quot;<span class="variable">$installed_java</span>&quot;</span> ]; then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m检测到本地已安装 Java 环境,正在卸载...\033[0m&quot;</span></span><br><span class="line">    rpm <span class="literal">-e</span> <span class="literal">--nodeps</span> <span class="variable">$installed_java</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m卸载完成\033[0m&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m本地未安装 Java 环境\033[0m&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 JDK 安装包</span></span><br><span class="line">jdk_file=<span class="string">&quot;/opt/jdk-17.0.10_linux-x64_bin.tar.gz&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ ! -<span class="type">f</span> <span class="string">&quot;<span class="variable">$jdk_file</span>&quot;</span> ]; then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在下载 JDK 安装包...\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">wget</span>  https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJmT0dMZ3ZVLUY0WGlINDA_ZT1PbEc3VEI.tar.gz <span class="literal">-O</span> <span class="variable">$jdk_file</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m下载完成\033[0m&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m检测到 JDK 安装包已存在\033[0m&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在安装 JDK...\033[0m&quot;</span></span><br><span class="line">tar <span class="literal">-zxf</span> <span class="variable">$jdk_file</span> <span class="literal">-C</span> /usr/local/ &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">ln <span class="literal">-sf</span> /usr/local/jdk<span class="literal">-17</span>.<span class="number">0.10</span> /usr/local/jdk</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在配置环境变量...\033[0m&quot;</span></span><br><span class="line">touch /opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=$JAVA_HOME/bin:$PATH&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH JAVA_HOME CLASSPATH&#x27;</span> &gt;&gt;/opt/temp.txt</span><br><span class="line">sed <span class="literal">-i</span> <span class="literal">-e</span> <span class="string">&#x27;$r /opt/temp.txt&#x27;</span> /etc/profile</span><br><span class="line"><span class="built_in">rm</span> <span class="operator">-f</span> /opt/temp.txt</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m JDK 安装完成\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">setenforce <span class="number">0</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">iptables <span class="operator">-F</span> &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl stop firewalld &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl disable firewalld &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl stop NetworkManager &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">systemctl disable NetworkManager &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m防火墙和网络管理器已关闭\033[0m&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-MVN安装"><a href="#2-MVN安装" class="headerlink" title="2.MVN安装"></a>2.MVN安装</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">MAVEN_VERSION=<span class="number">3.8</span>.<span class="number">6</span></span><br><span class="line">MAVEN_HOME=/opt/maven</span><br><span class="line">MAVEN_DOWNLOAD_LINK=<span class="string">&quot;/opt/apache-maven-3.8.6-bin.tar.gz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 彩色输出函数</span></span><br><span class="line">echo_red() &#123; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m<span class="variable">$1</span>\033[0m&quot;</span>; &#125;</span><br><span class="line">echo_green() &#123; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m<span class="variable">$1</span>\033[0m&quot;</span>; &#125;</span><br><span class="line">echo_blue() &#123; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m<span class="variable">$1</span>\033[0m&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">yum install <span class="built_in">wget</span> <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line">echo_blue <span class="string">&quot;第一步：上传并解压 Maven 到 /opt...&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> apache<span class="literal">-maven-3</span>.<span class="number">8.6</span><span class="literal">-bin</span>.tar.gz https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJlN1ZQb05adU1VV0FhWlU_ZT1SMFh2QnU.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步：上传并解压 Maven 到 /opt</span></span><br><span class="line">echo_blue <span class="string">&quot;第一步：上传并解压 Maven 到 /opt...&quot;</span></span><br><span class="line">sudo <span class="built_in">cp</span> <span class="variable">$MAVEN_DOWNLOAD_LINK</span> /opt</span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">sudo tar <span class="literal">-zxvf</span> <span class="variable">$</span>(basename <span class="variable">$MAVEN_DOWNLOAD_LINK</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：移动解压文件夹到 maven</span></span><br><span class="line">echo_blue <span class="string">&quot;第二步：移动解压文件夹到 maven...&quot;</span></span><br><span class="line">sudo <span class="built_in">mv</span> apache<span class="literal">-maven-</span><span class="variable">$MAVEN_VERSION</span> maven</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步：设置环境变量</span></span><br><span class="line">echo_blue <span class="string">&quot;第三步：设置环境变量...&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;MAVEN_HOME=<span class="variable">$</span>&#123;MAVEN_HOME&#125;&quot;</span> | sudo <span class="built_in">tee</span> <span class="literal">-a</span> /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$&#123;MAVEN_HOME&#125;/bin:$&#123;PATH&#125;&#x27;</span> | sudo <span class="built_in">tee</span> <span class="literal">-a</span> /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步：验证安装结果</span></span><br><span class="line">echo_blue <span class="string">&quot;第四步：验证安装结果...&quot;</span></span><br><span class="line">mvn <span class="literal">-version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示完成信息</span></span><br><span class="line">echo_green <span class="string">&quot;Maven 安装脚本完成。&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-Docker安装"><a href="#3-Docker安装" class="headerlink" title="3.Docker安装"></a>3.Docker安装</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并清理现有的Docker环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m检查并清理现有的Docker环境...\033[0m&quot;</span></span><br><span class="line"><span class="keyword">if</span> command <span class="literal">-v</span> docker &amp;&gt;/dev/null; then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m发现现有Docker环境，准备清理...\033[0m&quot;</span></span><br><span class="line">    sudo systemctl stop docker</span><br><span class="line">    sudo yum remove docker<span class="literal">-ce</span> docker<span class="literal">-ce-cli</span> containerd.io docker<span class="literal">-buildx-plugin</span> docker<span class="literal">-compose-plugin</span> docker<span class="literal">-ce-rootless-extras</span></span><br><span class="line">    sudo <span class="built_in">rm</span> <span class="literal">-rf</span> /var/lib/docker</span><br><span class="line">    sudo <span class="built_in">rm</span> <span class="literal">-rf</span> /var/lib/containerd</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m现有Docker环境已清理完成。\033[0m&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m没有发现现有Docker环境。\033[0m&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1 安装Docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （1）更新yum包到最新</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m更新yum包到最新...\033[0m&quot;</span></span><br><span class="line">sudo yum update <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （2）安装必要的软件包</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m安装必要的软件包...\033[0m&quot;</span></span><br><span class="line">sudo yum install <span class="literal">-y</span> yum<span class="literal">-utils</span> device<span class="literal">-mapper-persistent-data</span> lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># （3）设置yum源为阿里云</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m设置yum源为阿里云...\033[0m&quot;</span></span><br><span class="line">sudo yum<span class="literal">-config-manager</span> <span class="literal">--add-repo</span> http://mirrors.aliyun.com/docker<span class="literal">-ce</span>/linux/centos/docker<span class="literal">-ce</span>.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># （4）安装docker</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m安装docker...\033[0m&quot;</span></span><br><span class="line">sudo yum install docker<span class="literal">-ce</span> <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （5）安装后查看docker版本</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m查看docker版本...\033[0m&quot;</span></span><br><span class="line">docker <span class="literal">-v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2 设置ustc的镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m配置ustc镜像加速器...\033[0m&quot;</span></span><br><span class="line"><span class="comment"># 创建或编辑daemon.json文件</span></span><br><span class="line">sudo mkdir <span class="literal">-p</span> /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.3 Docker的启动与停止</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m启动docker服务...\033[0m&quot;</span></span><br><span class="line">sudo systemctl <span class="built_in">start</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选：设置Docker开机自启</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m设置Docker开机自启...\033[0m&quot;</span></span><br><span class="line">sudo systemctl enable docker</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32mDocker安装与配置完成！\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[34m当前Docker安装版本\033[0m&quot;</span></span><br><span class="line">docker <span class="literal">-v</span></span><br></pre></td></tr></table></figure><h3 id="4-安装docker-compose"><a href="#4-安装docker-compose" class="headerlink" title="4.安装docker-compose"></a>4.安装docker-compose</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m正在安装wget...\033[0m&quot;</span></span><br><span class="line">yum install <span class="built_in">wget</span> <span class="literal">-y</span></span><br><span class="line"><span class="comment"># 检查是否已安装docker-compose</span></span><br><span class="line"><span class="keyword">if</span> command <span class="literal">-v</span> docker<span class="literal">-compose</span> &amp;&gt; /dev/null</span><br><span class="line">then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;32mDocker Compose 已经安装，版本信息如下：\e[0m&quot;</span></span><br><span class="line">    docker<span class="literal">-compose</span> <span class="literal">-v</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;31m未检测到Docker Compose，开始安装...\e[0m&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载docker-compose</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;34m正在下载 Docker Compose...\e[0m&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /opt/docker<span class="literal">-compose-linux-x86_64</span> https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJmeFVpakRsVjlYUXlsOUU_ZT1Hdk1qM00..file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;34m修改权限...\e[0m&quot;</span></span><br><span class="line">chmod +x /opt/docker<span class="literal">-compose-linux-x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动到/usr/bin</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;34m移动文件到 /usr/bin 目录...\e[0m&quot;</span></span><br><span class="line"><span class="built_in">mv</span> /opt/docker<span class="literal">-compose-linux-x86_64</span> /usr/bin/docker<span class="literal">-compose</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装结果</span></span><br><span class="line"><span class="keyword">if</span> command <span class="literal">-v</span> docker<span class="literal">-compose</span> &amp;&gt; /dev/null</span><br><span class="line">then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;32mDocker Compose 安装成功，版本信息如下：\e[0m&quot;</span></span><br><span class="line">    docker<span class="literal">-compose</span> <span class="literal">-v</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;31mDocker Compose 安装失败，请检查脚本和网络连接。\e[0m&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-搭建私有化仓库并上传JAVA8"><a href="#5-搭建私有化仓库并上传JAVA8" class="headerlink" title="5.搭建私有化仓库并上传JAVA8"></a>5.搭建私有化仓库并上传JAVA8</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机IP地址</span></span><br><span class="line">LOCAL_IP=<span class="variable">$</span>(hostname <span class="literal">-I</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色变量</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">YELLOW=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">BLUE=<span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">PURPLE=<span class="string">&#x27;\033[0;35m&#x27;</span></span><br><span class="line">CYAN=<span class="string">&#x27;\033[0;36m&#x27;</span></span><br><span class="line">RESET=<span class="string">&#x27;\033[0m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印标题</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;PURPLE&#125;==========搭建私有仓库并上传JAVA:8-jre镜像===========<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[1] 上传registry.tar至/opt目录下<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /opt/registry.tar https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJnUUZFRnlTQ0MxZEF3eTZrP2U9a0twdE54.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[2] 开启docker服务<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">systemctl <span class="built_in">start</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[3] 导入镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker load <span class="literal">-i</span> /opt/registry.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤4</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[4] 启动私有仓库容器<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker run <span class="literal">-di</span> <span class="literal">--name</span>=registry <span class="literal">-p</span> <span class="number">5000</span>:<span class="number">5000</span> registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[5] 打开浏览器验证<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;输入地址http://<span class="variable">$</span>&#123;LOCAL_IP&#125;:5000/v2/_catalog看到&#123;&quot;</span>repositories<span class="string">&quot;:[]&#125; 表示私有仓库搭建成功并且内容为空<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤6</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[6] 修改daemon.json<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">printf <span class="string">&#x27;&#123;&quot;insecure-registries&quot;:[&quot;%s:5000&quot;]&#125;&#x27;</span> <span class="string">&quot;<span class="variable">$</span>&#123;LOCAL_IP&#125;&quot;</span> &gt; /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤7</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[7] 重启docker服务<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤8</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[8] 上传java.tar至/opt目录下,导入镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /opt/java.tar https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJnUUpzRm9OMmJaWDB2YVpmP2U9dEt6OUFl.tar</span><br><span class="line">docker load <span class="literal">-i</span> /opt/java.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤9</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[9] 标记此镜像为私有仓库的镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker tag <span class="number">192.168</span>.<span class="number">222.100</span>:<span class="number">5000</span>/java:<span class="number">8</span><span class="literal">-jre</span> <span class="variable">$</span>&#123;LOCAL_IP&#125;:<span class="number">5000</span>/java:<span class="number">8</span><span class="literal">-jre</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤10</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[10] 再次启动私服容器<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker <span class="built_in">start</span> registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤11</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[11] 上传标记的镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker push <span class="variable">$</span>&#123;LOCAL_IP&#125;:<span class="number">5000</span>/java:<span class="number">8</span><span class="literal">-jre</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤12</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;[12] 浏览器验证<span class="variable">$</span>&#123;RESET&#125;,<span class="variable">$</span>&#123;YELLOW&#125;输入地址http://<span class="variable">$</span>&#123;LOCAL_IP&#125;:5000/v2/_catalog&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;搭建私有仓库并上传JAVA:8-jre镜像成功!<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>环境都安装成功</p><p>JDK17</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/24/21-17-36-image-20240624190324668-790ccc.png" alt="image-20240624190324668"></p><p>MAVEN</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/24/21-17-39-image-20240624191136345-f1d325.png" alt="image-20240624191136345"></p><p>Docker_compose</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/24/21-17-42-image-20240624191254676-789598.png" alt="image-20240624191254676"></p><p>私有化仓库</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/22-43-25-image-20240625224325791-b917c8.png" alt="image-20240625224325791"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/23-16-08-image-20240625231608008-536b20.png" alt="image-20240625231608008"></p></blockquote><h2 id="第二步：代码环境准备"><a href="#第二步：代码环境准备" class="headerlink" title="第二步：代码环境准备"></a>第二步：代码环境准备</h2><blockquote><p>源码文件下载地址：<a href="https://fj.ly93.cc/16/1562681168/microservice.zip">https://fj.ly93.cc/16/1562681168/microservice.zip</a><br>（如果觉得这部分自己手动操作麻烦可以直接跳转到一键摆脱双手模式） <a href="#%E4%B8%80%E9%94%AE%E5%8C%96%E8%84%9A%E6%9C%AC%E5%BD%BB%E5%BA%95%E6%91%86%E8%84%B1%E5%8F%8C%E6%89%8B%E6%93%8D%E4%BD%9C">跳转</a></p></blockquote><h3 id="1-修改pom配置文件"><a href="#1-修改pom配置文件" class="headerlink" title="1.修改pom配置文件"></a>1.修改pom配置文件</h3><p>全局替换pom文件里的私有仓库地址的IP地址为自己的IP地址</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/23-37-38-0d13bbbefe768d0e3469394a4281e04-a797cd.png" alt="0d13bbbefe768d0e3469394a4281e04"></p><h3 id="2-四个子模块分别添加Dockerfile文件"><a href="#2-四个子模块分别添加Dockerfile文件" class="headerlink" title="2.四个子模块分别添加Dockerfile文件"></a>2.四个子模块分别添加Dockerfile文件</h3><h4 id="①microservice-eureka-server"><a href="#①microservice-eureka-server" class="headerlink" title="①microservice-eureka-server"></a>①microservice-eureka-server</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="number">192.168</span>.<span class="number">31.151</span>:<span class="number">5000</span>/java:<span class="number">8</span>-jre</span><br><span class="line"><span class="keyword">MAINTAINER</span> sh &lt;<span class="number">3300519161</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./target/microservice-eureka-server-0.0.1-SNAPSHOT.jar /app/microservice-eureka-service.jar</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-Xmx200m&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app/microservice-eureka-service.jar&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8761</span></span><br></pre></td></tr></table></figure><h4 id="②microservice-gateway-zuul"><a href="#②microservice-gateway-zuul" class="headerlink" title="②microservice-gateway-zuul"></a>②microservice-gateway-zuul</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="number">192.168</span>.<span class="number">31.151</span>:<span class="number">5000</span>/java:<span class="number">8</span>-jre</span><br><span class="line"><span class="keyword">MAINTAINER</span> sh &lt;<span class="number">3300519161</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./target/microservice-gateway-zuul-0.0.1-SNAPSHOT.jar /app/microservice-gateway-zuul.jar</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-Xmx200m&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app/microservice-gateway-zuul.jar&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8050</span></span><br></pre></td></tr></table></figure><h4 id="③microservice-orderservice"><a href="#③microservice-orderservice" class="headerlink" title="③microservice-orderservice"></a>③microservice-orderservice</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="number">192.168</span>.<span class="number">31.151</span>:<span class="number">5000</span>/java:<span class="number">8</span>-jre</span><br><span class="line"><span class="keyword">MAINTAINER</span> sh &lt;<span class="number">3300519161</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./target/microservice-orderservice-0.0.1-SNAPSHOT.jar /app/microservice-orderservice.jar</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-Xmx200m&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app/microservice-orderservice.jar&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">7900</span></span><br></pre></td></tr></table></figure><h4 id="④microservice-userservice"><a href="#④microservice-userservice" class="headerlink" title="④microservice-userservice"></a>④microservice-userservice</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="number">192.168</span>.<span class="number">31.151</span>:<span class="number">5000</span>/java:<span class="number">8</span>-jre</span><br><span class="line"><span class="keyword">MAINTAINER</span> sh &lt;<span class="number">3300519161</span>@qq.com&gt;</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./target/microservice-userservice-0.0.1-SNAPSHOT.jar \</span></span><br><span class="line"><span class="language-bash">     /app/microservice-userservice.jar</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-Xmx200m&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app/microservice-userservice.jar&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8030</span></span><br></pre></td></tr></table></figure><h3 id="3-修改docker-compose-xml-（替换成自己的IP地址以及数据库密码）"><a href="#3-修改docker-compose-xml-（替换成自己的IP地址以及数据库密码）" class="headerlink" title="3.修改docker-compose.xml （替换成自己的IP地址以及数据库密码）"></a>3.修改docker-compose.xml （替换成自己的IP地址以及数据库密码）</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:<span class="number">5.6</span></span><br><span class="line">    restart: on-failure</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">3306</span>:<span class="number">3306</span></span><br><span class="line">    volumes:</span><br><span class="line">      - microservice-mysql:/var/lib/mysql</span><br><span class="line">    networks:</span><br><span class="line">      - microservice-net</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: <span class="number">215830</span></span><br><span class="line">      MYSQL_DATABASE: microservice_mallmanagement</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      placement:</span><br><span class="line">        constraints: [node.role == manager]</span><br><span class="line"></span><br><span class="line">  eureka-server:</span><br><span class="line">    image: <span class="number">192.168</span>.<span class="number">31.151</span>:<span class="number">5000</span>/microservice-eureka-server:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    restart: on-failure</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8761</span>:<span class="number">8761</span></span><br><span class="line">    networks:</span><br><span class="line">      - microservice-net</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line"></span><br><span class="line">  gateway-zuul:</span><br><span class="line">    image: <span class="number">192.168</span>.<span class="number">31.151</span>:<span class="number">5000</span>/microservice-gateway-zuul:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    restart: on-failure</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8050</span>:<span class="number">8050</span></span><br><span class="line">    networks:</span><br><span class="line">      - microservice-net</span><br><span class="line">    depends_on:</span><br><span class="line">      - eureka-server</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      placement:</span><br><span class="line">        constraints: [node.role == manager]</span><br><span class="line"></span><br><span class="line">  order-service:</span><br><span class="line">    image: <span class="number">192.168</span>.<span class="number">31.151</span>:<span class="number">5000</span>/microservice-orderservice:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    restart: on-failure</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">7900</span>:<span class="number">7900</span></span><br><span class="line">    networks:</span><br><span class="line">      - microservice-net</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">      - eureka-server</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">2</span></span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line"></span><br><span class="line">  <span class="keyword">user</span>-service:</span><br><span class="line">    image: <span class="number">192.168</span>.<span class="number">31.151</span>:<span class="number">5000</span>/microservice-userservice:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    restart: on-failure</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8030</span>:<span class="number">8030</span></span><br><span class="line">    networks:</span><br><span class="line">      - microservice-net</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">      - eureka-server</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">2</span></span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line"></span><br><span class="line">  visualizer:</span><br><span class="line">    image: dockersamples/visualizer:stable</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8081</span>:<span class="number">8080</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /var/<span class="keyword">run</span><span class="language-bash">/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    deploy:</span><br><span class="line">      placement:</span><br><span class="line">        constraints: [node.role == manager]</span><br><span class="line">    networks:</span><br><span class="line">      - microservice-net</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  microservice-net:</span><br><span class="line">volumes:</span><br><span class="line">  microservice-mysql:</span><br></pre></td></tr></table></figure><h3 id="4-将源码文件打包上传虚拟机"><a href="#4-将源码文件打包上传虚拟机" class="headerlink" title="4.将源码文件打包上传虚拟机"></a>4.将源码文件打包上传虚拟机</h3><blockquote><p>利用虚拟机里面的maven工具构建镜像。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /micreservice</span><br><span class="line"><span class="built_in">cd</span> /micreservice</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/23-56-49-2b0d720b50d20c0797fb2ac29b43d07-7cae3e.png" alt="2b0d720b50d20c0797fb2ac29b43d07"></p><h4 id="利用maven工具构建镜像脚本"><a href="#利用maven工具构建镜像脚本" class="headerlink" title="利用maven工具构建镜像脚本"></a>利用maven工具构建镜像脚本</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机静态 IP 地址</span></span><br><span class="line">LOCAL_IP=<span class="variable">$</span>(hostname <span class="literal">-I</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 彩色输出函数</span></span><br><span class="line">print_color() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[<span class="variable">$</span>&#123;1&#125;m<span class="variable">$</span>&#123;2&#125;\033[0m&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">print_color <span class="string">&quot;34&quot;</span> <span class="string">&quot;1、创建目录 /microservice&quot;</span></span><br><span class="line">mkdir /microservice</span><br><span class="line"><span class="built_in">cd</span> /microservice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传压缩包</span></span><br><span class="line">print_color <span class="string">&quot;34&quot;</span> <span class="string">&quot;2、上传 microservice.zip 至 /microservice 目录&quot;</span></span><br><span class="line"><span class="comment"># 这里需要手动上传 microservice.zip 压缩包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">print_color <span class="string">&quot;34&quot;</span> <span class="string">&quot;3、解压 microservice.zip&quot;</span></span><br><span class="line"><span class="keyword">if</span> ! command <span class="literal">-v</span> unzip &amp;&gt; /dev/null; then</span><br><span class="line">    print_color <span class="string">&quot;33&quot;</span> <span class="string">&quot;未安装 unzip,正在安装...&quot;</span></span><br><span class="line">    yum <span class="literal">-y</span> install unzip</span><br><span class="line">fi</span><br><span class="line">unzip microservice.zip</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入解压文件夹</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;切入microservice-mallmanagement文件夹。。。<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="built_in">cd</span> microservice<span class="literal">-mallmanagement</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Maven 使用阿里云镜像源</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;设置 Maven 使用阿里云镜像源...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">mvn mirror:go <span class="literal">-Dmirror</span>.url=https://maven.aliyun.com/repository/public</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">print_color <span class="string">&quot;34&quot;</span> <span class="string">&quot;4、进入 microservice 目录并构建镜像&quot;</span></span><br><span class="line"><span class="built_in">cd</span> microservice</span><br><span class="line">mvn install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证结果</span></span><br><span class="line">print_color <span class="string">&quot;34&quot;</span> <span class="string">&quot;5、验证构建结果&quot;</span></span><br><span class="line">print_color <span class="string">&quot;32&quot;</span> <span class="string">&quot;访问 http://<span class="variable">$</span>&#123;LOCAL_IP&#125;:5000/v2/_catalog 查看镜像库&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="一键化脚本彻底摆脱双手操作"><a href="#一键化脚本彻底摆脱双手操作" class="headerlink" title="一键化脚本彻底摆脱双手操作"></a>一键化脚本彻底摆脱双手操作</h2><blockquote><p>MAINTAINER sh <a href="mailto:&#x33;&#51;&#x30;&#48;&#x35;&#49;&#x39;&#x31;&#54;&#49;&#64;&#x71;&#113;&#46;&#99;&#x6f;&#x6d;">&#x33;&#51;&#x30;&#48;&#x35;&#49;&#x39;&#x31;&#54;&#49;&#64;&#x71;&#113;&#46;&#99;&#x6f;&#x6d;</a> 替换成自己的信息，随便什么这里是写作者的信息的。。。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色变量</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">YELLOW=<span class="string">&#x27;\033[0;33m&#x27;</span></span><br><span class="line">BLUE=<span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">NC=<span class="string">&#x27;\033[0m&#x27;</span> <span class="comment"># No Color</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机 IP 地址</span></span><br><span class="line">LOCAL_IP=<span class="variable">$</span>(hostname <span class="literal">-I</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印开始信息</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;开始执行脚本...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 microservice 目录并进入</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;创建 microservice 目录...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">mkdir <span class="literal">-p</span> /microservice</span><br><span class="line"><span class="built_in">cd</span> /microservice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码文件</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;下载源码文件...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="built_in">wget</span> https://fj.ly93.cc/<span class="number">16</span>/<span class="number">1562883351</span>/microservice.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否安装了 unzip 工具</span></span><br><span class="line"><span class="keyword">if</span> ! command <span class="literal">-v</span> unzip &amp;&gt; /dev/null; then</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;未安装 unzip 工具,开始安装...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    sudo yum install <span class="literal">-y</span> unzip</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压源码文件</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;解压源码文件...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">unzip microservice.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入解压文件夹</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;切入 microservice-mallmanagement 文件夹...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="built_in">cd</span> microservice<span class="literal">-mallmanagement</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 pom.xml 文件中的 IP 地址</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;替换 pom.xml 文件中的 IP 地址...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s/192.168.31.151/<span class="variable">$LOCAL_IP</span>/g&quot;</span> microservice<span class="literal">-eureka-server</span>/pom.xml</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s/192.168.31.151/<span class="variable">$LOCAL_IP</span>/g&quot;</span> microservice<span class="literal">-gateway-zuul</span>/pom.xml</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s/192.168.31.151/<span class="variable">$LOCAL_IP</span>/g&quot;</span> microservice<span class="literal">-orderservice</span>/pom.xml</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s/192.168.31.151/<span class="variable">$LOCAL_IP</span>/g&quot;</span> microservice<span class="literal">-userservice</span>/pom.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 Dockerfile 文件中的 IP 地址</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;修改 Dockerfile 文件中的 IP 地址...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s/192.168.31.151/<span class="variable">$LOCAL_IP</span>/g&quot;</span> microservice<span class="literal">-eureka-server</span>/Dockerfile</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s/192.168.31.151/<span class="variable">$LOCAL_IP</span>/g&quot;</span> microservice<span class="literal">-gateway-zuul</span>/Dockerfile</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s/192.168.31.151/<span class="variable">$LOCAL_IP</span>/g&quot;</span> microservice<span class="literal">-orderservice</span>/Dockerfile</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s/192.168.31.151/<span class="variable">$LOCAL_IP</span>/g&quot;</span> microservice<span class="literal">-userservice</span>/Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 docker-compose.yml 文件中的 IP 地址</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;替换 docker-compose.yml 文件中的 IP 地址...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s/192.168.31.151/<span class="variable">$LOCAL_IP</span>/g&quot;</span> docker<span class="literal">-compose</span>.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 docker-compose-swarm.yml 文件中的 IP 地址</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;替换 docker-compose-swarm.yml 文件中的 IP 地址...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s/192.168.31.151/<span class="variable">$LOCAL_IP</span>/g&quot;</span> docker<span class="literal">-compose-swarm</span>.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Maven 使用阿里云镜像源</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;设置 Maven 使用阿里云镜像源...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">mvn mirror:go <span class="literal">-Dmirror</span>.url=https://maven.aliyun.com/repository/public</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;YELLOW&#125;开始构建镜像...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">mvn clean install <span class="literal">-Dmaven</span>.test.skip=true</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证镜像库</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;验证镜像库...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="built_in">curl</span> http://<span class="variable">$LOCAL_IP:5000</span>/v2/_catalog</span><br><span class="line"></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;脚本执行完成！<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>验证成功：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/01-48-40-image-20240626014840148-1b01bc.png" alt="image-20240626014840148"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/01-01-39-01-00-25-image-20240626010025515-2c17b8-4426e9.png" alt="image-20240626010025515"></p></blockquote><h2 id="第三步：使用docker-compose工具启动项目"><a href="#第三步：使用docker-compose工具启动项目" class="headerlink" title="第三步：使用docker-compose工具启动项目"></a>第三步：使用docker-compose工具启动项目</h2><blockquote><p>老样子使用shell脚本构建</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机IP地址</span></span><br><span class="line">LOCAL_IP=<span class="variable">$</span>(hostname <span class="literal">-I</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置颜色变量</span></span><br><span class="line">RED=<span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">GREEN=<span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">BLUE=<span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">NC=<span class="string">&#x27;\033[0m&#x27;</span> <span class="comment"># 无颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载MySQL镜像</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;下载MySQL镜像...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /opt/mysql.tar https://fj.ly93.cc/<span class="number">16</span>/<span class="number">1562156665</span>/mysql.tar</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]; then</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;MySQL镜像下载成功!<span class="variable">$</span>&#123;NC&#125;\n\n&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;RED&#125;MySQL镜像下载失败,请检查网络连接。<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入MySQL镜像</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;导入MySQL镜像...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">docker load <span class="literal">-i</span> /opt/mysql.tar</span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;MySQL镜像导入成功!<span class="variable">$</span>&#123;NC&#125;\n\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;标记此镜像为私有仓库的镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker tag mysql:<span class="number">5.6</span> <span class="variable">$</span>&#123;LOCAL_IP&#125;:<span class="number">5000</span>/mysql:<span class="number">5.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤10</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;再次启动私服容器<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker <span class="built_in">start</span> registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤11</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;上传标记的镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker push <span class="variable">$</span>&#123;LOCAL_IP&#125;:<span class="number">5000</span>/mysql:<span class="number">5.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载Visualizer镜像</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;下载Visualizer镜像...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> /opt/visualizer.tar https://fj.ly93.cc/<span class="number">16</span>/<span class="number">1563405042</span>/visualizer.tar</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]; then</span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;Visualizer镜像下载成功!<span class="variable">$</span>&#123;NC&#125;\n\n&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    printf <span class="string">&quot;<span class="variable">$</span>&#123;RED&#125;Visualizer镜像下载失败,请检查网络连接。<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入Visualizer镜像</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;导入Visualizer镜像...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">docker load <span class="literal">-i</span> /opt/visualizer.tar</span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;Visualizer镜像导入成功!<span class="variable">$</span>&#123;NC&#125;\n\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;标记此镜像为私有仓库的镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker tag dockersamples/visualizer:stable <span class="variable">$</span>&#123;LOCAL_IP&#125;:<span class="number">5000</span>/dockersamples/visualizer:stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传Visualizer镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;上传Visualizer镜像<span class="variable">$</span>&#123;RESET&#125;&quot;</span></span><br><span class="line">docker push <span class="variable">$</span>&#123;LOCAL_IP&#125;:<span class="number">5000</span>/dockersamples/visualizer:stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 docker-compose.yml 文件中的 mysql:5.6 和 dockersamples/visualizer:stable</span></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s|mysql:5.6|<span class="variable">$</span>&#123;LOCAL_IP&#125;:5000/mysql:5.6|g&quot;</span> /microservice/microservice<span class="literal">-mallmanagement</span>/docker<span class="literal">-compose</span>.yml</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s|dockersamples/visualizer:stable|<span class="variable">$</span>&#123;LOCAL_IP&#125;:5000/dockersamples/visualizer:stable|g&quot;</span> /microservice/microservice<span class="literal">-mallmanagement</span>/docker<span class="literal">-compose</span>.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入项目目录并启动Docker Compose</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;进入项目目录并启动Docker Compose...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /microservice/microservice<span class="literal">-mallmanagement</span></span><br><span class="line">docker<span class="literal">-compose</span> up <span class="literal">-d</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;Docker Compose启动成功!<span class="variable">$</span>&#123;NC&#125;\n\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器状态</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;查看容器状态...<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">docker <span class="built_in">ps</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;容器已成功启动!<span class="variable">$</span>&#123;NC&#125;\n\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;BLUE&#125;浏览器访问: http://<span class="variable">$</span>&#123;LOCAL_IP&#125;:8761<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line">printf <span class="string">&quot;<span class="variable">$</span>&#123;GREEN&#125;请在浏览器中访问上述链接,验证是否成功启动。<span class="variable">$</span>&#123;NC&#125;\n&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>启动成功：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/02-23-22-image-20240626022321985-d79c2d.png" alt="image-20240626022321985"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/02-24-21-image-20240626022421016-43c47c.png" alt="image-20240626022421016"></p></blockquote><h2 id="第四步：构建gogs-jenkins实现自动化部署"><a href="#第四步：构建gogs-jenkins实现自动化部署" class="headerlink" title="第四步：构建gogs+jenkins实现自动化部署"></a>第四步：构建gogs+jenkins实现自动化部署</h2><h3 id="1-先删除之前构建的镜像以及docker-compose容器"><a href="#1-先删除之前构建的镜像以及docker-compose容器" class="headerlink" title="1.先删除之前构建的镜像以及docker-compose容器"></a>1.先删除之前构建的镜像以及docker-compose容器</h3><h4 id="①停止并删除运行容器"><a href="#①停止并删除运行容器" class="headerlink" title="①停止并删除运行容器"></a>①停止并删除运行容器</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">-aq</span>)</span><br><span class="line">docker <span class="built_in">rm</span> <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">-aq</span>)</span><br></pre></td></tr></table></figure><h4 id="②删除其他有关microservice的镜像"><a href="#②删除其他有关microservice的镜像" class="headerlink" title="②删除其他有关microservice的镜像"></a>②删除其他有关microservice的镜像</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除命令</span></span><br><span class="line">docker rmi [<span class="type">IMAGE</span> <span class="type">ID</span>]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/02-34-20-image-20240626023420650-7eeb19.png" alt="image-20240626023420650"></p><h3 id="2-重新启动私有仓库容器并上传java-jre-8"><a href="#2-重新启动私有仓库容器并上传java-jre-8" class="headerlink" title="2.重新启动私有仓库容器并上传java:jre-8"></a>2.重新启动私有仓库容器并上传java:jre-8</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-di</span> <span class="literal">--name</span>=registry <span class="literal">-p</span> <span class="number">5000</span>:<span class="number">5000</span> registry</span><br><span class="line">docker push <span class="number">192.168</span>.<span class="number">31.151</span>:<span class="number">5000</span>/java:<span class="number">8</span><span class="literal">-jre</span>  <span class="comment">#注意替换IP</span></span><br></pre></td></tr></table></figure><h2 id="第五步：搭建gogs服务器（可再开一台机子【sh2】）"><a href="#第五步：搭建gogs服务器（可再开一台机子【sh2】）" class="headerlink" title="第五步：搭建gogs服务器（可再开一台机子【sh2】）"></a>第五步：搭建gogs服务器（可再开一台机子【sh2】）</h2><h3 id="①导入gogs镜像"><a href="#①导入gogs镜像" class="headerlink" title="①导入gogs镜像"></a>①导入gogs镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"><span class="built_in">wget</span> https://fj.ly93.cc/<span class="number">16</span>/<span class="number">1562400565</span>/gogs.tar </span><br><span class="line">docker load <span class="literal">-i</span> /opt/gogs.tar </span><br></pre></td></tr></table></figure><h3 id="②启动容器"><a href="#②启动容器" class="headerlink" title="②启动容器"></a>②启动容器</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> <span class="literal">-p</span> <span class="number">10022</span>:<span class="number">22</span> <span class="literal">-p</span> <span class="number">13000</span>:<span class="number">3000</span> <span class="literal">-v</span> /var/gogs:/<span class="keyword">data</span> gogs/gogs</span><br></pre></td></tr></table></figure><h3 id="③浏览器访问ip-13000，进行初始化设置"><a href="#③浏览器访问ip-13000，进行初始化设置" class="headerlink" title="③浏览器访问ip:13000，进行初始化设置"></a>③浏览器访问ip:13000，进行初始化设置</h3><blockquote><p>注意IP地址替换成二机的其他端口自定义</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-15-34-image-20240626031534758-da6159.png" alt="image-20240626031534758"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/02-57-06-image-20240626025706260-6fb6dd.png" alt="image-20240626025706260"></p><h3 id="④配置好后点击立即安装"><a href="#④配置好后点击立即安装" class="headerlink" title="④配置好后点击立即安装"></a>④配置好后点击立即安装</h3><h2 id="第六步：创建仓库并上传代码"><a href="#第六步：创建仓库并上传代码" class="headerlink" title="第六步：创建仓库并上传代码"></a>第六步：创建仓库并上传代码</h2><h3 id="①-创建仓库"><a href="#①-创建仓库" class="headerlink" title="① 创建仓库"></a>① 创建仓库</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/02-59-07-image-20240626025907845-3ec68b.png" alt="image-20240626025907845"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-00-05-image-20240626030005074-01f5e5.png" alt="image-20240626030005074"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-06-33-image-20240626030633762-ddf177.png" alt="image-20240626030633762"></p><h3 id="②回到sh1机子上传代码"><a href="#②回到sh1机子上传代码" class="headerlink" title="②回到sh1机子上传代码"></a>②回到sh1机子上传代码</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装git</span></span><br><span class="line">yum install <span class="literal">-y</span> git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到项目目录</span></span><br><span class="line"><span class="built_in">cd</span> /microservice/microservice<span class="literal">-mallmanagement</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#移除原先存在的.git文件</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> .git</span><br><span class="line"><span class="comment"># 初始化git仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局用户名</span></span><br><span class="line">git config <span class="literal">--global</span> user.name <span class="string">&quot;root&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局电子邮件地址</span></span><br><span class="line">git config <span class="literal">--global</span> user.email <span class="string">&quot;root@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交更改，附带提交信息</span></span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;first commit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库，注意这里的git地址是上面上传项目生成的地址！</span></span><br><span class="line">git remote add origin http://<span class="number">192.168</span>.<span class="number">31.152</span>:<span class="number">13000</span>/root/microservice.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送代码到远程仓库的master分支，并设置默认上游分支</span></span><br><span class="line">git push <span class="literal">-u</span> origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要验证密码，请输入管理员账号密码,账号密码就是刚才创建的管理员账号密码</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>提交成功</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-22-58-image-20240626032258194-cc0b0c.png" alt="image-20240626032258194"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-23-15-image-20240626032315748-7eff29.png" alt="image-20240626032315748"></p></blockquote><h2 id="第七步：构建jenkins（sh1）"><a href="#第七步：构建jenkins（sh1）" class="headerlink" title="第七步：构建jenkins（sh1）"></a>第七步：构建jenkins（sh1）</h2><h3 id="①jenkins准备"><a href="#①jenkins准备" class="headerlink" title="①jenkins准备"></a>①jenkins准备</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建jenkins目录</span></span><br><span class="line">mkdir /opt/jenkins</span><br><span class="line"><span class="built_in">cd</span> /opt/jenkins</span><br><span class="line"><span class="comment">#下载jenkins.war文件</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> jenkins.war https://dlink.host/<span class="number">1</span>drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBaVlDNncwZHotYlJlc3preXI4cG5FSVZ6VlU_ZT1pZ3E3N3Y.war <span class="comment">#提权</span></span><br><span class="line">chmod +x /opt/jenkins/jenkins.war</span><br></pre></td></tr></table></figure><h3 id="②启动jenkiins"><a href="#②启动jenkiins" class="headerlink" title="②启动jenkiins"></a>②启动jenkiins</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载字体库</span></span><br><span class="line">yum install dejavu<span class="literal">-sans-fonts</span> <span class="literal">-y</span></span><br><span class="line">yum install fontconfig <span class="literal">-y</span></span><br><span class="line"><span class="built_in">fc</span><span class="literal">-cache</span> <span class="literal">--force</span></span><br><span class="line"><span class="comment">#原神启动</span></span><br><span class="line">java <span class="literal">-jar</span> /opt/jenkins/jenkins.war <span class="literal">--httpPort</span>=<span class="number">9090</span></span><br></pre></td></tr></table></figure><h3 id="④浏览器访问-http-你的IP-9090"><a href="#④浏览器访问-http-你的IP-9090" class="headerlink" title="④浏览器访问 http:&#x2F;&#x2F;你的IP:9090&#x2F;"></a>④浏览器访问 http:&#x2F;&#x2F;你的IP:9090&#x2F;</h3><blockquote><p>运行完后会生成密码</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-35-47-image-20240626033547246-e21be2.png" alt="image-20240626033547246"></p></blockquote><h3 id="⑤将生成的密码贴入首页"><a href="#⑤将生成的密码贴入首页" class="headerlink" title="⑤将生成的密码贴入首页"></a>⑤将生成的密码贴入首页</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-36-15-image-20240626033615850-01f960.png" alt="image-20240626033615850"></p><h3 id="⑥选择插件安装"><a href="#⑥选择插件安装" class="headerlink" title="⑥选择插件安装"></a>⑥选择插件安装</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-37-12-image-20240626033712004-78b06a.png" alt="image-20240626033712004"></p><h3 id="⑦选择”无“，然后安装"><a href="#⑦选择”无“，然后安装" class="headerlink" title="⑦选择”无“，然后安装"></a>⑦选择”无“，然后安装</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-37-50-image-20240626033750382-504d90.png" alt="image-20240626033750382"></p><h3 id="⑧创建用户-点击保存并完成"><a href="#⑧创建用户-点击保存并完成" class="headerlink" title="⑧创建用户-点击保存并完成"></a>⑧创建用户-点击保存并完成</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-38-18-image-20240626033818236-ddfb93.png" alt="image-20240626033818236"></p><h3 id="⑨实例配置-点击现在不要"><a href="#⑨实例配置-点击现在不要" class="headerlink" title="⑨实例配置-点击现在不要"></a>⑨实例配置-点击现在不要</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-39-17-image-20240626033917776-9413af.png" alt="image-20240626033917776"></p><h3 id="⑩开始使用jenkins"><a href="#⑩开始使用jenkins" class="headerlink" title="⑩开始使用jenkins"></a>⑩开始使用jenkins</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-39-45-image-20240626033945364-bcb0e6.png" alt="image-20240626033945364"></p><h2 id="第八步：安装插件"><a href="#第八步：安装插件" class="headerlink" title="第八步：安装插件"></a>第八步：安装插件</h2><h3 id="①首页点击Manager-Jenkins"><a href="#①首页点击Manager-Jenkins" class="headerlink" title="①首页点击Manager Jenkins"></a>①首页点击Manager Jenkins</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-40-48-image-20240626034048170-1a90e6.png" alt="image-20240626034048170"></p><h3 id="②安装插件"><a href="#②安装插件" class="headerlink" title="②安装插件"></a>②安装插件</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-41-12-image-20240626034112507-dc2be3.png" alt="image-20240626034112507"></p><h3 id="③换清华源"><a href="#③换清华源" class="headerlink" title="③换清华源"></a>③换清华源</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/<span class="built_in">update-center</span>.json</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-42-25-image-20240626034224934-c0ef65.png" alt="image-20240626034224934"></p><h3 id="④安装maven插件"><a href="#④安装maven插件" class="headerlink" title="④安装maven插件"></a>④安装maven插件</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-43-26-image-20240626034326718-cb4faa.png" alt="image-20240626034326718"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-45-43-image-20240626034543149-2fa871.png" alt="image-20240626034543149"></p><h3 id="⑤安装git"><a href="#⑤安装git" class="headerlink" title="⑤安装git"></a>⑤安装git</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-46-26-image-20240626034626357-cc098f.png" alt="image-20240626034626357"></p><h3 id="⑥配置Java环境和Mvn环境"><a href="#⑥配置Java环境和Mvn环境" class="headerlink" title="⑥配置Java环境和Mvn环境"></a>⑥配置Java环境和Mvn环境</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-50-29-image-20240626035029246-7bfac8.png" alt="image-20240626035029246"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-52-11-image-20240626035211324-55ad63.png" alt="image-20240626035211324"></p><h3 id="⑦创建工程"><a href="#⑦创建工程" class="headerlink" title="⑦创建工程"></a>⑦创建工程</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-52-44-image-20240626035244495-7e253a.png" alt="image-20240626035244495"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-53-03-image-20240626035303926-014b24.png" alt="image-20240626035303926"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-53-55-image-20240626035354986-8a17e1.png" alt="image-20240626035354986"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-54-30-image-20240626035430046-c54304.png" alt="image-20240626035430046"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-54-52-image-20240626035452855-739d44.png" alt="image-20240626035452855"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="literal">-compose</span> up <span class="literal">-d</span></span><br></pre></td></tr></table></figure><h3 id="⑧保存退出"><a href="#⑧保存退出" class="headerlink" title="⑧保存退出"></a>⑧保存退出</h3><h2 id="第九步：构建项目"><a href="#第九步：构建项目" class="headerlink" title="第九步：构建项目"></a>第九步：构建项目</h2><h3 id="①构建项目"><a href="#①构建项目" class="headerlink" title="①构建项目"></a>①构建项目</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-55-56-image-20240626035556266-664b22.png" alt="image-20240626035556266"></p><h3 id="②查看控制台输出"><a href="#②查看控制台输出" class="headerlink" title="②查看控制台输出"></a>②查看控制台输出</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/03-56-33-image-20240626035633888-9817aa.png" alt="image-20240626035633888"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/04-14-46-image-20240626041446556-2a7bab.png" alt="image-20240626041446556"></p><h3 id="③构建成功"><a href="#③构建成功" class="headerlink" title="③构建成功"></a>③构建成功</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/04-09-11-image-20240626040911373-930fd9.png" alt="image-20240626040911373"></p><p>④访问 IP：8761 验证</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/04-09-47-image-20240626040947433-a5df7c.png" alt="image-20240626040947433"></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/26/04-24-43-image-20240626042443503-dc148b.png" alt="image-20240626042443503"></p><p><img src="https://img1.wallspic.com/previews/4/1/7/6/4/146714/146714-hei_se_de-bai_se-da_hai-jian_yue-feng_bo-x750.jpg" alt="简约, 白色, 黑色的, 大海, 风波 壁纸 4857x3238 允许"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Jenkins </tag>
            
            <tag> Gogs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2024/06/25/Docker/"/>
      <url>/2024/06/25/Docker/</url>
      
        <content type="html"><![CDATA[<p>学习目标：</p><ul><li><p>掌握Docker基础知识，能够理解Docker镜像与容器的概念</p></li><li><p>完成Docker安装与启动</p></li><li><p>掌握Docker镜像与容器相关命令</p></li><li><p>掌握Tomcat Nginx 等软件的常用应用的安装</p></li><li><p>掌握docker迁移与备份相关命令</p></li><li><p>能够运用Dockerfile编写创建容器的脚本</p></li><li><p>能够搭建与使用docker私有仓库</p></li></ul><h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1 Docker简介"></a>1 Docker简介</h1><h2 id="1-1-什么是虚拟化"><a href="#1-1-什么是虚拟化" class="headerlink" title="1.1 什么是虚拟化"></a>1.1 什么是虚拟化</h2><p>​在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p><p>​在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用</p><p>​虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p><h2 id="1-2-什么是Docker"><a href="#1-2-什么是Docker" class="headerlink" title="1.2 什么是Docker"></a>1.2 什么是Docker</h2><p>​Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker">GitHub</a> 上进行维护。</p><p>​<img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/08-58-01-1-3-8839ca.png"></p><p>​Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p><p>​Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p><p>​在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><p>为什么选择Docker?</p><p>（1）上手快。</p><p>​用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。</p><p>         随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</p><p>（2）职责的逻辑分类</p><p>​使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p><p>（3）快速高效的开发生命周期</p><p>​Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</p><p>（4）鼓励使用面向服务的架构</p><p>​Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</p><h2 id="1-3-容器与虚拟机比较"><a href="#1-3-容器与虚拟机比较" class="headerlink" title="1.3 容器与虚拟机比较"></a>1.3 容器与虚拟机比较</h2><p>​下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/08-58-03-1-1-c33ea8.png"></p><p>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p><h2 id="1-4-Docker-组件"><a href="#1-4-Docker-组件" class="headerlink" title="1.4 Docker 组件"></a>1.4 Docker 组件</h2><h3 id="1-4-1-Docker服务器与客户端"><a href="#1-4-1-Docker服务器与客户端" class="headerlink" title="1.4.1 Docker服务器与客户端"></a>1.4.1 Docker服务器与客户端</h3><p>​Docker是一个客户端-服务器（C&#x2F;S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/25/08-58-05-1-2-7675df.png"></p><h3 id="1-4-2-Docker镜像与容器"><a href="#1-4-2-Docker镜像与容器" class="headerlink" title="1.4.2 Docker镜像与容器"></a>1.4.2 Docker镜像与容器</h3><p>​镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</p><p>添加一个文件；</p><p>执行一个命令；</p><p>打开一个窗口。</p><p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p><p>​Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。  容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。</p><p>所以Docker容器就是：</p><p>​一个镜像格式；</p><p>​一些列标准操作；</p><p>​一个执行环境。</p><p>​Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。</p><p>         和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。</p><p>         Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</p><h3 id="1-4-3-Registry（注册中心）"><a href="#1-4-3-Registry（注册中心）" class="headerlink" title="1.4.3 Registry（注册中心）"></a>1.4.3 Registry（注册中心）</h3><p>​Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。</p><p>​<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h1 id="2-Docker安装与启动"><a href="#2-Docker安装与启动" class="headerlink" title="2 Docker安装与启动"></a>2 Docker安装与启动</h1><h2 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h2><p>​Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p><p>​由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。</p><p>​请直接挂载课程配套的Centos7.x镜像</p><p>（1）yum 包更新到最新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>（3）设置yum源为阿里云</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>（4）安装docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p>（5）安装后查看docker版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="2-2-设置ustc的镜像"><a href="#2-2-设置ustc的镜像" class="headerlink" title="2.2 设置ustc的镜像"></a>2.2 设置ustc的镜像</h2><p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p><p>编辑该文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json  </span><br></pre></td></tr></table></figure><p>在该文件中输入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-Docker的启动与停止"><a href="#2-3-Docker的启动与停止" class="headerlink" title="2.3 Docker的启动与停止"></a>2.3 Docker的启动与停止</h2><p><strong>systemctl</strong>命令是系统服务管理器指令</p><p>启动docker：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>停止docker：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>重启docker：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>查看docker状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>开机启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p>查看docker概要信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>查看docker帮助文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --help</span><br></pre></td></tr></table></figure><h1 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3 常用命令"></a>3 常用命令</h1><h2 id="3-1-镜像相关命令"><a href="#3-1-镜像相关命令" class="headerlink" title="3.1 镜像相关命令"></a>3.1 镜像相关命令</h2><h3 id="3-1-1-查看镜像"><a href="#3-1-1-查看镜像" class="headerlink" title="3.1.1 查看镜像"></a>3.1.1 查看镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>REPOSITORY：镜像名称</p><p>TAG：镜像标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像的创建日期（不是获取该镜像的日期）</p><p>SIZE：镜像大小</p><p>这些镜像都是存储在Docker宿主机的&#x2F;var&#x2F;lib&#x2F;docker目录下</p><h3 id="3-1-2-搜索镜像"><a href="#3-1-2-搜索镜像" class="headerlink" title="3.1.2 搜索镜像"></a>3.1.2 搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure><p>NAME：仓库名称</p><p>DESCRIPTION：镜像描述</p><p>STARS：用户评价，反应一个镜像的受欢迎程度</p><p>OFFICIAL：是否官方</p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><h3 id="3-1-3-拉取镜像"><a href="#3-1-3-拉取镜像" class="headerlink" title="3.1.3 拉取镜像"></a>3.1.3 拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure><p>例如，我要下载centos7镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:7</span><br></pre></td></tr></table></figure><h3 id="3-1-4-删除镜像"><a href="#3-1-4-删除镜像" class="headerlink" title="3.1.4 删除镜像"></a>3.1.4 删除镜像</h3><p>按镜像ID删除镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure><p>删除所有镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi `docker images -q`</span><br></pre></td></tr></table></figure><h2 id="3-2-容器相关命令"><a href="#3-2-容器相关命令" class="headerlink" title="3.2 容器相关命令"></a>3.2 容器相关命令</h2><h3 id="3-2-1-查看容器"><a href="#3-2-1-查看容器" class="headerlink" title="3.2.1 查看容器"></a>3.2.1 查看容器</h3><p>查看正在运行的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看所有容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps –a</span><br></pre></td></tr></table></figure><p>查看最后一次运行的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps –l</span><br></pre></td></tr></table></figure><p>查看停止的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -f status=exited</span><br></pre></td></tr></table></figure><h3 id="3-2-2-创建与启动容器"><a href="#3-2-2-创建与启动容器" class="headerlink" title="3.2.2 创建与启动容器"></a>3.2.2 创建与启动容器</h3><p>创建容器常用的参数说明：</p><p>创建容器命令：docker run</p><p> -i：表示运行容器</p><p> -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</p><p> –name :为创建的容器命名。</p><p> -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p><p> -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p><p> -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</p><p>（1）交互式方式创建容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=容器名称 镜像名称:标签 /bin/bash</span><br></pre></td></tr></table></figure><p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态  </p><p>退出当前容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>（2）守护式方式创建容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=容器名称 镜像名称:标签</span><br></pre></td></tr></table></figure><p>登录守护式容器方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器名称 (或者容器ID)  /bin/bash</span><br></pre></td></tr></table></figure><h3 id="3-2-3-停止与启动容器"><a href="#3-2-3-停止与启动容器" class="headerlink" title="3.2.3 停止与启动容器"></a>3.2.3 停止与启动容器</h3><p>停止容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure><p>启动容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure><h3 id="3-2-4-文件拷贝"><a href="#3-2-4-文件拷贝" class="headerlink" title="3.2.4 文件拷贝"></a>3.2.4 文件拷贝</h3><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 需要拷贝的文件或目录 容器名称:容器目录</span><br></pre></td></tr></table></figure><p>也可以将文件从容器内拷贝出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure><h3 id="3-2-5-目录挂载"><a href="#3-2-5-目录挂载" class="headerlink" title="3.2.5 目录挂载"></a>3.2.5 目录挂载</h3><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>创建容器 添加-v参数 后边为   宿主机目录:容器目录，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7</span><br></pre></td></tr></table></figure><p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p><p>这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数  –privileged&#x3D;true  来解决挂载的目录没有权限的问题</p><h3 id="3-2-6-查看容器IP地址"><a href="#3-2-6-查看容器IP地址" class="headerlink" title="3.2.6 查看容器IP地址"></a>3.2.6 查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称（容器ID） </span><br></pre></td></tr></table></figure><p>也可以直接执行下面的命令直接输出IP地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h3 id="3-2-7-删除容器"><a href="#3-2-7-删除容器" class="headerlink" title="3.2.7 删除容器"></a>3.2.7 删除容器</h3><p>删除指定的容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h1 id="4-应用部署"><a href="#4-应用部署" class="headerlink" title="4 应用部署"></a>4 应用部署</h1><h2 id="4-1-MySQL部署"><a href="#4-1-MySQL部署" class="headerlink" title="4.1 MySQL部署"></a>4.1 MySQL部署</h2><p>（1）拉取mysql镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos/mysql-57-centos7</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure><p>-p 代表端口映射，格式为  宿主机映射端口:容器运行端口</p><p>-e 代表添加环境变量  MYSQL_ROOT_PASSWORD  是root用户的登陆密码</p><p>（3）远程登录mysql</p><p>连接宿主机的IP  ,指定端口为33306 </p><h2 id="4-2-tomcat部署"><a href="#4-2-tomcat部署" class="headerlink" title="4.2 tomcat部署"></a>4.2 tomcat部署</h2><p>（1）拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat:7-jre7</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><p>创建容器  -p表示地址映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=mytomcat -p 9000:8080 </span><br><span class="line">-v /usr/local/webapps:/usr/local/tomcat/webapps tomcat:7-jre7</span><br></pre></td></tr></table></figure><h2 id="4-3-Nginx部署"><a href="#4-3-Nginx部署" class="headerlink" title="4.3 Nginx部署"></a>4.3 Nginx部署</h2><p>（1）拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>（2）创建Nginx容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=mynginx -p 80:80 nginx</span><br></pre></td></tr></table></figure><h2 id="4-4-Redis部署"><a href="#4-4-Redis部署" class="headerlink" title="4.4 Redis部署"></a>4.4 Redis部署</h2><p>（1）拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=myredis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h1 id="5-迁移与备份"><a href="#5-迁移与备份" class="headerlink" title="5 迁移与备份"></a>5 迁移与备份</h1><h2 id="5-1-容器保存为镜像"><a href="#5-1-容器保存为镜像" class="headerlink" title="5.1 容器保存为镜像"></a>5.1 容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit mynginx mynginx_i</span><br></pre></td></tr></table></figure><h2 id="5-2-镜像备份"><a href="#5-2-镜像备份" class="headerlink" title="5.2 镜像备份"></a>5.2 镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker  save -o mynginx.tar mynginx_i</span><br></pre></td></tr></table></figure><h2 id="5-3-镜像恢复与迁移"><a href="#5-3-镜像恢复与迁移" class="headerlink" title="5.3 镜像恢复与迁移"></a>5.3 镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像  然后执行此命令进行恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i mynginx.tar</span><br></pre></td></tr></table></figure><p>-i 输入的文件</p><p>执行后再次查看镜像，可以看到镜像已经恢复</p><h1 id="6-Dockerfile"><a href="#6-Dockerfile" class="headerlink" title="6 Dockerfile"></a>6 Dockerfile</h1><h2 id="6-1-什么是Dockerfile"><a href="#6-1-什么是Dockerfile" class="headerlink" title="6.1 什么是Dockerfile"></a>6.1 什么是Dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p><p>1、对于开发人员：可以为开发团队提供一个完全一致的开发环境；<br>2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了；<br>3、对于运维人员：在部署时，可以实现应用的无缝移植。</p><h2 id="6-2-常用命令"><a href="#6-2-常用命令" class="headerlink" title="6.2 常用命令"></a>6.2 常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>FROM image_name:tag</td><td>定义了使用哪个基础镜像启动构建流程</td></tr><tr><td>MAINTAINER user_name</td><td>声明镜像的创建者</td></tr><tr><td>ENV key value</td><td>设置环境变量 (可以写多条)</td></tr><tr><td>RUN command</td><td>是Dockerfile的核心部分(可以写多条)</td></tr><tr><td>ADD source_dir&#x2F;file dest_dir&#x2F;file</td><td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td></tr><tr><td>COPY source_dir&#x2F;file dest_dir&#x2F;file</td><td>和ADD相似，但是如果有压缩文件并不能解压</td></tr><tr><td>WORKDIR path_dir</td><td>设置工作目录</td></tr></tbody></table><h2 id="6-3-使用脚本创建镜像"><a href="#6-3-使用脚本创建镜像" class="headerlink" title="6.3 使用脚本创建镜像"></a>6.3 使用脚本创建镜像</h2><p>步骤：</p><p>（1）创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir –p /usr/local/dockerjdk8</span><br></pre></td></tr></table></figure><p>（2）下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的&#x2F;usr&#x2F;local&#x2F;dockerjdk8目录</p><p>（3）创建文件Dockerfile  <code>vi Dockerfile</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#依赖镜像名称和ID</span><br><span class="line">FROM centos:7</span><br><span class="line">#指定镜像创建者信息</span><br><span class="line">MAINTAINER ITCAST</span><br><span class="line">#切换工作目录</span><br><span class="line">WORKDIR /usr</span><br><span class="line">RUN mkdir  /usr/local/java</span><br><span class="line">#ADD 是相对路径jar,把java添加到容器中</span><br><span class="line">ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/</span><br><span class="line"></span><br><span class="line">#配置java环境变量</span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8.0_171</span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>（4）执行命令构建镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=&#x27;jdk1.8&#x27; .</span><br></pre></td></tr></table></figure><p>注意后边的空格和点，不要省略</p><p>（5）查看镜像是否建立完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h1 id="7-Docker私有仓库"><a href="#7-Docker私有仓库" class="headerlink" title="7 Docker私有仓库"></a>7 Docker私有仓库</h1><h2 id="7-1-私有仓库搭建与配置"><a href="#7-1-私有仓库搭建与配置" class="headerlink" title="7.1 私有仓库搭建与配置"></a>7.1 私有仓库搭建与配置</h2><p>（1）拉取私有仓库镜像（此步省略）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><p>（2）启动私有仓库容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure><p>（3）打开浏览器 输入地址<a href="http://192.168.184.141:5000/v2/_catalog%E7%9C%8B%E5%88%B0%60%7B%22repositories%22:[]%7D%60">http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`</a> 表示私有仓库搭建成功并且内容为空</p><p>（4）修改daemon.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加以下内容，保存退出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;192.168.184.141:5000&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><p>此步用于让 docker信任私有仓库地址</p><p>（5）重启docker 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="7-2-镜像上传至私有仓库"><a href="#7-2-镜像上传至私有仓库" class="headerlink" title="7.2 镜像上传至私有仓库"></a>7.2 镜像上传至私有仓库</h2><p>（1）标记此镜像为私有仓库的镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag jdk1.8 192.168.184.141:5000/jdk1.8</span><br></pre></td></tr></table></figure><p>（2）再次启动私服容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start registry</span><br></pre></td></tr></table></figure><p>（3）上传标记的镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.184.141:5000/jdk1.8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 软件类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql的几种安装方式</title>
      <link href="/2024/06/23/MySql%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/"/>
      <url>/2024/06/23/MySql%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql安装与配置概览"><a href="#MySql安装与配置概览" class="headerlink" title="MySql安装与配置概览"></a>MySql安装与配置概览</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/16-42-21-Screenshotundefined2024-06-23undefinedatundefined16-41-45undefined-21adbc.png"></p><h2 id="1、MySQL安装方式"><a href="#1、MySQL安装方式" class="headerlink" title="1、MySQL安装方式"></a>1、MySQL安装方式</h2><p>二进制软件包安装</p><p>① yum安装或rpm安装（略）</p><p>② glibc版本安装（相当于Windows中的绿色软件）</p><p>命名：&#x3D;&#x3D;mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz&#x3D;&#x3D; </p><p>依赖[^glibc]库，可以安装在通用的Linux系统下</p><p>源码包编译安装</p><p>命名：mysql-5.7.31.tar.gz，通用的Linux下都可以编译安装。</p><h2 id="2、三种安装方式的区别"><a href="#2、三种安装方式的区别" class="headerlink" title="2、三种安装方式的区别"></a>2、三种安装方式的区别</h2><table><thead><tr><th>安装方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>rpm</td><td>安装卸载简单</td><td>可定制性差</td></tr><tr><td>glibc</td><td>可定制性相比rpm包灵活些</td><td>安装相比rpm包复杂些，需要手动初始化数据库</td></tr><tr><td>源码安装</td><td>可定制性最强，根据需求和功能定制</td><td>安装麻烦，需要手动初始化数据库</td></tr></tbody></table><blockquote><p>在企业中，数据库的安装很少使用rpm方式，大部分都是基于源码安装以及glibc安装！</p></blockquote><h2 id="3、区分数据库与数据库实例"><a href="#3、区分数据库与数据库实例" class="headerlink" title="3、区分数据库与数据库实例"></a>3、区分数据库与数据库实例</h2><h4 id="㈠-什么是MySQL数据库？"><a href="#㈠-什么是MySQL数据库？" class="headerlink" title="㈠ 什么是MySQL数据库？"></a>㈠ 什么是MySQL数据库？</h4><p><strong>数据库（database）：</strong> 操作系统或存储上的&#x3D;&#x3D;数据文件的集合&#x3D;&#x3D;。mysql数据库中，数据库文件可以是* .frm、*.MYD、*.MYI、*.ibd等结尾的文件， 不同存储引擎文件类型不同。</p><h4 id="㈡-什么是MySQL数据库实例？"><a href="#㈡-什么是MySQL数据库实例？" class="headerlink" title="㈡ 什么是MySQL数据库实例？"></a>㈡ 什么是MySQL数据库实例？</h4><p><strong>数据库实例（instance）：</strong> 由&#x3D;&#x3D;后台进程或者线程&#x3D;&#x3D;以及一个&#x3D;&#x3D;共享内存区&#x3D;&#x3D;组成。共享内存可以被运行的后台线程所共享。 数据库实例才是真正操作数据库的。</p><p>注意：MySQL的后台守护程序&#x3D;&#x3D;mysqld&#x3D;&#x3D;是单进程多线程的工作模式。</p><h4 id="㈢-什么是MySQL数据库服务器？"><a href="#㈢-什么是MySQL数据库服务器？" class="headerlink" title="㈢ 什么是MySQL数据库服务器？"></a>㈢ 什么是MySQL数据库服务器？</h4><p><strong>数据库服务器(database server)：</strong>部署&#x3D;&#x3D;安装数据库实例&#x3D;&#x3D;的服务器。</p><h4 id="㈣-数据库和数据库实例之间的关系是什么？"><a href="#㈣-数据库和数据库实例之间的关系是什么？" class="headerlink" title="㈣ 数据库和数据库实例之间的关系是什么？"></a>㈣ 数据库和数据库实例之间的关系是什么？</h4><p>通常情况下，数据库实例和数据库是一一对应的关系，也就是&#x3D;&#x3D;一个数据库实例对应一个数据库&#x3D;&#x3D;； 但是，在集群环境中存在&#x3D;&#x3D;多个数据库实例共同使用一个数据库&#x3D;&#x3D;。oracle RAC</p><h1 id="四、MySQL的GLIBC版本安装"><a href="#四、MySQL的GLIBC版本安装" class="headerlink" title="四、MySQL的GLIBC版本安装"></a>四、MySQL的GLIBC版本安装</h1><h2 id="1、获取MySQL-GLIBC版本"><a href="#1、获取MySQL-GLIBC版本" class="headerlink" title="1、获取MySQL GLIBC版本"></a>1、获取MySQL GLIBC版本</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/16-29-06-16-28-33-image-20200824114350352-af6fc8-d69769.png" alt="image-20200824114350352"></p><h2 id="2、学会看官方文档"><a href="#2、学会看官方文档" class="headerlink" title="2、学会看官方文档"></a>2、学会看官方文档</h2><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/16-29-15-16-28-33-image-20200824114911039-0aace9-d70b28.png" alt="image-20200824114911039"></p><h2 id="3、安装MySQL依赖库软件"><a href="#3、安装MySQL依赖库软件" class="headerlink" title="3、安装MySQL依赖库软件"></a>3、安装MySQL依赖库软件</h2><p>第一步：克隆模板机，生成MySQL服务器</p><p>第二步：启动系统</p><p>第三步：更改主机名称为mysql.itcast.cn，然后重启网络</p><p>第四步：拍摄快照</p><p>第五步：安装依赖库libaio库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install libaio -y</span></span><br></pre></td></tr></table></figure><h2 id="4、上传软件包解压，了解目录结构"><a href="#4、上传软件包解压，了解目录结构" class="headerlink" title="4、上传软件包解压，了解目录结构"></a>4、上传软件包解压，了解目录结构</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar -xf mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz</span></span><br><span class="line"><span class="comment"># ls mysql-5.7.31-linux-glibc2.12-x86_64</span></span><br></pre></td></tr></table></figure><p>解压完成后，目录结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/16-29-16-image-20200824115716608-cc8d61.png" alt="image-20200824115716608"></p><p>安装需求：</p><table><thead><tr><th>选项</th><th>值（自定义也可以采用默认形式）</th></tr></thead><tbody><tr><td>安装路径</td><td>&#x2F;mysql_3306</td></tr><tr><td>数据路径</td><td>&#x2F;mysql_3306&#x2F;data</td></tr><tr><td>端口号</td><td>3306</td></tr></tbody></table><h2 id="5、软件的安装（查看官方说明）"><a href="#5、软件的安装（查看官方说明）" class="headerlink" title="5、软件的安装（查看官方说明）"></a>5、软件的安装（查看官方说明）</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html">https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/16-29-17-image-20200824120143999-3b43b8.png" alt="image-20200824120143999"></p><p>第一步：创建一个数据库专用账号mysql（其所属组也为mysql）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># useradd -r -s /sbin/nologin mysql</span></span><br><span class="line"><span class="comment"># id mysql</span></span><br></pre></td></tr></table></figure><p>第二步：清空系统中的原有mariadb的配置文件(&#x2F;etc&#x2F;my.cnf)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rm -rf /etc/my.cnf</span></span><br></pre></td></tr></table></figure><p>第三步：把mysql解压后的压缩包（GBLIC版本）移动到&#x2F;根目录下，然后更名为mysql_3306</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mv mysql-5.7.31-linux-glibc2.12-x86_64 /mysql_3306</span></span><br></pre></td></tr></table></figure><p>第四步：切换到mysql工作目录&#x2F;mysql_3306，创建一个mysql-files</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /mysql_3306</span></span><br><span class="line"><span class="comment"># mkdir mysql-files</span></span><br></pre></td></tr></table></figure><p>第五步：更改mysql-files权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chown mysql:mysql mysql-files</span></span><br><span class="line"><span class="comment"># chmod 750 mysql-files</span></span><br></pre></td></tr></table></figure><p>第六步：初始化数据库（可以实现数据库的初始化，而且会产生一个&#x3D;&#x3D;随机密码&#x3D;&#x3D;）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bin/mysqld --initialize --user=mysql --basedir=/mysql_3306</span></span><br><span class="line">选项说明：</span><br><span class="line"><span class="literal">--initialize</span>  初始化（真正开始干活）</span><br><span class="line"><span class="literal">--user</span>=mysql  以mysql用户的身份初始化数据库，产生文件都是mysql作为拥有者</span><br><span class="line"><span class="literal">--basedir</span>=xxx    mysql其安装目录，非常重要</span><br><span class="line"></span><br><span class="line">运行完毕后，观察最后一行，保存root账号的密码，以备后期使用。</span><br><span class="line"><span class="number">2020</span><span class="literal">-08-24T06</span>:<span class="number">46</span>:<span class="number">24.889735</span>Z <span class="number">1</span> [<span class="type">Note</span>] A temporary password is generated <span class="keyword">for</span> root@localhost: (cn_jS+*n2wh</span><br></pre></td></tr></table></figure><blockquote><p>经验之谈：想查看mysql软件有没有初始化成功，主要看mysql目录下有没有产生data文件夹且文件夹中至少要有一个mysql的文件夹。</p></blockquote><p>第七步：设置安全加密连接（SSL），数据传输会采用加密形式，适合敏感数据</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bin/mysql_ssl_rsa_setup --datadir=/mysql_3306/data</span></span><br></pre></td></tr></table></figure><p>第八步：启动MySQL数据库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cp support-files/mysql.server /etc/init.d/mysql_3306</span></span><br></pre></td></tr></table></figure><blockquote><p>注：默认情况下，GBLIC版本的数据库要求安装到&#x2F;usr&#x2F;local&#x2F;mysql目录，其mysql.server脚本中对应的目录也是&#x2F;usr&#x2F;local&#x2F;mysql，这会导致mysql无法启动。所以可以更改其basedir以及datadir两个变量</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/init.d/mysql_3306</span></span><br><span class="line"><span class="number">46</span>行 basedir=/mysql_3306</span><br><span class="line"><span class="number">47</span>行 datadir=/mysql_3306/<span class="keyword">data</span></span><br></pre></td></tr></table></figure><p>第九步：启动MySQL数据库（不能使用systemctl，只能使用service）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service mysql_3306 start</span></span><br><span class="line">Starting MySQL.Logging to <span class="string">&#x27;/mysql_3306/data/mysql.itcast.cn.err&#x27;</span>.</span><br></pre></td></tr></table></figure><blockquote><p>特别说明：当MySQL启动成功后，其日志会自动写入到data数据目录中的主机名称.err文件中，这个文件一定要多看，涉及MySQL无法启动、启动报错，其详细的原因99%在.err文件中可以找到问题所在！</p></blockquote><h2 id="6、软件的安装常见问题答疑"><a href="#6、软件的安装常见问题答疑" class="headerlink" title="6、软件的安装常见问题答疑"></a>6、软件的安装常见问题答疑</h2><p>问题1：为什么一定要删除&#x2F;etc&#x2F;my.cnf文件，不删除有何影响？</p><p>答：&#x2F;etc&#x2F;my.cnf文件是操作系统为mariadb软件预留的配置的文件，之所以一定要删除这个文件，主要原因在于数据库在初始化时，首先在自己的安装目录下寻找有没有my.cnf配置文件，如果有，会自动根据里面的配置信息进行初始化。如果找不到，则到&#x2F;etc目录下寻找my.cnf文件，如果有，依然会按照其内部的配置进行初始化，但是由于&#x2F;etc目录下的my.cnf文件是mariadb的，这会导致我们的初始化如果按照mariadb的配置，会导致初始化失败。</p><p>问题2：mysql-files文件夹到底干什么的？</p><p>答：目前mysql-files没有什么用，但是你必须要创建，因为GLIBC属于二进制软件包，其很多配置已经默认了，包括mysql-files文件夹，如果没有这个文件夹可能导致mysql无法启动。</p><blockquote><p>mysql-files：主要用于数据文件的导入与导出（备份与还原），MySQL的备份会产生一个文件，可以xxx.sql或xxx.txt。mysql-files就是导入与导出时，所指定的默认目录。</p></blockquote><p>问题3：到底怎么判断数据库是否初始化成功了？</p><p>答：数据库的安装容易出错的地方就是初始化，一旦初始化失败了，数据库100%启动报错。如何确认数据库是否初始化成功了呢？主要看安装目录下有没有生成一个&#x3D;&#x3D;data&#x3D;&#x3D;的文件夹。</p><blockquote><p>一定要看准一点，文件夹名称叫data（数据目录），不是date（时间）</p></blockquote><p>问题4：为什么一定要把mysql.server放在&#x2F;etc&#x2F;init.d目录下，不放行不行？</p><p>答：不放也可以，但是这个时候就不能使用service命令启动以及添加到开机启动项了。只能通过bin&#x2F;mysqld_safe脚本启动数据库。</p><blockquote><p>&#x2F;etc&#x2F;init.d是CentOS6以及早期版本中的服务脚本目录，只要把Shell启动脚本放在这个目录下，你就可以使用service进行管理。</p></blockquote><p>问题5：为什么一定要改变&#x2F;etc&#x2F;init.d&#x2F;mysql_3306中的basedir与datadir？</p><p>答：GLIBC版本属于二进制版本，默认已经配置了很多内容，包括默认的安装路径&#x2F;usr&#x2F;local&#x2F;mysql，一旦你的mysql没有安装在这个目录下，则必须手工设置basedir以及datadir其位置，否则脚本无法启动mysql程序</p><p>问题6：如何让mysql自动启动？</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig --list查询系统中的所有开机启动项</span></span><br><span class="line"><span class="comment"># chkconfig --add mysql_3306    必须与/etc/init.d目录下的脚本名称一致</span></span><br><span class="line"><span class="comment"># chkconfig mysql_3306 on把2345四种模式全部开启（3字符界面，5图形界面）</span></span><br></pre></td></tr></table></figure><blockquote><p>CentOS6及以前版本中，控制服务的开机启动的</p></blockquote><h2 id="7、MySQL-GLIBC版本后续配置"><a href="#7、MySQL-GLIBC版本后续配置" class="headerlink" title="7、MySQL GLIBC版本后续配置"></a>7、MySQL GLIBC版本后续配置</h2><p>第一步：更改管理员root账号的密码</p><ul><li><strong>方法1：</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> <span class="type">mysql_3306</span>]<span class="comment"># bin/mysqladmin -uroot password &#x27;123&#x27; -p</span></span><br><span class="line">Enter password:输入刚刚初始化产生的临时密码</span><br></pre></td></tr></table></figure><ul><li><strong>方法2</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> password=password(<span class="string">&#x27;456&#x27;</span>);   //未来版本将会弃用</span><br><span class="line">或者</span><br><span class="line">mysql&gt; <span class="built_in">set</span> password=<span class="string">&#x27;123&#x27;</span>;//推荐</span><br><span class="line"></span><br><span class="line">重置完成后，建议刷新权限，让其立即生效</span><br><span class="line">mysql&gt; flush privielges;</span><br></pre></td></tr></table></figure><p>第二步：把mysql客户端命令添加到环境变量，以后随时可以访问</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo &#x27;export PATH=$PATH:/mysql_3306/bin&#x27; &gt;&gt; /etc/profile</span></span><br><span class="line"><span class="comment"># source /etc/profile</span></span><br><span class="line"></span><br><span class="line">设置完成后，我们可以在任意位置调用mysql客户端命令</span><br><span class="line"><span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password:<span class="number">123</span></span><br></pre></td></tr></table></figure><p>第三步：手工定义MySQL的配置文件（非常重要）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /mysql_3306/my.cnf</span></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">basedir=/mysql_3306</span><br><span class="line">datadir=/mysql_3306/<span class="keyword">data</span></span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">选项说明：</span><br><span class="line">[<span class="type">mysqld</span>]代表针对服务器端进行配置</span><br><span class="line">basedir代表数据库的安装目录</span><br><span class="line">datadir代表数据目录，以后专门用于存放数据文件的（核心目录）</span><br><span class="line">socket代表套接字文件，专门为客户端与服务器端连接提供一个桥梁</span><br><span class="line"></span><br><span class="line"><span class="comment"># service mysql_3306 restart</span></span><br></pre></td></tr></table></figure><blockquote><p>C(Client) &#x3D;&#x3D;&#x3D; mysql命令   连（socket套接字）接   mysqld服务器端程序</p></blockquote><p>第四步：安全配置（对于生产环境比较重要）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql_secure_installation</span></span><br></pre></td></tr></table></figure><p>一路Y，搞定！</p><blockquote><p>其主要就是是否启动密码脚尖器、是否设置root密码、是否允许root远程连接、是否移除测试数据库等等一系列功能。</p></blockquote><p>常见问题：如何关闭MySQL密码强度检测？</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /mysql_3306/my.cnf</span></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">...</span><br><span class="line">validate_password=OFF</span><br><span class="line"></span><br><span class="line"><span class="comment"># service mysql_3306 restart</span></span><br></pre></td></tr></table></figure><h1 id="五、MySQL的源码编译安装"><a href="#五、MySQL的源码编译安装" class="headerlink" title="五、MySQL的源码编译安装"></a>五、MySQL的源码编译安装</h1><h2 id="1、参考MySQL源码安装官方文档"><a href="#1、参考MySQL源码安装官方文档" class="headerlink" title="1、参考MySQL源码安装官方文档"></a>1、参考MySQL源码安装官方文档</h2><p>官方文档：<a href="https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html">https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html</a></p><p><strong>源码安装三步曲：配置——&gt;编译——&gt;安装</strong></p><p>####㈠ 安装须知</p><ul><li>软件包介绍</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="literal">-boost-5</span>.<span class="number">7.31</span>.tar.gz可在任意发行版的Linux下安装</span><br></pre></td></tr></table></figure><h4 id="㈡-安装需求"><a href="#㈡-安装需求" class="headerlink" title="㈡  安装需求"></a>㈡  安装需求</h4><table><thead><tr><th>安装需求</th><th>具体配置</th></tr></thead><tbody><tr><td>安装目录（basedir）</td><td>&#x2F;mysql_3307</td></tr><tr><td>数据目录（datadir）</td><td>&#x2F;mysql_3307&#x2F;data</td></tr><tr><td>端口号</td><td>3307</td></tr><tr><td>socket文件位置</td><td>$basedir&#x2F;mysql.sock</td></tr><tr><td>字符集</td><td>utf8mb4</td></tr></tbody></table><p>####㈢ &#x3D;&#x3D;了解配置选项&#x3D;&#x3D;</p><ul><li>常用配置选项</li></ul><table><thead><tr><th>配置选项</th><th>描述</th><th>默认值</th><th>建议值</th></tr></thead><tbody><tr><td>CMAKE_INSTALL_PREFIX</td><td>安装基目录(basedir)</td><td>&#x2F;usr&#x2F;local&#x2F;mysql</td><td>根据需求</td></tr><tr><td>MYSQL_DATADIR</td><td>数据目录(datadir)</td><td>$basedir&#x2F;data</td><td>根据需求</td></tr><tr><td>SYSCONFDIR</td><td>默认配置文件my.cnf路径</td><td></td><td>&#x2F;etc</td></tr><tr><td>MYSQL_TCP_PORT</td><td>TCP&#x2F;IP端口</td><td>3306</td><td>非默认端口</td></tr><tr><td>MYSQL_UNIX_ADDR</td><td>套接字socket文件路径</td><td>&#x2F;tmp&#x2F;mysql.sock</td><td>$basedir&#x2F;</td></tr><tr><td>DEFAULT_CHARSET</td><td>默认字符集</td><td>latin1</td><td><strong>utf8mb4</strong></td></tr><tr><td>DEFAULT_COLLATION</td><td>默认校验规则</td><td>latin1_swedish_ci</td><td>utf8mb4_general_ci</td></tr><tr><td>WITH_EXTRA_CHARSETS</td><td>扩展字符集</td><td>all</td><td>all</td></tr><tr><td>ENABLED_LOCAL_INFILE</td><td>是否启用本地加载外部数据文件功能</td><td>OFF</td><td>建议开启</td></tr><tr><td>WITH_SSL</td><td>SSL支持类型</td><td>system</td><td>建议显式指定</td></tr><tr><td>WITH_BOOST</td><td>Boost库源代码的位置</td><td></td><td>Boost库是构建MySQL所必需的,建议事先下载</td></tr></tbody></table><ul><li>存储引擎相关配置项</li></ul><p><strong>说明：</strong></p><p>以下选项值均为布尔值，0或1；0代表不编译到服务器中，1代表编译，建议都静态编译到服务器中。</p><p>其他的存储引擎可以根据实际需求在安装时通过WITH_xxxx_STORAGE_ENGINE&#x3D;1的方式编译到服务器中。</p><table><thead><tr><th>配置选项</th><th>描述</th></tr></thead><tbody><tr><td>WITH_INNOBASE_STORAGE_ENGINE</td><td>将InnoDB存储引擎插件构建为静态模块编译到服务器中；建议编译到服务器中</td></tr><tr><td>WITH_PARTITION_STORAGE_ENGINE</td><td>是否支持分区</td></tr><tr><td>WITH_FEDERATED_STORAGE_ENGINE</td><td>本地数据库是否可以访问远程mysql数据</td></tr><tr><td>WITH_BLACKHOLE_STORAGE_ENGINE</td><td>黑洞存储引擎，接收数据，但不存储，直接丢弃</td></tr><tr><td>WITH_MYISAM_STORAGE_ENGINE</td><td>将MYISAM存储引擎静态编译到服务器中</td></tr></tbody></table><h2 id="2、MySQL的源码编译安装"><a href="#2、MySQL的源码编译安装" class="headerlink" title="2、MySQL的源码编译安装"></a>2、MySQL的源码编译安装</h2><blockquote><p>建议大家在源码编译安装之前，先拍摄一个快照</p></blockquote><p>第一步：安装MySQL编译需要用到的依赖库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum -y install ncurses-devel cmake libaio-devel openssl-devel</span></span><br></pre></td></tr></table></figure><p>第二步：上传软件到服务器端并解压</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar -xf mysql-boost-5.7.31.tar.gz</span></span><br><span class="line"><span class="comment"># cd mysql-5.7.31</span></span><br></pre></td></tr></table></figure><p>第三步：配置（基于cmake进行配置）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim myconfig.sh</span></span><br><span class="line">cmake . \</span><br><span class="line"><span class="literal">-DCMAKE_INSTALL_PREFIX</span>=/mysql_3307 \</span><br><span class="line"><span class="literal">-DMYSQL_DATADIR</span>=/mysql_3307/<span class="keyword">data</span> \</span><br><span class="line"><span class="literal">-DMYSQL_TCP_PORT</span>=<span class="number">3307</span> \</span><br><span class="line"><span class="literal">-DMYSQL_UNIX_ADDR</span>=/mysql_3307/mysql.sock \</span><br><span class="line"><span class="literal">-DWITH_INNOBASE_STORAGE_ENGINE</span>=<span class="number">1</span> \</span><br><span class="line"><span class="literal">-DWITH_PARTITION_STORAGE_ENGINE</span>=<span class="number">1</span> \</span><br><span class="line"><span class="literal">-DWITH_FEDERATED_STORAGE_ENGINE</span>=<span class="number">1</span> \</span><br><span class="line"><span class="literal">-DWITH_BLACKHOLE_STORAGE_ENGINE</span>=<span class="number">1</span> \</span><br><span class="line"><span class="literal">-DWITH_MYISAM_STORAGE_ENGINE</span>=<span class="number">1</span> \</span><br><span class="line"><span class="literal">-DENABLED_LOCAL_INFILE</span>=<span class="number">1</span> \</span><br><span class="line"><span class="literal">-DEXTRA_CHARSETS</span>=all \</span><br><span class="line"><span class="literal">-DDEFAULT_CHARSET</span>=utf8mb4 \</span><br><span class="line"><span class="literal">-DDEFAULT_COLLATION</span>=utf8mb4_general_ci \</span><br><span class="line"><span class="literal">-DWITH_SSL</span>=system \</span><br><span class="line"><span class="literal">-DWITH_BOOST</span>=boost</span><br><span class="line"><span class="comment"># chmod +x myconfig.sh</span></span><br><span class="line"><span class="comment"># ./myconfig.sh</span></span><br><span class="line"></span><br><span class="line">选项说明：</span><br><span class="line"><span class="literal">-DCMAKE_INSTALL_PREFIX</span> ：安装路径</span><br><span class="line"><span class="literal">-DMYSQL_DATADIR</span> ：数据目录</span><br><span class="line"><span class="literal">-DMYSQL_TCP_PORT</span> ：端口号</span><br><span class="line"><span class="literal">-DMYSQL_UNIX_ADDR</span> ：套接字文件位置</span><br></pre></td></tr></table></figure><p>第四步：编译安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># make -j2 &amp;&amp; make install</span></span><br><span class="line">选项说明：</span><br><span class="line"><span class="literal">-j2</span> ：代表同时开启多个线程共同实现编译操作</span><br></pre></td></tr></table></figure><h2 id="3、编译报错常见问题解析"><a href="#3、编译报错常见问题解析" class="headerlink" title="3、编译报错常见问题解析"></a>3、编译报错常见问题解析</h2><p>问题1：没有boost导致安装失败</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/16-29-37-image-20200824170915430-9999ed.png" alt="image-20200824170915430"></p><p>问题2：编译安装中途报错</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/16-29-43-image-20200824170953774-8cecac.png" alt="image-20200824170953774"></p><p>解决方案：只能重新编译一下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rm -f CMakeCache.txt</span></span><br><span class="line"><span class="comment"># make -j2 &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h2 id="4、MySQL数据库的初始化"><a href="#4、MySQL数据库的初始化" class="headerlink" title="4、MySQL数据库的初始化"></a>4、MySQL数据库的初始化</h2><p><strong>注意：</strong>进入到&#x3D;&#x3D;安装目录&#x3D;&#x3D;里&#x2F;mysql_3307</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /mysql_3307</span></span><br></pre></td></tr></table></figure><p>第一步：创建mysql-files目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建系统变量`secure_file_priv`限制导入导出目录并修改权限</span><br><span class="line"><span class="comment"># mkdir mysql-files</span></span><br><span class="line"><span class="comment"># chown -R mysql:mysql /mysql_3307</span></span><br><span class="line"><span class="comment"># chmod 750 mysql-files</span></span><br></pre></td></tr></table></figure><p>第二步：数据库初始化操作</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bin/mysqld --initialize --user=mysql --basedir=/mysql_3307 --datadir=/mysql_3307/data</span></span><br><span class="line">...</span><br><span class="line"><span class="number">2020</span><span class="literal">-08-24T11</span>:<span class="number">07</span>:<span class="number">37.621346</span>Z <span class="number">1</span> [<span class="type">Note</span>] A temporary password is generated <span class="keyword">for</span> root@localhost: O6.iHqrZgzz7</span><br></pre></td></tr></table></figure><p>第三步：拷贝mysql.server脚本到&#x2F;etc&#x2F;init.d目录，然后启动数据库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cp support-files/mysql.server /etc/init.d/mysql_3307</span></span><br><span class="line"><span class="comment"># service mysql_3307 start</span></span><br></pre></td></tr></table></figure><p>启动异常的解决方案：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/16-29-50-image-20200824191029474-de3369.png" alt="image-20200824191029474"></p><p>查看mysql.itcast.cn.err这个错误日志</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/16-29-52-16-28-34-image-20200824191502358-1b7986-ba9701.png" alt="image-20200824191502358"></p><p>出现以上问题的主要原因在于mysql这个用户对&#x2F;mysql_3307目录没有写入文件的权限，写入mysql_socket套接字文件。</p><p>解决方案：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chown -R mysql.mysql /mysql_3307</span></span><br></pre></td></tr></table></figure><h2 id="5、MySQL源码编译安装后的后续配置"><a href="#5、MySQL源码编译安装后的后续配置" class="headerlink" title="5、MySQL源码编译安装后的后续配置"></a>5、MySQL源码编译安装后的后续配置</h2><p>第一步：编写MySQL配置文件，my.cnf</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /mysql_3307/my.cnf</span></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">basedir=/mysql_3307</span><br><span class="line">datadir=/mysql_3307/<span class="keyword">data</span></span><br><span class="line">socket=/mysql_3307/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># service mysql_3307 restart</span></span><br></pre></td></tr></table></figure><p>第二步：设置管理员的密码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bin/mysqladmin -uroot password &#x27;123&#x27; -p</span></span><br><span class="line">Enter password:O6.iHqrZgzz7</span><br></pre></td></tr></table></figure><p>第三步：安全设置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bin/mysql_secure_installation</span></span><br></pre></td></tr></table></figure><p>第四步：添加mysql_3307到开机启动项</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig --add mysql_3307</span></span><br><span class="line"><span class="comment"># chkconfig mysql_3307 on</span></span><br></pre></td></tr></table></figure><h1 id="六、MySQL常见问题解决方案"><a href="#六、MySQL常见问题解决方案" class="headerlink" title="六、MySQL常见问题解决方案"></a>六、MySQL常见问题解决方案</h1><h2 id="1、如何访问不同的数据库？"><a href="#1、如何访问不同的数据库？" class="headerlink" title="1、如何访问不同的数据库？"></a>1、如何访问不同的数据库？</h2><p><strong>方法一：</strong>直接使用&#x3D;&#x3D;<strong>对应的客户</strong>&#x3D;&#x3D;端软件访问</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">访问<span class="number">5.7</span>.<span class="number">31</span>版本数据库：</span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># /mysql_3306/bin/mysql -uroot -p</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> with ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">3</span></span><br><span class="line">Server version: <span class="number">5.7</span>.<span class="number">31</span> MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">访问<span class="number">5.7</span>.<span class="number">31</span>版本数据库：</span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># /mysql_3307/bin/mysql -uroot -p</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> with ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">7</span></span><br><span class="line">Server version: <span class="number">5.7</span>.<span class="number">31</span> Source distribution</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方法二：</strong>&#x3D;&#x3D;定义别名&#x3D;&#x3D;的方式访问</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># alias mysql_3306=&quot;/mysql_3306/bin/mysql&quot;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># alias mysql_3307=&quot;/mysql_3307/bin/mysql&quot;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># mysql_3306 -uroot -p</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> with ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">4</span></span><br><span class="line">Server version: <span class="number">5.7</span>.<span class="number">31</span> MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># mysql_3307 -uroot -p</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> with ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">8</span></span><br><span class="line">Server version: <span class="number">5.7</span>.<span class="number">27</span> Source distribution</span><br></pre></td></tr></table></figure><p><strong>方法三：</strong>&#x3D;&#x3D;拷贝相应命令&#x3D;&#x3D;到PATH可以识别的路径下&#x3D;&#x3D;并重命名&#x3D;&#x3D;</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># unalias mysql_3306</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># unalias mysql_3307</span></span><br><span class="line">+++++++++++++++++++++我是华丽分隔符+++++++++++++++++++++++++++</span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># cp /mysql_3306/bin/mysql /usr/bin/mysql_3306</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># cp /mysql_3307/bin/mysql /usr/bin/mysql_3307</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># which mysql_3306</span></span><br><span class="line">/usr/bin/mysql_3306</span><br><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># which mysql_3307</span></span><br><span class="line">/usr/bin/mysql_3307</span><br></pre></td></tr></table></figure><p><strong>深度思考：</strong>我们之所以能够连接到数据库里的**&#x3D;&#x3D;本质&#x3D;&#x3D;**是什么？答：套接字</p><h2 id="2、MySQL忘记密码的解决方案"><a href="#2、MySQL忘记密码的解决方案" class="headerlink" title="2、MySQL忘记密码的解决方案"></a>2、MySQL忘记密码的解决方案</h2><p><strong>敲黑板：</strong>找问题的解决方法很重要！</p><h3 id="1、跳过授权表（通用）"><a href="#1、跳过授权表（通用）" class="headerlink" title="1、跳过授权表（通用）"></a>1、跳过授权表（通用）</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/16-30-01-image-20200824193937756-074dbc.png" alt="image-20200824193937756"></p><h4 id="㈠-跳过授权表重启数据库（以GLIBC-3306为例）"><a href="#㈠-跳过授权表重启数据库（以GLIBC-3306为例）" class="headerlink" title="㈠ 跳过授权表重启数据库（以GLIBC 3306为例）"></a>㈠ 跳过授权表重启数据库（以GLIBC 3306为例）</h4><h5 id="①-关闭数据库"><a href="#①-关闭数据库" class="headerlink" title="① 关闭数据库"></a>① 关闭数据库</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># mysqladmin shutdown -p</span></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><h5 id="②-跳过授权表启动"><a href="#②-跳过授权表启动" class="headerlink" title="② 跳过授权表启动"></a>② 跳过授权表启动</h5><p><strong>友情提示：</strong>启动过程可能会一波三折，冷静分析看报错，必能解决！</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /mysql_3306/bin/mysqld --defaults-file=/mysql_3306/my.cnf --skip-grant-tables --skip-networking=on  --user=mysql &amp;</span></span><br></pre></td></tr></table></figure><h4 id="㈡-刷新授权表（重要）"><a href="#㈡-刷新授权表（重要）" class="headerlink" title="㈡ 刷新授权表（重要）"></a>㈡ 刷新授权表（重要）</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password:什么都不要输入，直接回车即可</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="㈢-修改密码"><a href="#㈢-修改密码" class="headerlink" title="㈢ 修改密码"></a>㈢ 修改密码</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter user <span class="string">&#x27;root&#x27;</span><span class="string">@&#x27;localhost&#x27; identified by &#x27;123&#x27;;</span></span><br><span class="line"><span class="string">Query OK, 0 rows affected (0.00 sec)</span></span><br></pre></td></tr></table></figure><p>**&#x3D;&#x3D;补充：&#x3D;&#x3D;**如果未能成功，则使用以下语句修改密码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE mysql.user <span class="built_in">SET</span> authentication_string = PASSWORD(<span class="string">&#x27;MyNewPass&#x27;</span>)</span><br><span class="line"><span class="built_in">WHERE</span> User = <span class="string">&#x27;root&#x27;</span> AND Host = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>修改密码后，使用jobs + kill命令，停止正在运行的mysqld进程。然后使用service启动服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jobs</span></span><br><span class="line"><span class="comment"># kill %1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># service mysql_3306 start</span></span><br></pre></td></tr></table></figure><h3 id="2、Unix和类Unix系统重置（了解）"><a href="#2、Unix和类Unix系统重置（了解）" class="headerlink" title="2、Unix和类Unix系统重置（了解）"></a>2、Unix和类Unix系统重置（了解）</h3><h4 id="㈠-停止数据库"><a href="#㈠-停止数据库" class="headerlink" title="㈠ 停止数据库"></a>㈠ 停止数据库</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># mysqladmin shutdown -p</span></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><h4 id="㈡-编写创建密码语句到文件"><a href="#㈡-编写创建密码语句到文件" class="headerlink" title="㈡ 编写创建密码语句到文件"></a>㈡ 编写创建密码语句到文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo &quot;ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123&#x27;;&quot; &gt;&gt; /mysql_3306/mysql.pass</span></span><br><span class="line">注意：该文件一定要对启动用户如mysql有所有权限</span><br><span class="line"><span class="comment"># chown -R mysql. /mysql_3306</span></span><br></pre></td></tr></table></figure><h4 id="㈢-指定密码文件启动数据库"><a href="#㈢-指定密码文件启动数据库" class="headerlink" title="㈢ 指定密码文件启动数据库"></a>㈢ 指定密码文件启动数据库</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysqld --defaults-file=/mysql_3306/my.cnf --init-file=/mysql_3306/mysql.pass  --user=mysql &amp;</span></span><br></pre></td></tr></table></figure><h4 id="㈣-删除密码文件，并测试"><a href="#㈣-删除密码文件，并测试" class="headerlink" title="㈣ 删除密码文件，并测试"></a>㈣ 删除密码文件，并测试</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rm -f /mysql_3306/mysql.pass</span></span><br><span class="line"><span class="comment"># mysql -uroot -p</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/16-33-10-%E4%B8%8B%E8%BD%BD-0eab7a.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> MYSQL </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LNMP环境工作原理</title>
      <link href="/2024/06/23/LNMP%E7%8E%AF%E5%A2%83%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2024/06/23/LNMP%E7%8E%AF%E5%A2%83%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="1-组成"><a href="#1-组成" class="headerlink" title="1.组成"></a>1.组成</h3><p>LNMP环境【Linux、Nginx(80)、PHP(9000)、Mysql(3306)】每个都是独立的软件。</p><h3 id="2-LNPM原理图"><a href="#2-LNPM原理图" class="headerlink" title="2.LNPM原理图"></a>2.LNPM原理图</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-16-53-image-20240623131653531-e18c07.png" alt="image-20240623131653531"></p><h2 id="三、LNMP环境部署"><a href="#三、LNMP环境部署" class="headerlink" title="三、LNMP环境部署"></a>三、LNMP环境部署</h2><h3 id="1-Msql软件"><a href="#1-Msql软件" class="headerlink" title="1.Msql软件"></a>1.Msql软件</h3><p>瑞典AB公司，MySql默认编码 &#x3D;&gt;latin1&#x3D;&gt;甲骨文（oracle），Oracle MySql</p><p>MySql安装一共有三种方式</p><p>①基于YUM安装 ②GLBC二进制软件包安装 ③基于MySql源码方式安装</p><blockquote><p>使用YUM安装的MySql的时候一定要配置好YUM源，不然会默认安装MariaDB。</p></blockquote><h3 id="2-MySql软件的安装"><a href="#2-MySql软件的安装" class="headerlink" title="2.MySql软件的安装"></a>2.MySql软件的安装</h3><p>前期规划：</p><table><thead><tr><th>安装目录</th><th>数据目录</th><th>默认端口</th><th>套接字（关键）</th></tr></thead><tbody><tr><td>&#x2F;usr&#x2F;local&#x2F;mysql</td><td>&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</td><td>3306</td><td>&#x2F;tmp&#x2F;mysql.sock</td></tr></tbody></table><p>问题：如果我们MySql套接字没有放置在&#x2F;tmp下，会有什么影响？</p><p>答：mysql客户端无法直接连接到mysqld，服务器端，必须手动指定-S选项指定套接字的位置，或者可以在my,cnf文件中，添加一个选项</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim my.cnf</span></span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">针对服务器的相关配置（安装目录、套接字、数据目录、端口、以及日志信息等）</span><br><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br></pre></td></tr></table></figure><blockquote><p>除了套接字问题，还需要注意的就是my.cnf配置文件，其加载顺序是：①安装目录②&#x2F;etc目录，如果安装目录和etc目录下面都有my.cnf，则优先采用etc目录下的配置文件。</p></blockquote><h4 id="MySql安装脚本"><a href="#MySql安装脚本" class="headerlink" title="MySql安装脚本"></a>MySql安装脚本</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">yum install libaio <span class="literal">-y</span></span><br><span class="line">tar <span class="literal">-xf</span> mysql<span class="literal">-5</span>.<span class="number">7.31</span><span class="literal">-linux-glibc2</span>.<span class="number">12</span><span class="literal">-x86_64</span>.tar.gz </span><br><span class="line"><span class="built_in">mv</span> mysql<span class="literal">-5</span>.<span class="number">7.31</span><span class="literal">-linux-glibc2</span>.<span class="number">12</span><span class="literal">-x86_64</span> /usr/local/mysql</span><br><span class="line">useradd <span class="literal">-r</span> <span class="literal">-s</span> /sbin/nologin mysql</span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> /etc/my.cnf</span><br><span class="line"><span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line">mkdir mysql<span class="literal">-files</span></span><br><span class="line">chown mysql:mysql mysql<span class="literal">-files</span></span><br><span class="line">chmod <span class="number">750</span> mysql<span class="literal">-files</span></span><br><span class="line">bin/mysqld <span class="literal">--initialize</span> <span class="literal">--user</span>=mysql <span class="literal">--basedir</span>=/usr/local/mysql &amp;&gt; /root/password.txt</span><br><span class="line">bin/mysqld_ssl_rsa_setup <span class="literal">--datad</span>ı<span class="built_in">r</span>=/usr/local/mysql/<span class="keyword">data</span></span><br><span class="line"><span class="built_in">cp</span> support<span class="literal">-files</span>/mysql.server /etc/init.d/mysqld</span><br><span class="line">service mysqld <span class="built_in">start</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/usr/local/mysql/bin&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="comment"># source mysql.sh</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> LNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket套接字</title>
      <link href="/2024/06/23/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
      <url>/2024/06/23/Socket%E5%A5%97%E6%8E%A5%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="Socket概览："><a href="#Socket概览：" class="headerlink" title="Socket概览："></a>Socket概览：</h2><p> <img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-44-39-image-20240623134438949-6a933f.png" alt="image-20240623134438949"></p><h2 id="什么是-Socket？"><a href="#什么是-Socket？" class="headerlink" title="什么是 Socket？"></a>什么是 Socket？</h2><p>Socket（套接字）是网络通信中的一种机制，可以将其类比为电话插座，负责连接通信双方。Socket 就像电话插座上的孔，端口负责连接，而创建连接就像把插头插在插座上。Socket 实例创建后会监听消息，当有消息传入时会自动接通。</p><p>实际上，Socket 是应用层和传输层之间的抽象层，它将 TCP&#x2F;IP 层复杂的操作封装成简单接口，供应用层调用，从而实现进程间的网络通信。Socket 起源于 UNIX，在 UNIX 的“一切皆文件”思想下，进程间通信通过文件描述符（file descriptor）进行，Socket 就是这种“打开-读&#x2F;写-关闭”模式的实现。服务器和客户端各自维护一个“文件”，通过文件读写来传输数据，通讯结束时关闭文件。</p><h2 id="Socket-的位置"><a href="#Socket-的位置" class="headerlink" title="Socket 的位置"></a>Socket 的位置</h2><p>Socket 位于应用层和传输层之间。它将复杂的网络协议封装成简洁的接口，便于程序进行网络通信。</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-30-40-660329-20201010094027768-397452978-727485.png" alt="img"></p><hr><h2 id="Socket-的类型"><a href="#Socket-的类型" class="headerlink" title="Socket 的类型"></a>Socket 的类型</h2><p>Socket 主要分为两种类型：流格式套接字（SOCK_STREAM）和数据报格式套接字（SOCK_DGRAM）。</p><h3 id="流格式套接字（SOCK-STREAM）"><a href="#流格式套接字（SOCK-STREAM）" class="headerlink" title="流格式套接字（SOCK_STREAM）"></a>流格式套接字（SOCK_STREAM）</h3><p>流格式套接字也叫<strong>“面向连接的套接字”</strong>，是一种可靠、双向的通信数据流，可以确保数据准确无误地到达另一台计算机。如果数据损坏或丢失，可以重新发送。</p><p><strong>特点：</strong></p><ul><li>数据不会在传输过程中丢失。</li><li>数据按照顺序传输。</li><li>数据发送和接收不同步。</li></ul><p>可以将 SOCK_STREAM 比作一条传送带，数据按顺序传输，不会丢失。数据传输时，无需接收端和发送端同步，接收端可以根据自己的节奏读取数据。</p><p><strong>应用场景：</strong></p><ul><li><strong>浏览器使用的 HTTP 协议</strong>：基于面向连接的套接字，确保数据准确无误。</li></ul><p>流格式套接字使用 <strong>TCP 协议</strong>（Transmission Control Protocol，传输控制协议），TCP 确保数据按照顺序到达且无错误。</p><h3 id="数据报格式套接字（SOCK-DGRAM）"><a href="#数据报格式套接字（SOCK-DGRAM）" class="headerlink" title="数据报格式套接字（SOCK_DGRAM）"></a>数据报格式套接字（SOCK_DGRAM）</h3><p>数据报格式套接字也叫<strong>“无连接的套接字”</strong>，它传输数据时不进行数据校验。如果数据在传输中损坏或丢失，无法补救。这种套接字传输效率高，但数据传输顺序不保证，可能丢失或损坏。</p><p><strong>特点：</strong></p><ul><li>强调快速传输而非传输顺序。</li><li>数据可能丢失或损毁。</li><li>每次传输的数据大小有限。</li><li>数据的发送和接收同步。</li></ul><p>可以将 SOCK_DGRAM 比作快递，一些包裹可能丢失或损坏，但传输效率高。</p><p><strong>应用场景：</strong></p><ul><li><strong>QQ 视频聊天和语音聊天</strong>：使用 SOCK_DGRAM 来传输数据，保证通信效率，即使丢失少量数据，也不会影响整体通信质量。</li></ul><p>数据报格式套接字使用 <strong>UDP 协议</strong>（User Datagram Protocol，用户数据报协议），它注重快速传输，而非可靠性。</p><hr><h2 id="Socket-通信过程"><a href="#Socket-通信过程" class="headerlink" title="Socket 通信过程"></a>Socket 通信过程</h2><p>Socket 保证了不同计算机之间的通信，也就是网络通信。对于网站，通信模型是服务器与客户端之间的通信。两端都建立了一个 Socket 对象，然后通过 Socket 对象对数据进行传输。通常服务器处于一个无限循环，等待客户端的连接。</p><p>下面是面向连接的 TCP 时序图：</p><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-31-41-660329-20201010094439156-1397820811-febe00.png" alt="img"></p><h3 id="客户端过程"><a href="#客户端过程" class="headerlink" title="客户端过程"></a>客户端过程</h3><p>客户端的通信过程较为简单，创建 Socket 后连接服务器，然后发送数据、接收响应数据，最后关闭连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 创建 Socket 连接</span></span><br><span class="line">    sock.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8001</span>))  <span class="comment"># 连接服务器</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="built_in">input</span>(<span class="string">&#x27;Please input data:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sock.sendall(data)</span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Send Failed...&#x27;</span>, e)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Send Successfully&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        res = sock.recv(<span class="number">4096</span>)  <span class="comment"># 获取服务器返回的数据</span></span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">    sock.close()</span><br></pre></td></tr></table></figure><p><code>sendall()</code> 方法会尝试发送所有数据，成功时返回 <code>None</code>，失败时抛出异常。<code>recv()</code> 方法用于接收服务器返回的数据。</p><h3 id="服务端过程"><a href="#服务端过程" class="headerlink" title="服务端过程"></a>服务端过程</h3><p>服务端先初始化 Socket，与本机地址及端口绑定，准备接收连接。调用 <code>accept()</code> 阻塞等待客户端连接，连接建立后，接收并处理请求，发送响应数据，最后关闭连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 创建 Socket 连接（TCP）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Socket Created&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sock.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8001</span>))  <span class="comment"># 配置 Socket，绑定 IP 地址和端口号</span></span><br><span class="line">    <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Bind Failed...&#x27;</span>, e)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    sock.listen(<span class="number">5</span>)  <span class="comment"># 设置最大允许连接数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = sock.accept()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn.settimeout(<span class="number">10</span>)  <span class="comment"># 设置超时时间</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Get value &#x27;</span> + data.decode(), end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;Exit Server&#x27;</span>, end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                conn.sendall(<span class="string">b&#x27;OK&#x27;</span>)  <span class="comment"># 返回数据</span></span><br><span class="line">        <span class="keyword">except</span> socket.timeout:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Time out&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        conn.close()  <span class="comment"># 关闭连接</span></span><br><span class="line">    sock.close()</span><br></pre></td></tr></table></figure><p><code>accept()</code> 方法阻塞等待客户端连接，返回新的 Socket 对象 <code>conn</code>，通过 <code>conn</code> 与客户端通信。</p><hr><h2 id="从-TCP-连接的视角看-Socket-过程"><a href="#从-TCP-连接的视角看-Socket-过程" class="headerlink" title="从 TCP 连接的视角看 Socket 过程"></a>从 TCP 连接的视角看 Socket 过程</h2><h3 id="TCP-三次握手的-Socket-过程"><a href="#TCP-三次握手的-Socket-过程" class="headerlink" title="TCP 三次握手的 Socket 过程"></a>TCP 三次握手的 Socket 过程</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-32-08-660329-20201010111311841-1023720840-c00951.png" alt="img"></p><ol><li>服务器初始化 Socket，调用 <code>socket()</code>、<code>bind()</code>、<code>listen()</code>，调用 <code>accept()</code> 阻塞等待。</li><li>客户端调用 <code>connect()</code> 向服务器发送 SYN 请求。</li><li>服务器发送 SYN 和 ACK 应答，完成第一次握手。</li><li>客户端收到应答后返回，再发送一个 ACK。</li><li>服务器接收 ACK 确认，<code>accept()</code> 返回，建立连接。</li></ol><h3 id="TCP-四次挥手的-Socket-过程"><a href="#TCP-四次挥手的-Socket-过程" class="headerlink" title="TCP 四次挥手的 Socket 过程"></a>TCP 四次挥手的 Socket 过程</h3><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/13-32-15-660329-20201010111352844-514391838-7cca07.png" alt="img"></p><ol><li>某个应用进程调用 <code>close()</code> 主动关闭，发送一个 FIN。</li><li>另一端接收到 FIN 后被动关闭，发送 ACK。</li><li>被动关闭的一端调用 <code>close()</code> 关闭 Socket，发送 FIN。</li><li>接收端发送 ACK 确认，连接关闭。</li></ol><p><strong>注意：</strong> 服务端代码在实际应用中需要并发处理，服务器通常会 fork 新的进程或线程来处理请求，以提高处理能力。</p><hr><p>Socket 是网络通信的基础，通过理解 Socket，可以更好地进行网络编程和应用开发。希望这篇文章能帮助你理解 Socket 的概念及其应用场景。如果有疑问，欢迎在评论区讨论！</p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux运维 </tag>
            
            <tag> Socket </tag>
            
            <tag> 套接字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LNMP环境准备</title>
      <link href="/2024/06/23/LNMP%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
      <url>/2024/06/23/LNMP%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h3 id="1、系统环境"><a href="#1、系统环境" class="headerlink" title="1、系统环境"></a>1、系统环境</h3><p>centos7.6</p><h3 id="2、部署规划"><a href="#2、部署规划" class="headerlink" title="2、部署规划"></a>2、部署规划</h3><table><thead><tr><th>编号</th><th>主机名称</th><th>IP地址</th><th>角色</th></tr></thead><tbody><tr><td>1</td><td>Web01.itcast.cn</td><td>10.1.1.11</td><td>Web01服务器</td></tr></tbody></table><h3 id="3、LNMP环境准备"><a href="#3、LNMP环境准备" class="headerlink" title="3、LNMP环境准备"></a>3、LNMP环境准备</h3><p>第一步：克隆母鸡或模板及，生产Wbe01服务器</p><p>第二步：更改主机名称，采用FQDN格式，如web01.itcast.cn</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hostnamectl set-hostname web01.itcast.cn</span></span><br><span class="line"><span class="comment"># su</span></span><br></pre></td></tr></table></figure><p>第三步：更改服务器的IP地址（使用静态模式）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line">...</span><br><span class="line">IPADDR=<span class="string">&quot;192.168.31.141&quot;</span></span><br><span class="line">NETMASK=<span class="string">&quot;255.255.255.0&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.31.2&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;114.114.114.114&quot;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>第四步：绑定主机名称以及IP地址到&#x2F;etc&#x2F;hosts文件中，然后重启网络</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/hosts</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">31.141</span> web01 web01.itcast.cn</span><br><span class="line"><span class="comment">#sysctmctl restart network</span></span><br></pre></td></tr></table></figure><p>第五步：关闭防火墙、NetworkManager、SELinux</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl stop firewalld</span></span><br><span class="line"><span class="comment"># systemctl disable firewalld</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#setenforence 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#systemctl stop NetworkManger</span></span><br><span class="line"><span class="comment">#systemctl disable NetworkManager</span></span><br></pre></td></tr></table></figure><p>第六步：配置yum源</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.cloud.tencent.com/repo/centos7_base.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#yum clean all</span></span><br><span class="line"><span class="comment">#yum makecache</span></span><br></pre></td></tr></table></figure><p>第七步：时间同步</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#yum install ntpdate</span></span><br><span class="line"><span class="comment">#ntpdate ntp.aliyun.com</span></span><br><span class="line"><span class="comment">#yum install ntpd </span></span><br><span class="line"><span class="comment">#systemctl start ntpd</span></span><br><span class="line"><span class="comment">#systemctl enable ntpd</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SFYYH/pic_bed@main/images/2024/06/23/02-13-07-262-hei_se_de-long-hei_bai_she_ying-dan_se_mo_shi-hong_she_ying-x750-c02fd7.jpeg" alt="龙, 黑色的, 黑色和白色的, 黑白摄影, 单色模式 壁纸 1920x1200 允许"></p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> LNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程导论重点</title>
      <link href="/2024/05/30/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA%E9%87%8D%E7%82%B9/"/>
      <url>/2024/05/30/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA%E9%87%8D%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>软件工程导论重点</p></blockquote><h1 id="第一章-软件工程学概述"><a href="#第一章-软件工程学概述" class="headerlink" title="第一章 软件工程学概述"></a>第一章 软件工程学概述</h1><h3 id="1-产生软件危机的原因"><a href="#1-产生软件危机的原因" class="headerlink" title="1.产生软件危机的原因"></a>1.产生软件危机的原因</h3><blockquote><p>一方面与软件本身的特点有关，另一方面也和软件开发与维护的方法不正确有关。</p></blockquote><blockquote><p>P32 假设自己是一家软件公司的总工程师，当把图 1.1 给手下的软件工程师们观看，告诉他们及时发现并改正错误的重要性时，有人不同意这个观点，认为要求在错误进入软件之前就清楚它们是不现实的，并举例说:“如果一个故障是编码错误造成的，那么，一个人怎么能在设计阶段清除它呢?”应该怎么反驳他?</p><p>答：在软件开发的不同阶段进行修改需要付出的代价是很不相同的，在早期引入变动，涉及的面较少，因而代价也比较低;而在开发的中期,软件配置的许多成分已经完成，引入一个变动要对所有已完成的配置成分都做相应的修改，不仅工作量大，而且逻辑上也更复杂，因此付出的代价剧增；在软件“已经完成”时再引人变动,当然需要付出更高的代价。一个故障是代码错误造成的，有时这种错误是不可避免的，但要修改的成本是很小的，因为这不是整体构架的错误。</p></blockquote><h3 id="2-消除软件危机的途径"><a href="#2-消除软件危机的途径" class="headerlink" title="2.消除软件危机的途径"></a>2.消除软件危机的途径</h3><blockquote><p>用软件工程的概念、方法学去运用到软件，整个生命周期中去。</p><ol><li><p>首先应该对计算机软件有一个正确的认识</p></li><li><p>充分认识到软件开发应该是各类人员协同配合，共同完成的工程项目</p></li><li><p>推广使用在实践中总结出来的开发软件的成功技术和方法，并且研究探索更好的技术和方法</p></li><li><p>应该开发和使用更好的软件工具</p></li></ol></blockquote><p>&nbsp;</p><h3 id="3-程序是能够完成预定功能和性能的可执行的指令序列。"><a href="#3-程序是能够完成预定功能和性能的可执行的指令序列。" class="headerlink" title="3.程序是能够完成预定功能和性能的可执行的指令序列。"></a>3.程序是能够完成预定功能和性能的可执行的指令序列。</h3><h3 id="4-数据是使程序能够适当地处理信息的数据结构。"><a href="#4-数据是使程序能够适当地处理信息的数据结构。" class="headerlink" title="4.数据是使程序能够适当地处理信息的数据结构。"></a>4.数据是使程序能够适当地处理信息的数据结构。</h3><h3 id="5-文档是开发、使用和维护程序所需要的图文资料。"><a href="#5-文档是开发、使用和维护程序所需要的图文资料。" class="headerlink" title="5.文档是开发、使用和维护程序所需要的图文资料。"></a>5.文档是开发、使用和维护程序所需要的图文资料。</h3><h3 id="6-IEEE-为软件下的定义是："><a href="#6-IEEE-为软件下的定义是：" class="headerlink" title="6.IEEE 为软件下的定义是："></a>6.IEEE 为软件下的定义是：</h3><blockquote><p>计算机程序、方法、规则、相关的文档资料以及在计算机上运行程序时所必需的数据。</p></blockquote><h3 id="7-主要比较两个典型的软件工程定义的异同"><a href="#7-主要比较两个典型的软件工程定义的异同" class="headerlink" title="7.主要比较两个典型的软件工程定义的异同"></a>7.主要比较两个典型的软件工程定义的异同</h3><blockquote><p>1968 年在第一届 NATO 会议上给出了软件工程的一个早期定义：软件工程就是为了经济地获得可靠的且能在实际机器上有效地运行的软件，而建立和使用完善的工程原理。</p></blockquote><blockquote><p>1993 年 IEEE 进一步给出了更全面更具体的定义：软件工程是把系统的、规范的、可度量的途径应用于软件开发、运行和维护过程，也就是把工程应用于软件。</p></blockquote><h3 id="8-目前使用得最广泛的软件工程方法学，分别是传统方法学和面向对象方法学。"><a href="#8-目前使用得最广泛的软件工程方法学，分别是传统方法学和面向对象方法学。" class="headerlink" title="8.目前使用得最广泛的软件工程方法学，分别是传统方法学和面向对象方法学。"></a>8.目前使用得最广泛的软件工程方法学，分别是传统方法学和面向对象方法学。</h3><h3 id="9-软件生命周期的三个时期和八个阶段及其产物（形成了每一个阶段的说明书）-nbsp"><a href="#9-软件生命周期的三个时期和八个阶段及其产物（形成了每一个阶段的说明书）-nbsp" class="headerlink" title="9.软件生命周期的三个时期和八个阶段及其产物（形成了每一个阶段的说明书）&nbsp;"></a>9.软件生命周期的三个时期和八个阶段及其产物（形成了每一个阶段的说明书）&nbsp;</h3><blockquote><p>（1）三个时期：软件定义、软件开发和运行维护（也称为软件维护）。</p></blockquote><blockquote><p>（2）八个阶段及产物：</p><ol><li>问题定义—问题定义说明书 </li><li>可行性研究—可行性研究报告 </li><li>需求分析—需求分析说明书 </li><li>总体设计—总体设计说明书 </li><li>详细设计—详细设计说明书</li><li>编码和单元测试—程序清单和单元测试说明书 </li><li>综合测试—综合测试报告</li><li>软件维护—软件维护报告</li></ol></blockquote><h3 id="10-为了获取高质量的软件产品，在软件工具支撑下，由软件人员完成一系列的软件工程活动，我们把它称之为软件过程。"><a href="#10-为了获取高质量的软件产品，在软件工具支撑下，由软件人员完成一系列的软件工程活动，我们把它称之为软件过程。" class="headerlink" title="10.为了获取高质量的软件产品，在软件工具支撑下，由软件人员完成一系列的软件工程活动，我们把它称之为软件过程。"></a>10.为了获取高质量的软件产品，在软件工具支撑下，由软件人员完成一系列的软件工程活动，我们把它称之为软件过程。</h3><h3 id="11-过程模型"><a href="#11-过程模型" class="headerlink" title="11.过程模型"></a>11.过程模型</h3><p>  1.瀑布模型</p><blockquote><p>适用场景：开发大型软件，需求明确，变动不多。比如，国防民生一系列软件。</p></blockquote><ol start="2"><li>快速原型模型</li></ol><blockquote><p>适用场景：需求不明确，处理过程明确，简单系统，涉及面窄的小型系统。</p></blockquote><ol start="3"><li>增量模型</li></ol><blockquote><p>适用场景：设计方案有一定风险，工期紧张，功能可以划分，比较复杂的项目</p></blockquote><ol start="4"><li>螺旋模型</li></ol><blockquote><p>适用场景：内部开发的大规模软件项目，大型、复杂且高风险的项目</p></blockquote><ol start="5"><li>喷泉模型</li></ol><blockquote><p>适用场景：适用于面向对象的软件开发过程</p></blockquote><h3 id="12-软件工程方法学包含-3-个要素：方法、工具和过程。"><a href="#12-软件工程方法学包含-3-个要素：方法、工具和过程。" class="headerlink" title="12.软件工程方法学包含 3 个要素：方法、工具和过程。"></a>12.软件工程方法学包含 3 个要素：方法、工具和过程。</h3><h3 id="13-通常把在软件生命周期全过程中使用的一整套技术方法的集合称为方法学，也-称为范型。"><a href="#13-通常把在软件生命周期全过程中使用的一整套技术方法的集合称为方法学，也-称为范型。" class="headerlink" title="13.通常把在软件生命周期全过程中使用的一整套技术方法的集合称为方法学，也 称为范型。"></a>13.通常把在软件生命周期全过程中使用的一整套技术方法的集合称为方法学，也 称为范型。</h3><h1 id="第二章-可行性研究"><a href="#第二章-可行性研究" class="headerlink" title="第二章 可行性研究"></a><strong>第二章 可行性研究</strong></h1><h3 id="1-为什么要进行可行性研究？"><a href="#1-为什么要进行可行性研究？" class="headerlink" title="1.为什么要进行可行性研究？"></a>1.为什么要进行可行性研究？</h3><blockquote><p>开发一个系统的时候，需要判断他完成之后是否可以带来收益，是否值得开 发，如果问题没有可行的解，那么花费在这项工程上的任何时间、人力、软硬件 资源和经费，都是无谓的浪费，所以，我们要进行可行性研究。 可行性研究的目的，就是用最小的代价在尽可能短的时间内确定问题是否能够解决。</p></blockquote><h3 id="2-可行性研究需要从那几个方面进行研究？"><a href="#2-可行性研究需要从那几个方面进行研究？" class="headerlink" title="2.可行性研究需要从那几个方面进行研究？"></a>2.可行性研究需要从那几个方面进行研究？</h3><blockquote><p>技术可行性、经济可行性、操作可行性，除此之外，还要考虑法律和社会效益。</p></blockquote><h3 id="3-可行性研究过程的步骤"><a href="#3-可行性研究过程的步骤" class="headerlink" title="3.可行性研究过程的步骤"></a>3.可行性研究过程的步骤</h3><blockquote><p>① 复查系统规模和目标</p><p>② 研究目前正在使用的系统</p><p>③ 导出新系统的高层逻辑模型</p><p>④ 进一步定义问题</p><p>⑤ 导出和评价供选择的解法</p><p>⑥ 推荐行动方针</p><p>⑦ 草拟开发计划</p><p>⑧ 书写文档提交审查</p></blockquote><h3 id="4-系统流程图是概括地描述物理系统的传统工具"><a href="#4-系统流程图是概括地描述物理系统的传统工具" class="headerlink" title="4.系统流程图是概括地描述物理系统的传统工具"></a>4.系统流程图是概括地描述<strong><strong>物理系统</strong></strong>的传统工具</h3><h3 id="5-数据流图（DFD）是一种图形化技术，它描绘信息流和数据从输入移动到输出的过程中所经受的变换。在数据流图中没有任何具体的物理部件，它只是描绘数据在软件中流动和被处理的逻辑过程。"><a href="#5-数据流图（DFD）是一种图形化技术，它描绘信息流和数据从输入移动到输出的过程中所经受的变换。在数据流图中没有任何具体的物理部件，它只是描绘数据在软件中流动和被处理的逻辑过程。" class="headerlink" title="5.数据流图（DFD）是一种图形化技术，它描绘信息流和数据从输入移动到输出的过程中所经受的变换。在数据流图中没有任何具体的物理部件，它只是描绘数据在软件中流动和被处理的逻辑过程。"></a>5.数据流图（DFD）是一种图形化技术，它描绘<strong>信息流和数据</strong>从<strong>输入</strong>移动到<strong>输出</strong>的过程中所经受的<strong>变换</strong>。在数据流图中<strong>没有任何具体的物理部件</strong>，它只是描绘数据在软件中流动和被处理的<strong>逻辑过程</strong>。</h3><h3 id="6-数据流图中包含的四要素：数据的源点、终点，变换数据的处理，数据存储，-数据流。"><a href="#6-数据流图中包含的四要素：数据的源点、终点，变换数据的处理，数据存储，-数据流。" class="headerlink" title="6.数据流图中包含的四要素：数据的源点、终点，变换数据的处理，数据存储， 数据流。"></a>6.数据流图中包含的四要素：数据的源点、终点，变换数据的处理，数据存储， 数据流。</h3><blockquote><p><strong>！！要求会画简单的数据流图！！！最起码会画顶层和第二层(就是顶层之后的)！！</strong></p></blockquote><h3 id="7-数据字典的定义"><a href="#7-数据字典的定义" class="headerlink" title="7.数据字典的定义"></a>7.数据字典的定义</h3><blockquote><p>数据字典是关于数据的信息的集合，也就是对数据流图中包含地所有元素的定义的集合。</p></blockquote><h3 id="8-数据流图与字典的关系"><a href="#8-数据流图与字典的关系" class="headerlink" title="8.数据流图与字典的关系"></a>8.数据流图与字典的关系</h3><blockquote><p>数据流图和数据字典共同构成系统的逻辑模型，没有数据字典，数据流图就不严格，然而没有数据流图，数据字典也很难于发挥作用。只有数据流图和对数据流图中每个元素的精确定义放在一起，才能共同构成系统的规格说明。</p></blockquote><h3 id="9-数据字典的作用"><a href="#9-数据字典的作用" class="headerlink" title="9.数据字典的作用"></a>9.数据字典的作用</h3><blockquote><p>任何字典最主要的用途都是供人查阅对不了解的条目的解释，数据字典的作用也正是在软件分析和设计的过程中给人提供关于数据的描述信息。</p></blockquote><h3 id="10-数据字典由对下列-4-类元素的定义组成"><a href="#10-数据字典由对下列-4-类元素的定义组成" class="headerlink" title="10.数据字典由对下列 4 类元素的定义组成"></a>10.数据字典由对下列 4 类元素的定义组成</h3><blockquote><p>数据流、数据流分量（即数据元素）、数据存储、处理。</p></blockquote><h3 id="11-成本估计的估算技术：代码行技术、任务分解技术、-自动估计成本技术-。"><a href="#11-成本估计的估算技术：代码行技术、任务分解技术、-自动估计成本技术-。" class="headerlink" title="11.成本估计的估算技术：代码行技术、任务分解技术、(自动估计成本技术)。"></a>11.成本估计的估算技术：代码行技术、任务分解技术、(自动估计成本技术)。</h3><h3 id="12-成本-效益分析的方法从经济角度判断这个系统是否值得投资。"><a href="#12-成本-效益分析的方法从经济角度判断这个系统是否值得投资。" class="headerlink" title="12.成本&#x2F;效益分析的方法从经济角度判断这个系统是否值得投资。"></a>12.成本&#x2F;效益分析的方法从经济角度判断这个系统是否值得投资。</h3><h3 id="13-P53-1-在软件开发的早期时期阶段为什么要进行可行性研究？应该从哪些方面研究目标系统的可行性？"><a href="#13-P53-1-在软件开发的早期时期阶段为什么要进行可行性研究？应该从哪些方面研究目标系统的可行性？" class="headerlink" title="13. P53 1.在软件开发的早期时期阶段为什么要进行可行性研究？应该从哪些方面研究目标系统的可行性？"></a>13. P53 1.在软件开发的早期时期阶段为什么要进行可行性研究？应该从哪些方面研究目标系统的可行性？</h3><blockquote><h3 id="（1）-进行可行性研究的目的"><a href="#（1）-进行可行性研究的目的" class="headerlink" title="（1）.进行可行性研究的目的"></a>（1）.进行可行性研究的目的</h3><blockquote><p>可行性研究的目的是,用最小的代价在尽可能短的时间内研究并确定客户提出的问题是否有行得通的解决办法。必须分析几种主要的候选解法的利弊，从而判断原定的系统目标和规模是否现实，系统完成后所能带来的效益是否大到值得投资开发这个系统的程度。</p></blockquote><h3 id="（2）-从下述三个方面研究每种解决方案的可行性"><a href="#（2）-从下述三个方面研究每种解决方案的可行性" class="headerlink" title="（2）.从下述三个方面研究每种解决方案的可行性"></a>（2）.从下述三个方面研究每种解决方案的可行性</h3><blockquote><p>①技术可行性:使用现有的技术能否实现这个系统。</p><p>②经济可行性:这个系统的经济效益能否超过它的开发成本。</p><p>③操作可行性:这个系统的操作方式在该客户组织内是否行得通。&nbsp;</p></blockquote></blockquote><h2 id="第三章-需求分析"><a href="#第三章-需求分析" class="headerlink" title="第三章 需求分析"></a><strong>第三章 需求分析</strong></h2><h3 id="1-需求分析的基本任务是准确地回答”系统必须做什么”这个问题。"><a href="#1-需求分析的基本任务是准确地回答”系统必须做什么”这个问题。" class="headerlink" title="1.需求分析的基本任务是准确地回答”系统必须做什么”这个问题。"></a>1.需求分析的基本任务是准确地回答”系统必须做什么”这个问题。</h3><h3 id="2-需求分析的任务-4-点-nbsp"><a href="#2-需求分析的任务-4-点-nbsp" class="headerlink" title="2.需求分析的任务(4 点)&nbsp;"></a>2.需求分析的任务(4 点)&nbsp;</h3><blockquote><ol><li><p>确定对系统的综合要求</p></li><li><p>分析系统的数据要求</p></li><li><p>导出系统的逻辑模型</p></li><li><p>修正系统开发计划</p></li></ol></blockquote><p>&nbsp;</p><h3 id="3-层次方框图描绘数据的层次结构。"><a href="#3-层次方框图描绘数据的层次结构。" class="headerlink" title="3.层次方框图描绘数据的层次结构。"></a>3.层次方框图描绘<strong>数据的层次结构。</strong></h3><h3 id="4-需求阶段的建模工具有哪些？-5-个"><a href="#4-需求阶段的建模工具有哪些？-5-个" class="headerlink" title="4.需求阶段的建模工具有哪些？(5 个)"></a>4.需求阶段的建模工具有哪些？(5 个)</h3><blockquote><ol><li><p>实体-联系图(E-R 图)</p></li><li><p>层次方框图</p></li><li><p>状态转换图</p></li><li><p>Warnier 图</p></li><li><p>IPO 图</p></li></ol></blockquote><p>&nbsp;</p><h3 id="5-从哪些方面验证软件需求的正确性？-4-个方面"><a href="#5-从哪些方面验证软件需求的正确性？-4-个方面" class="headerlink" title="5.从哪些方面验证软件需求的正确性？(4 个方面)"></a>5.从哪些方面验证软件需求的正确性？(4 个方面)</h3><blockquote><ol><li><p>一致性</p></li><li><p>完整性</p></li><li><p>现实性</p></li><li><p>有效性</p></li></ol></blockquote><h3 id="6-P73-1-为什么要进行需求分析，通常对软件系统有哪些需求？"><a href="#6-P73-1-为什么要进行需求分析，通常对软件系统有哪些需求？" class="headerlink" title="6.P73 1.为什么要进行需求分析，通常对软件系统有哪些需求？"></a>6.P73 1.为什么要进行需求分析，通常对软件系统有哪些需求？</h3><blockquote><p> (1)需求分析的原因</p><p>为了开发真正满足用户需求的软件产品，需求分析是软件开发工作获得成功的前提条件，不能满足用户需求的程序只会今用户失望，给开发者带来烦恼。</p></blockquote><blockquote><p>(2)对软件系统的需求</p><p>功能需求、性能需求、可靠性和可用性需求、出错处理、借口需求、约束、逆向需求、将来可能提出的要求</p></blockquote><h3 id="7-软件验收的依据有没有需求规格说明书？"><a href="#7-软件验收的依据有没有需求规格说明书？" class="headerlink" title="7.软件验收的依据有没有需求规格说明书？"></a>7.软件验收的依据有没有需求规格说明书？</h3><blockquote><p>软件需求规格说明书是需求分析阶段的最终成果，是软件开发中的重要文档之一。</p><p>软件需求规格说明书的作用包括：</p><p>①便于用户、开发人员进行理解和交流。</p><p>②反映出用户问题的结构，可以作为软件开发工作的基础和依据。</p><p>③作为确认测试和验收的依据。</p><p>需求规格说明书的作用：开发人员对软件的一些相应的理解，为后面的概要设计和详细设计阶段提供依据。</p><p>软件需求规格说明书的作用不包括_<em>D</em>_。</p><p>A．软件验收的依据 B．用户与开发人员对软件要做什么的共同理解C．软件设计的依据 D．软件可行性研究的依据</p></blockquote><h1 id="第四章-形式化说明技术"><a href="#第四章-形式化说明技术" class="headerlink" title="第四章 形式化说明技术"></a>第四章 形式化说明技术</h1><h3 id="1-有穷状态机的-5-要素-或-5-部分-："><a href="#1-有穷状态机的-5-要素-或-5-部分-：" class="headerlink" title="1.有穷状态机的 5 要素(或 5 部分)："></a>1.有穷状态机的 5 要素(或 5 部分)：</h3><blockquote><ol><li><p>状态集 J</p></li><li><p>输入集 K</p></li><li><p>状态转换函数 T</p></li><li><p>初识态 S</p></li><li><p>终态集 F</p></li></ol></blockquote><h3 id="2-Petri-网包含的四种元素-nbsp"><a href="#2-Petri-网包含的四种元素-nbsp" class="headerlink" title="2.Petri 网包含的四种元素&nbsp;"></a>2.Petri 网包含的四种元素&nbsp;</h3><blockquote><ol><li><p>一组位置 P</p></li><li><p>一组转换 T</p></li><li><p>输入函数 I</p></li><li><p>输出函数 O</p></li></ol></blockquote><h1 id="第五章-总体设计"><a href="#第五章-总体设计" class="headerlink" title="第五章 总体设计"></a>第五章 总体设计</h1><ol><li><h3 id="总体设计阶段是决定“怎样做”的时候。"><a href="#总体设计阶段是决定“怎样做”的时候。" class="headerlink" title="总体设计阶段是决定“怎样做”的时候。"></a>总体设计阶段是决定“怎样做”的时候。</h3></li><li><h3 id="对于典型的总体设计过程包含-9-个步骤："><a href="#对于典型的总体设计过程包含-9-个步骤：" class="headerlink" title="对于典型的总体设计过程包含 9 个步骤："></a>对于典型的总体设计过程包含 9 个步骤：</h3><blockquote><ol><li><p>设想供选择的方案</p></li><li><p>选取合理的方案</p></li><li><p>推荐最佳方案</p></li><li><p>功能分解</p></li><li><p>设计软件结构</p></li><li><p>设计数据库</p></li><li><p>制定测试计划</p></li><li><p>书写文档</p></li><li><p>审查和复审</p></li></ol></blockquote></li><li><h3 id="设计原理-nbsp"><a href="#设计原理-nbsp" class="headerlink" title="设计原理&nbsp;"></a>设计原理&nbsp;</h3></li></ol><blockquote><ol><li><p>模块化思想(要清楚过程推导) (2)抽象&nbsp;</p></li><li><p>逐步求精</p></li><li><p>信息隐藏和局部化</p></li><li><p>模块独立&nbsp;</p></li></ol></blockquote><ol start="4"><li><h3 id="模块独立的概念是模块化、抽象、信息隐藏和局部化概念的直接结果。"><a href="#模块独立的概念是模块化、抽象、信息隐藏和局部化概念的直接结果。" class="headerlink" title="模块独立的概念是模块化、抽象、信息隐藏和局部化概念的直接结果。"></a>模块独立的概念是模块化、抽象、信息隐藏和局部化概念的直接结果。</h3></li><li><h3 id="模块的独立程度可以由两个定性标准度量，这两个标准分别称为内聚和耦合。"><a href="#模块的独立程度可以由两个定性标准度量，这两个标准分别称为内聚和耦合。" class="headerlink" title="模块的独立程度可以由两个定性标准度量，这两个标准分别称为内聚和耦合。"></a>模块的独立程度可以由两个定性标准度量，这两个标准分别称为内聚和耦合。</h3></li></ol><blockquote><p>△耦合是对一个软件结构内不用模块之间互连程度的度量。</p><p>耦合的强弱取决于模块间接口的复杂程度。</p><p>如果两个模块彼此间通过参数交换信息，而且交换的信息仅仅是数据，那么这种耦合称为<strong>数据耦合</strong>。数据耦合是低耦合</p><p>如果传递的信息中有控制信息(尽管有时这种控制信息以数据的形式出现)， 则这种耦合称为<strong>控制耦合</strong>。控制耦合是中等程度的耦合。</p><p>当把整个数据结构作为参数传递而被调用的模块只需要使用其中一部分数据元素时，就出现了特征耦合。</p><p>当两个或多个模块通过一个公共数据环境相互作用时，他们之间的耦合称为<strong>公共环境耦合</strong></p><p>最高程度的耦合是<strong>内容耦合</strong></p><p>如果出现下列情况之一，两个模块间就发生了<strong>内容耦合</strong>。</p><ul><li><p>一个模块访问另一个模块的内部数据。</p></li><li><p>一个模块不通过正常入口而转到另一个模块的内部。</p></li><li><p>两个模块有一部分程序代码重叠(只可能出现在汇编程序中)</p></li><li><p>一个模块有多个入口(这意味着一个模块有几种功能)</p></li></ul></blockquote><blockquote><p>△内聚：标志着一个模块内各个元素彼此结合的紧密程度，它是信息隐藏和局部化概念的自然扩展。</p><blockquote><p>低内聚：</p><ol><li>如果一个模块完成一组任务，这些任务彼此间即使有关系，关系也是很松散的，就叫<strong>偶然内聚</strong>。</li><li>如果一个模块完成的任务在逻辑上属于相同或相似的一类，则称为<strong>逻辑内聚</strong>。 </li><li>如果一个模块包含的任务必须在同一段时间内执行，就叫时间内聚。</li></ol></blockquote><blockquote><p>中内聚：</p><ol><li>如果一个模块内的处理元素是相关的，而且必须以特定次序执行，则称为<strong>过程内聚</strong>。</li><li>如果模块中所有元素都使用同一个输入数据和(或)产生同一个输出数据，则称为通信内聚。</li></ol></blockquote><blockquote><p>高内聚：</p><ol><li>如果一个模块内的处理元素和同一个功能密切相关，而且这些处理必须顺序执行(通常一个处理元素的输出数据作为下一个处理元素的输入数据)，则称为<strong>顺序内聚</strong>。</li><li>如果模块内所有处理元素属于同一个整体，完成一个单一的功能，则称为功能内聚。</li></ol></blockquote></blockquote><ol start="6"><li><h3 id="启发规则"><a href="#启发规则" class="headerlink" title="启发规则"></a>启发规则</h3></li></ol><blockquote><p>模块的作用域定义为受该模块内一个判定影响的所有模块的集合。模块的作用域应该在控制域之内。</p></blockquote><ol start="7"><li><h3 id="一个设计得比较好的软件，它的外形是什么样的？-——-椭圆形"><a href="#一个设计得比较好的软件，它的外形是什么样的？-——-椭圆形" class="headerlink" title="一个设计得比较好的软件，它的外形是什么样的？ —— 椭圆形"></a>一个设计得比较好的软件，它的外形是什么样的？ —— <strong>椭圆形</strong></h3></li></ol><blockquote><p>软件结构顶层会有一个主控模块，接下来会有分层，设计的这个模块应该是单入单出的，做出来会是一个椭圆形，因为到下层的底层模块会越来越少，这样的情况下才是相对来说比较好的一个模块。</p></blockquote><ol start="8"><li><h3 id="总体设计阶段的建模工具有哪些？-nbsp"><a href="#总体设计阶段的建模工具有哪些？-nbsp" class="headerlink" title="总体设计阶段的建模工具有哪些？&nbsp;"></a>总体设计阶段的建模工具有哪些？&nbsp;</h3></li></ol><blockquote><ol><li><p>层次图</p></li><li><p>HIPO 图</p></li><li><p>结构图</p></li></ol></blockquote><p>&nbsp;</p><ol start="9"><li><h3 id="P114-1-为每种类型的模块耦合举一个具体例子。"><a href="#P114-1-为每种类型的模块耦合举一个具体例子。" class="headerlink" title="P114 1.为每种类型的模块耦合举一个具体例子。"></a>P114 1.为每种类型的模块耦合举一个具体例子。</h3><blockquote><p>(1)数据耦合:计算机网络属于松耦合系统。</p><p>(2)控制耦合:遥控器与电器。</p><p>(3)公共环境耦合:多机系统(4)内容耦合;汇编程序模块。</p></blockquote></li><li><p>P114 2.为每种类型的模块内聚举一个具体例子。</p><blockquote><p>(1)逻辑内聚 一个子程序将打印季度开支报告、月份开支报告和日开支报告,具体打印哪二 个,将由传入的控制标志决定，这个子程序具有逻辑内聚性，因为它的内部逻辑 是由输进去的外部控制标志决定的。 </p><p>(2)时间内聚 若一个模块包含了需要在同一时间段中执行的多个任务，则称该模块的内案 为时间内聚。例如，将多个变量的初始化放在同一个模块中实现，或将需婴同时 使用的多个库文件的打开操作放在同一个模块中，都会产生时间内聚的模块。 </p><p>(3)过程内聚 一个子程序，它产生读取雇员的名字，然后是地址，最后是它的电话号码。 这种顺序之所以重要，仅仅是因为它符合用户的要求，用户希望按这种顺序进行 屏幕输入。另外一个子程序将读取关于雇员的其它信息。这个子程序是过程内聚 性，因为是由一个特定顺序面不是其它任何原因，把这些操作组合在一起的。</p><p> (4)顺序内聚 一个按给出的生日计算雇员年龄、退休时间的子程序，如果它是利用所计算 的年龄来确定雇员将要退休的时间，那么它就具有顺序内聚性。而如果它是分别 计算年龄和退休时间的，但使用相同生日数据，那它就只具有通讯内聚性。 </p><p>(5)功能内聚 计算雇员年龄并给出生日的子程序就是功能内聚性的，因为它只完成一项工 作，而且完成得很好。</p><p> (6)偶然内聚 一个模块完成一组任务，这些任务彼此间即使有关系，关系也比较松散，就 叫偶然内聚。</p></blockquote></li></ol><h1 id="第六章-详细设计"><a href="#第六章-详细设计" class="headerlink" title="第六章 详细设计"></a>第六章 详细设计</h1><h3 id="1-人机界面设计指南包括哪三类？"><a href="#1-人机界面设计指南包括哪三类？" class="headerlink" title="1.人机界面设计指南包括哪三类？"></a>1.人机界面设计指南包括哪三类？</h3><blockquote><ol><li><p>一般交互指南</p></li><li><p>信息显示指南</p></li><li><p>数据输入指南</p></li></ol></blockquote><h3 id="2-过程设计的工具有哪些？-nbsp"><a href="#2-过程设计的工具有哪些？-nbsp" class="headerlink" title="2.过程设计的工具有哪些？&nbsp;"></a>2.过程设计的工具有哪些？&nbsp;</h3><blockquote><ol><li><p>程序流程图</p></li><li><p>盒图</p></li><li><p>PAD 图</p></li><li><p>判定表</p></li><li><p>判定树</p></li></ol></blockquote><blockquote><p><strong>！！要求大家会画判定树、判定表！！</strong></p><p>！！要求大家会根据代码画程序流程图或者是画合图或者是画 PAD 图！！</p></blockquote><ol start="3"><li><h3 id="程序复杂程度的定量度量-！！要求会计算它的环形复杂度！！"><a href="#程序复杂程度的定量度量-！！要求会计算它的环形复杂度！！" class="headerlink" title="程序复杂程度的定量度量 ！！要求会计算它的环形复杂度！！"></a>程序复杂程度的定量度量 <strong>！！要求会计算它的环形复杂度！！</strong></h3></li></ol><blockquote><p>△计算环形复杂度的方法</p><p>（1）流图中线性无关的区域数等于环形复杂度</p><p>（2）V(G)≡E-N+2 （E 是流图中边的条数，N 是结点数）</p><p>（3）V(G)≡P+1 （P 是流图中判定结点的数目）</p></blockquote><h1 id="第七章-实现"><a href="#第七章-实现" class="headerlink" title="第七章 实现"></a><strong>第七章 实现</strong></h1><p>测试有白盒测试和黑盒测试。</p><h3 id="1-大型软件测试的测试过程是由哪几个步骤组成？"><a href="#1-大型软件测试的测试过程是由哪几个步骤组成？" class="headerlink" title="1.大型软件测试的测试过程是由哪几个步骤组成？"></a>1.大型软件测试的测试过程是由哪几个步骤组成？</h3><blockquote><ol><li><p>模块测试</p></li><li><p>子系统测试</p></li><li><p>系统测试</p></li><li><p>验收测试</p></li><li><p>平行运行</p></li></ol></blockquote><h3 id="2-单元测试是以白盒测试为主，黑盒测试为辅。"><a href="#2-单元测试是以白盒测试为主，黑盒测试为辅。" class="headerlink" title="2.单元测试是以白盒测试为主，黑盒测试为辅。"></a>2.单元测试是以白盒测试为主，黑盒测试为辅。</h3><h3 id="3-集成测试分为渐增式测试和非渐增式测试"><a href="#3-集成测试分为渐增式测试和非渐增式测试" class="headerlink" title="3.集成测试分为渐增式测试和非渐增式测试"></a>3.集成测试分为渐增式测试和非渐增式测试</h3><blockquote><p>渐增测试有自顶向下和自底向上两种集成策略。</p><p>自顶向下集成使用<strong>深度优先的策略</strong>或<strong>宽度优先的策略</strong>。</p></blockquote><h3 id="4-什么时候用自底向上？"><a href="#4-什么时候用自底向上？" class="headerlink" title="4.什么时候用自底向上？"></a>4.什么时候用自底向上？</h3><blockquote><p>想早点发现设计上的错误——采用自底向上</p></blockquote><blockquote><p>P159 两种策略的比较</p><p>自顶向下测试方法的主要优点是不需要测试驱动程序,能够在测试阶段的早期实现并验证系统的主要功力能，而且能在早期发现上层模块的接口错误。</p><p>自顶向下测试方法的主要缺点是需要存根程序,可能遇到与此相联系的测试困难,低层关键模块中的错误发现较晚,而且用这种方法在早期不能充分展开人力。</p><p>可以看出,自底向上测试方法的优缺点与上述自顶向下测试式方法的优缺点刚好相反。</p></blockquote><h3 id="5-白盒测试技术"><a href="#5-白盒测试技术" class="headerlink" title="5.白盒测试技术"></a>5.白盒测试技术</h3><blockquote><p>1)需要大家根据程序代码，会画程序流程图（比如 P163 图 7.5）。 </p><p>2)7.5 这样能画成之后，你可以对它进行标号，路径的标号。</p><p><strong>3)会设计测试用例(比如要求使用语句覆盖或者判定覆盖或条件覆盖设计测试用例，这三个必须掌握！)！！</strong></p></blockquote><h3 id="6-白盒测试典型的测试技术有哪些？-nbsp"><a href="#6-白盒测试典型的测试技术有哪些？-nbsp" class="headerlink" title="6.白盒测试典型的测试技术有哪些？&nbsp;"></a>6.白盒测试典型的测试技术有哪些？&nbsp;</h3><blockquote><ol><li><p>逻辑覆盖</p></li><li><p>控制结构测试</p></li></ol></blockquote><blockquote><p>常用的控制结构测试技术：</p></blockquote><blockquote><ol><li><p>基本路径测试</p></li><li><p>条件测试</p></li><li><p>循环测试：简单循环、嵌套循环、串接循环&nbsp;</p></li></ol></blockquote><h3 id="7-黑盒测试典型的测试技术有哪些？-nbsp"><a href="#7-黑盒测试典型的测试技术有哪些？-nbsp" class="headerlink" title="7.黑盒测试典型的测试技术有哪些？&nbsp;"></a>7.黑盒测试典型的测试技术有哪些？&nbsp;</h3><blockquote><ol><li><p>等价类划分法</p></li><li><p>边界值分析法</p></li><li><p>错误推测法</p></li><li><p>因果图法</p></li></ol></blockquote><blockquote><p>！！等价类划分法：要求大家会画等价类，并且能够根据划分的等价类设计测<strong>试用例！！</strong></p><p><strong>！！边界值分析法：要求大家会设计边界值，并且设计测试用例！！</strong></p></blockquote><h3 id="8-调试的概念：调试是在测试发现错误之后排除错误的过程。"><a href="#8-调试的概念：调试是在测试发现错误之后排除错误的过程。" class="headerlink" title="8.调试的概念：调试是在测试发现错误之后排除错误的过程。"></a>8.调试的概念：调试是在测试发现错误之后排除错误的过程。</h3><h3 id="9-软件可靠性的定义：软件可靠性是程序在给定的时间间隔内，按照规格说明书的规定成功地运行的概率。"><a href="#9-软件可靠性的定义：软件可靠性是程序在给定的时间间隔内，按照规格说明书的规定成功地运行的概率。" class="headerlink" title="9.软件可靠性的定义：软件可靠性是程序在给定的时间间隔内，按照规格说明书的规定成功地运行的概率。"></a>9.软件可靠性的定义：软件可靠性是程序在给定的时间间隔内，按照规格说明书的规定成功地运行的概率。</h3><h3 id="10-软件的可用性的定义：软件可用性是程序在给定的时间点，按照规格说明书的规定，成功地运行的概率。"><a href="#10-软件的可用性的定义：软件可用性是程序在给定的时间点，按照规格说明书的规定，成功地运行的概率。" class="headerlink" title="10.软件的可用性的定义：软件可用性是程序在给定的时间点，按照规格说明书的规定，成功地运行的概率。"></a>10.软件的可用性的定义：软件可用性是程序在给定的时间点，按照规格说明书的规定，成功地运行的概率。</h3><h1 id="第八章-维护"><a href="#第八章-维护" class="headerlink" title="第八章 维护"></a>第八章 维护</h1><h3 id="1-维护阶段是花费人力物力最多的一个时期"><a href="#1-维护阶段是花费人力物力最多的一个时期" class="headerlink" title="1.维护阶段是花费人力物力最多的一个时期"></a>1.维护阶段是花费人力物力最多的一个时期</h3><h3 id="2-软件维护有哪几类维护："><a href="#2-软件维护有哪几类维护：" class="headerlink" title="2.软件维护有哪几类维护："></a>2.软件维护有哪几类维护：</h3><blockquote><p>改正性维护、适应性维护、完善性维护、预防性维护</p></blockquote><h3 id="3-决定软件可维护性的因素有什么？"><a href="#3-决定软件可维护性的因素有什么？" class="headerlink" title="3.决定软件可维护性的因素有什么？"></a>3.决定软件可维护性的因素有什么？</h3><blockquote><ol><li>可理解性</li><li>可测试性</li><li>可修改性</li><li>可移植性</li><li>可重用性</li></ol></blockquote><h3 id="4-针对预防性维护提出了软件再工程的过程软件再工程过程模型中有六类活动"><a href="#4-针对预防性维护提出了软件再工程的过程软件再工程过程模型中有六类活动" class="headerlink" title="4.针对预防性维护提出了软件再工程的过程软件再工程过程模型中有六类活动"></a>4.针对预防性维护提出了软件再工程的过程软件再工程过程模型中有六类活动</h3><blockquote><p>库存目录分析文档重构</p><p>逆向工程代码重构数据重构正向工程</p></blockquote><h3 id="5-P201-2-假设自己的任务是对一个已有的软件做重大修改-而且只允许从下述文档中选取两份-a-程序的规格说明-b-程序的详细设计结果-自然语言描述加上某种设计工具表示-c-源程序清单-其中有适当数量的注解"><a href="#5-P201-2-假设自己的任务是对一个已有的软件做重大修改-而且只允许从下述文档中选取两份-a-程序的规格说明-b-程序的详细设计结果-自然语言描述加上某种设计工具表示-c-源程序清单-其中有适当数量的注解" class="headerlink" title="5.P201 2.假设自己的任务是对一个已有的软件做重大修改,而且只允许从下述文档中选取两份:(a)程序的规格说明;(b)程序的详细设计结果(自然语言描述加上某种设计工具表示);(c)源程序清单(其中有适当数量的注解)"></a>5.P201 2.假设自己的任务是对一个已有的软件做重大修改,而且只允许从下述文档中选取两份:(a)程序的规格说明;(b)程序的详细设计结果(自然语言描述加上某种设计工具表示);(c)源程序清单(其中有适当数量的注解)</h3><p>应选取哪两份文档?为什么这样选取?打算怎样完成交给自己的任务? </p><blockquote><p>答:应该选取(a)和(c)两份文档，理由如下:</p><ol><li><p>“对一个已有的软件做重大修改”意味着对软件功能做较大变更或增加较多新功能，这往往需要修改软件的体系结构。因此，了解原有软件的总体情况是很重要的。程序的规格说明书准确地描述了对软件系统的数据要求、功能需求、性能需求、可靠性和可用性要求、出错处理需求、接口需求、约束、逆向需求及将来可能提出的需求，对了解已有软件的总体情况有很大帮助。在对已有软件做重大修改之前仔细阅读、认真研究这份文档，可以避免许多修改错误。因此，应该选取(a)程序的规格说明。</p></li><li><p>有经验的软件工程师通过阅读含有适当数量注解的源程序，不难搞清程序的实现算法，没有描述详细设计结果的文档并不会给维护工作带来太大困难。此外，为了修改程序代码，原有程序的清单是必不可少的。因此，应该选取(c)源程序清单。</p></li></ol></blockquote><p>&nbsp;</p><ol start="6"><li><h3 id="软件维护的目的和主要任务是什么？"><a href="#软件维护的目的和主要任务是什么？" class="headerlink" title="软件维护的目的和主要任务是什么？"></a>软件维护的目的和主要任务是什么？</h3></li></ol><blockquote><ol><li>软件维护的主要目的就是要提高软件的可维护性，减少软件维护所需要的工作量，降低软件系统的总成本。</li><li>软件维护的主要任务是在软件已经交付使用之后，为了改正错误或满足新的需要而修改文件，且能提高软件的可靠性、可用性、延长软件的寿命。</li><li>软件维护的基本任务：保证软件在一个相当长的时期能够正常运行。****</li></ol></blockquote><h1 id="第九章-面向对象方法学引论"><a href="#第九章-面向对象方法学引论" class="headerlink" title="第九章 面向对象方法学引论"></a>第九章 面向对象方法学引论</h1><h3 id="1-用面向对象方法开发软件，通常需要建立-3-种形式的模型："><a href="#1-用面向对象方法开发软件，通常需要建立-3-种形式的模型：" class="headerlink" title="1.用面向对象方法开发软件，通常需要建立 3 种形式的模型："></a>1.用面向对象方法开发软件，通常需要建立 3 种形式的模型：</h3><blockquote><ol><li>描述系统<strong>数据结构</strong>的对象模型</li><li>描述系统<strong>控制结构</strong>的动态模型</li><li>描述系统功能的功能模型</li></ol></blockquote><h3 id="2-面向对象技术的标准建模语言：UML"><a href="#2-面向对象技术的标准建模语言：UML" class="headerlink" title="2.面向对象技术的标准建模语言：UML"></a>2.面向对象技术的标准建模语言：UML</h3><h1 id="第十章-面向对象分析"><a href="#第十章-面向对象分析" class="headerlink" title="第十章 面向对象分析"></a>第十章 面向对象分析</h1><h3 id="1-大型对象模型通常是由几个层次组成？（5-个层次）"><a href="#1-大型对象模型通常是由几个层次组成？（5-个层次）" class="headerlink" title="1.大型对象模型通常是由几个层次组成？（5 个层次）"></a>1.大型对象模型通常是由几个层次组成？（5 个层次）</h3><blockquote><p>主题层、类与对象层、结构层、属性层、服务层</p></blockquote><h1 id="第十一章-面向对象设计"><a href="#第十一章-面向对象设计" class="headerlink" title="第十一章 面向对象设计"></a>第十一章 面向对象设计</h1><p>1.软件重用可分为以下 3 个层次： </p><blockquote><ol><li>知识重用</li><li>方法和标准的重用</li><li>软件成分的重用</li></ol><p>我们研究的是软件的成分重用</p></blockquote><p>2.软件成分的重用级别： </p><blockquote><ol><li>代码重用</li><li>设计结果重用</li><li>分析结果重用</li></ol></blockquote><h3 id="3-利用面向对象技术，可以更方便更有效地实现软件重用。面向对象技术中的“类”，是比较理想的可重用软构件，称之为类构件。"><a href="#3-利用面向对象技术，可以更方便更有效地实现软件重用。面向对象技术中的“类”，是比较理想的可重用软构件，称之为类构件。" class="headerlink" title="3.利用面向对象技术，可以更方便更有效地实现软件重用。面向对象技术中的“类”，是比较理想的可重用软构件，称之为类构件。"></a>3.利用面向对象技术，可以更方便更有效地实现软件重用。面向对象技术中的“类”，是比较理想的可重用软构件，称之为<strong>类构件</strong>。</h3><h3 id="4-类构件有-3-种重用方式：实例重用、继承重用和多态重用。"><a href="#4-类构件有-3-种重用方式：实例重用、继承重用和多态重用。" class="headerlink" title="4.类构件有 3 种重用方式：实例重用、继承重用和多态重用。"></a>4.类构件有 3 种重用方式：<strong>实例重用、继承重用和多态重用</strong>。</h3><h1 id="第十二章-面向对象实现"><a href="#第十二章-面向对象实现" class="headerlink" title="第十二章 面向对象实现"></a><strong>第十二章 面向对象实现</strong></h1><h3 id="1-面向对象测试的策略和技术与传统测试有所不同，测试的焦点从过程构件（传统模型）移向了对象类。"><a href="#1-面向对象测试的策略和技术与传统测试有所不同，测试的焦点从过程构件（传统模型）移向了对象类。" class="headerlink" title="1.面向对象测试的策略和技术与传统测试有所不同，测试的焦点从过程构件（传统模型）移向了对象类。"></a>1.面向对象测试的策略和技术与传统测试有所不同，测试的焦点<strong>从过程构件（传统模型）移向了对象类。</strong></h3><h1 id="第十三章-软件项目管理"><a href="#第十三章-软件项目管理" class="headerlink" title="第十三章 软件项目管理"></a>第十三章 软件项目管理</h1><h3 id="1-估算软件规模的方法：代码行技术、功能点技术"><a href="#1-估算软件规模的方法：代码行技术、功能点技术" class="headerlink" title="1.估算软件规模的方法：代码行技术、功能点技术"></a>1.估算软件规模的方法：代码行技术、功能点技术</h3><h3 id="2-Gantt（甘特）图是历史悠久、应用广泛的制定进度计划的工具。工程网络是制定进度计划时另一种常用的图形工具。"><a href="#2-Gantt（甘特）图是历史悠久、应用广泛的制定进度计划的工具。工程网络是制定进度计划时另一种常用的图形工具。" class="headerlink" title="2.Gantt（甘特）图是历史悠久、应用广泛的制定进度计划的工具。工程网络是制定进度计划时另一种常用的图形工具。"></a>2.Gantt（甘特）图是历史悠久、应用广泛的<strong>制定进度计划</strong>的工具。工程网络是<strong>制定进度计划</strong>时另一种常用的图形工具。</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期-核心问题</title>
      <link href="/2022/07/03/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/03/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="01-vue的生命周期"><a href="#01-vue的生命周期" class="headerlink" title="01_vue的生命周期"></a>01_vue的生命周期</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>Vue的生命周期是什么?</li></ol><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><ol><li>Vue的生命周期是什么?<ol><li>从Vue实例, 创建到销毁的过程</li></ol></li></ol><h2 id="02-vue的钩子函数"><a href="#02-vue的钩子函数" class="headerlink" title="02_vue的钩子函数"></a>02_vue的钩子函数</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ol><li>如何知道Vue生命周期到达了什么阶段?</li><li>钩子函数有哪些?</li></ol><h3 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h3><ol><li>如何知道Vue生命周期到达了什么阶段?<ol><li>使用钩子函数</li></ol></li><li>钩子函数有哪些?<ol><li>初始化&#x2F; 挂载&#x2F; 更新&#x2F; 销毁</li></ol></li></ol><h2 id="03-钩子函数-初始化阶段"><a href="#03-钩子函数-初始化阶段" class="headerlink" title="03_钩子函数_初始化阶段"></a>03_钩子函数_初始化阶段</h2><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><ol><li>Vue实例从创建到编译模板执行了哪些钩子函数?</li><li>created函数触发能获取data?</li></ol><h3 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h3><ol><li>Vue实例从创建到编译模板执行了哪些钩子函数?<ol><li>beforeCreate &#x2F; created</li></ol></li><li>created函数触发能获取data?<ol><li>能获取data, 不能获取真实DOM</li></ol></li></ol><h2 id="练习时间：3m"><a href="#练习时间：3m" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="04-钩子函数-挂载阶段"><a href="#04-钩子函数-挂载阶段" class="headerlink" title="04_钩子函数_挂载阶段"></a>04_钩子函数_挂载阶段</h2><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><ol><li>Vue实例从创建到显示都经历了哪些钩子函数?</li><li>created函数里, 能获取真实DOM吗?</li><li>在什么钩子函数里可以获取真实DOM?</li></ol><h3 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h3><ol><li>Vue实例从创建到显示都经历了哪些钩子函数?<ol><li>beforeCreate &#x2F; created &#x2F; beforeMount &#x2F; mounted</li></ol></li><li>created函数里, 能获取真实DOM吗?<ol><li>不能获取真实DOM</li></ol></li><li>在什么钩子函数里可以获取真实DOM?<ol><li>mounted</li></ol></li></ol><h2 id="练习时间：3m-1"><a href="#练习时间：3m-1" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="05-钩子函数-更新阶段"><a href="#05-钩子函数-更新阶段" class="headerlink" title="05_钩子函数_更新阶段"></a>05_钩子函数_更新阶段</h2><h3 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h3><ol><li>什么时候执行updated钩子函数?</li><li>在哪可以获取更新后的DOM?</li></ol><h3 id="答案-4"><a href="#答案-4" class="headerlink" title="答案"></a>答案</h3><ol><li>什么时候执行updated钩子函数?<ol><li>当数据发生变化并更新页面后</li></ol></li><li>在哪可以获取更新后的DOM?<ol><li>在updated钩子函数里</li></ol></li></ol><h2 id="06-钩子函数-销毁阶段"><a href="#06-钩子函数-销毁阶段" class="headerlink" title="06_钩子函数_销毁阶段"></a>06_钩子函数_销毁阶段</h2><h3 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h3><ol><li>一般在beforeDestroy&#x2F;destroyed里做什么?</li></ol><h3 id="答案-5"><a href="#答案-5" class="headerlink" title="答案"></a>答案</h3><ol><li>一般在beforeDestroy&#x2F;destroyed里做什么?<ol><li>手动消除计时器&#x2F;定时器&#x2F;全局事件</li></ol></li></ol><h2 id="练习时间：3m-2"><a href="#练习时间：3m-2" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="07-axios的介绍"><a href="#07-axios的介绍" class="headerlink" title="07_axios的介绍"></a>07_axios的介绍</h2><h3 id="问题-6"><a href="#问题-6" class="headerlink" title="问题"></a>问题</h3><ol><li>什么是ajax?</li><li>ajax原理?</li><li>axios是什么?</li></ol><h3 id="答案-6"><a href="#答案-6" class="headerlink" title="答案"></a>答案</h3><ol><li>什么是ajax?<ol><li>一种前端异步请求后端的技术</li></ol></li><li>ajax原理?<ol><li>浏览器window接口的XMLHttpRequest</li></ol></li><li>axios是什么?<ol><li>基于原生ajax+Promise技术封装通用于前后端的请求库</li></ol></li></ol><h2 id="08-axios-获取所有图书-get请求"><a href="#08-axios-获取所有图书-get请求" class="headerlink" title="08_axios_获取所有图书_get请求"></a>08_axios_获取所有图书_get请求</h2><h3 id="问题-7"><a href="#问题-7" class="headerlink" title="问题"></a>问题</h3><ol><li>axios如何发起一次get请求?</li><li>axios函数调用原地结果是什么?</li><li>如何拿到Promise里ajax的成功或失败的结果?</li></ol><h3 id="答案-7"><a href="#答案-7" class="headerlink" title="答案"></a>答案</h3><ol><li>axios如何发起一次get请求?<ol><li>在method选项配置为true &#x2F; 也可以默认不写</li></ol></li><li>axios函数调用原地结果是什么?<ol><li>是一个Promise对象</li></ol></li><li>如何拿到Promise里ajax的成功或失败的结果?<ol><li>then() &#x2F; catch()</li></ol></li></ol><h2 id="09-axios-获取某本图书-get传参"><a href="#09-axios-获取某本图书-get传参" class="headerlink" title="09_axios_获取某本图书_get传参"></a>09_axios_获取某本图书_get传参</h2><h3 id="问题-8"><a href="#问题-8" class="headerlink" title="问题"></a>问题</h3><ol><li>ajax如何给后台传参?</li><li>axios哪个配置项会把参数自动写到url?后面</li></ol><h3 id="答案-8"><a href="#答案-8" class="headerlink" title="答案"></a>答案</h3><ol><li>ajax如何给后台传参?<ol><li>在url?拼接–查询字符串</li><li>在url路径上–需要后端特殊处理</li><li>在请求体&#x2F; 请求头传参给后台</li></ol></li><li>axios哪个配置项会把参数自动写到url?后面<ol><li>params</li></ol></li></ol><h2 id="练习时间：3m-3"><a href="#练习时间：3m-3" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="10-axios-添加书籍-post传参"><a href="#10-axios-添加书籍-post传参" class="headerlink" title="10_axios_添加书籍_post传参"></a>10_axios_添加书籍_post传参</h2><h3 id="问题-9"><a href="#问题-9" class="headerlink" title="问题"></a>问题</h3><ol><li>post请求方式, 一般在哪里传递数据给后台?</li><li>axios哪个选项, 可以把参数自动装入到请求体中?</li><li>axios默认发给后台请求体数据格式是?</li></ol><h3 id="答案-9"><a href="#答案-9" class="headerlink" title="答案"></a>答案</h3><ol><li>post请求方式, 一般在哪里传递数据给后台?<ol><li>请求体中</li></ol></li><li>axios哪个选项, 可以把参数自动装入到请求体中?<ol><li>data选项</li></ol></li><li>axios默认发给后台请求体数据格式是?<ol><li>json字符串格式</li></ol></li></ol><h2 id="练习时间：3m-4"><a href="#练习时间：3m-4" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="11-axios-全局默认配置基地址"><a href="#11-axios-全局默认配置基地址" class="headerlink" title="11_axios_全局默认配置基地址"></a>11_axios_全局默认配置基地址</h2><h3 id="问题-10"><a href="#问题-10" class="headerlink" title="问题"></a>问题</h3><ol><li>想学习axios更多的知识应该去哪里?</li><li>axios如何配置基地址?</li></ol><h3 id="答案-10"><a href="#答案-10" class="headerlink" title="答案"></a>答案</h3><ol><li>想学习axios更多的知识应该去哪里?<ol><li>官网多阅读, 多看多总结, 任何库和插件都是</li></ol></li><li>axios如何配置基地址?<ol><li>axios.defaults.baseURL</li></ol></li></ol><h2 id="12-ref获取原生DOM元素"><a href="#12-ref获取原生DOM元素" class="headerlink" title="12_ref获取原生DOM元素"></a>12_ref获取原生DOM元素</h2><h3 id="问题-11"><a href="#问题-11" class="headerlink" title="问题"></a>问题</h3><ol><li>Vue中如何获取原生DOM呢?</li></ol><h3 id="答案-11"><a href="#答案-11" class="headerlink" title="答案"></a>答案</h3><ol><li>Vue中如何获取原生DOM呢?<ol><li>用id属性或者ref属性都可以</li></ol></li></ol><h2 id="13-ref属性-组件对象"><a href="#13-ref属性-组件对象" class="headerlink" title="13_ref属性_组件对象"></a>13_ref属性_组件对象</h2><h3 id="问题-12"><a href="#问题-12" class="headerlink" title="问题"></a>问题</h3><ol><li>如何获取组件对象呢?</li><li>拿到组件对象能做什么?</li></ol><h3 id="答案-12"><a href="#答案-12" class="headerlink" title="答案"></a>答案</h3><ol><li>如何获取组件对象呢?<ol><li>目标组件添加ref属性</li><li>this.$refs.名字获取组件对象</li></ol></li><li>拿到组件对象能做什么?<ol><li>调用组件里的属性&#x2F;方法</li></ol></li></ol><h2 id="练习时间：3m-5"><a href="#练习时间：3m-5" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="14-nextTick基础使用"><a href="#14-nextTick基础使用" class="headerlink" title="14_nextTick基础使用"></a>14_nextTick基础使用</h2><h3 id="问题-13"><a href="#问题-13" class="headerlink" title="问题"></a>问题</h3><ol><li>data改变更新DOM是同步还是异步的?</li><li>我们可以在哪里访问到更新后的DOM呢?</li></ol><h3 id="答案-13"><a href="#答案-13" class="headerlink" title="答案"></a>答案</h3><ol><li>data改变更新DOM是同步还是异步的?<ol><li>异步</li></ol></li><li>我们可以在哪里访问到更新后的DOM呢?<ol><li>this.$nextTick里的函数体</li><li>updated生命周期钩子函数</li></ol></li></ol><h2 id="15-nextTick使用场景"><a href="#15-nextTick使用场景" class="headerlink" title="15_nextTick使用场景"></a>15_nextTick使用场景</h2><h3 id="问题-14"><a href="#问题-14" class="headerlink" title="问题"></a>问题</h3><ol><li>$nextTick函数原地返回什么?</li><li>如何在JS中主动触发标签的事件呢?</li></ol><h3 id="答案-14"><a href="#答案-14" class="headerlink" title="答案"></a>答案</h3><ol><li>$nextTick函数原地返回什么?<ol><li>Promise对象</li></ol></li><li>如何在JS中主动触发标签的事件呢?<ol><li>获取到DOM对象, 调用事件方法</li></ol></li></ol><h2 id="练习时间：3m-6"><a href="#练习时间：3m-6" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="16-组件里name属性作用"><a href="#16-组件里name属性作用" class="headerlink" title="16_组件里name属性作用"></a>16_组件里name属性作用</h2><h3 id="问题-15"><a href="#问题-15" class="headerlink" title="问题"></a>问题</h3><ol><li>组件使用分为几步?</li><li>注册组件名还可以用什么?</li></ol><h3 id="答案-15"><a href="#答案-15" class="headerlink" title="答案"></a>答案</h3><ol><li>组件使用分为几步?<ol><li>创建组件&#x2F; 引入组件&#x2F; 注册组件&#x2F; 使用组件</li></ol></li><li>注册组件名还可以用什么?<ol><li>用组件对象的name属性的值</li></ol></li></ol><h2 id="17-购物车案例-项目初始化"><a href="#17-购物车案例-项目初始化" class="headerlink" title="17_购物车案例_项目初始化"></a>17_购物车案例_项目初始化</h2><h3 id="问题-16"><a href="#问题-16" class="headerlink" title="问题"></a>问题</h3><ol><li>拿到项目需求–做什么?</li></ol><h3 id="答案-16"><a href="#答案-16" class="headerlink" title="答案"></a>答案</h3><ol><li>拿到项目需求–做什么?<ol><li>新建项目-下载需要的包</li><li>分析, 拆分, 创建组件</li><li>准备静态标签</li><li>组件使用到页面</li></ol></li></ol><h2 id="练习时间：30s（输入命令初始化项目）"><a href="#练习时间：30s（输入命令初始化项目）" class="headerlink" title="&#x3D;&#x3D;练习时间：30s（输入命令初始化项目）&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：30s（输入命令初始化项目）&#x3D;&#x3D;</h2><h2 id="18-购物车案例-头部自定义"><a href="#18-购物车案例-头部自定义" class="headerlink" title="18_购物车案例_头部自定义"></a>18_购物车案例_头部自定义</h2><h3 id="问题-17"><a href="#问题-17" class="headerlink" title="问题"></a>问题</h3><ol><li>封装的组件–如何能支持不同的项目需求?</li><li>props有哪2种定义方式, 区别是?</li></ol><h3 id="答案-17"><a href="#答案-17" class="headerlink" title="答案"></a>答案</h3><ol><li>封装的组件–如何能支持不同的项目需求?<ol><li>可以自定义props变量使用</li><li>使用组件者, 传入具体数据</li></ol></li><li>props有哪2种定义方式, 区别是?<ol><li>props: [] - 只声明变量, 不能类型校验</li><li>props: {} - 声明变量和校验类型规则 - 不对则报错</li></ol></li></ol><h2 id="练习时间：5m"><a href="#练习时间：5m" class="headerlink" title="&#x3D;&#x3D;练习时间：5m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：5m&#x3D;&#x3D;</h2><h2 id="19-购物车案例-请求数据"><a href="#19-购物车案例-请求数据" class="headerlink" title="19_购物车案例_请求数据"></a>19_购物车案例_请求数据</h2><h3 id="问题-18"><a href="#问题-18" class="headerlink" title="问题"></a>问题</h3><ol><li>如何从后台获取数据?</li><li>如何定义全局变量?</li></ol><h3 id="答案-18"><a href="#答案-18" class="headerlink" title="答案"></a>答案</h3><ol><li>如何从后台获取数据?<ol><li>依赖axios等网络请求库</li></ol></li><li>如何定义全局变量?<ol><li>在Vue的原型上添加, 组件对象通过原型链可以访问</li></ol></li></ol><h2 id="20-购物车案例-数据铺设"><a href="#20-购物车案例-数据铺设" class="headerlink" title="20_购物车案例_数据铺设"></a>20_购物车案例_数据铺设</h2><h3 id="问题-19"><a href="#问题-19" class="headerlink" title="问题"></a>问题</h3><ol><li>拿到数据如何铺设页面?</li></ol><h3 id="答案-19"><a href="#答案-19" class="headerlink" title="答案"></a>答案</h3><ol><li>拿到数据如何铺设页面?<ol><li>分析数据和什么标签对应</li><li>传入数据对象, 在组件内使用</li></ol></li></ol><h2 id="练习时间：5m-1"><a href="#练习时间：5m-1" class="headerlink" title="&#x3D;&#x3D;练习时间：5m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：5m&#x3D;&#x3D;</h2><h2 id="21-购物车案例-商品选中效果"><a href="#21-购物车案例-商品选中效果" class="headerlink" title="21_购物车案例_商品选中效果"></a>21_购物车案例_商品选中效果</h2><h3 id="问题-20"><a href="#问题-20" class="headerlink" title="问题"></a>问题</h3><ol><li>label标签有什么用?</li><li>对象传值赋值传的是什么?</li></ol><h3 id="答案-20"><a href="#答案-20" class="headerlink" title="答案"></a>答案</h3><ol><li>label标签有什么用?<ol><li>关联表单, 点击label标签上, 相当于点击表单</li></ol></li><li>对象传值赋值传的是什么?<ol><li>传的是引用类型的堆内存地址, 多处使用共同的这个对象&#x2F;数组</li></ol></li></ol><h2 id="练习时间：3m-7"><a href="#练习时间：3m-7" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="22-购物车案例-商品数量控制"><a href="#22-购物车案例-商品数量控制" class="headerlink" title="22_购物车案例_商品数量控制"></a>22_购物车案例_商品数量控制</h2><h3 id="问题-21"><a href="#问题-21" class="headerlink" title="问题"></a>问题</h3><ol><li>子组件改变对象里属性会影响外面数组里对象否?</li><li>控制输入框值合法性?</li></ol><h3 id="答案-21"><a href="#答案-21" class="headerlink" title="答案"></a>答案</h3><ol><li>子组件改变对象里属性会影响外面数组里对象否?<ol><li>会, 因为对象之间引用了相同的内存地址</li></ol></li><li>控制输入框值合法性?<ol><li>先控制按钮, 然后侦听输入框值, 强制覆盖</li></ol></li></ol><h2 id="练习时间：3m-8"><a href="#练习时间：3m-8" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="23-购物车案例-全选"><a href="#23-购物车案例-全选" class="headerlink" title="23_购物车案例_全选"></a>23_购物车案例_全选</h2><h3 id="问题-22"><a href="#问题-22" class="headerlink" title="问题"></a>问题</h3><ol><li>全选和小选框, 互相影响的思路是什么?</li></ol><h3 id="答案-22"><a href="#答案-22" class="headerlink" title="答案"></a>答案</h3><ol><li>全选和小选框, 互相影响的思路是什么?<ol><li>全选 – 关联计算属性 – set方法 – 同步所有小选</li><li>小选 – 触发计算属性的get方法 – 统计后返回全选状态</li></ol></li></ol><h2 id="24-购物车案例-总数量"><a href="#24-购物车案例-总数量" class="headerlink" title="24_购物车案例_总数量"></a>24_购物车案例_总数量</h2><h3 id="问题-23"><a href="#问题-23" class="headerlink" title="问题"></a>问题</h3><ol><li>统计选中商品的总数量思路是什么?</li></ol><h3 id="答案-23"><a href="#答案-23" class="headerlink" title="答案"></a>答案</h3><ol><li>统计选中商品的总数量思路是什么?<ol><li>计算属性</li><li>reduce累加数组里对象数量 – 但是要加一层判断</li></ol></li></ol><h2 id="25-购物车案例-总价"><a href="#25-购物车案例-总价" class="headerlink" title="25_购物车案例_总价"></a>25_购物车案例_总价</h2><h3 id="问题-24"><a href="#问题-24" class="headerlink" title="问题"></a>问题</h3><ol><li>统计总价如何做的?</li></ol><h3 id="答案-24"><a href="#答案-24" class="headerlink" title="答案"></a>答案</h3><ol><li>统计总价如何做的?<ol><li>计算属性</li><li>统计数组里的商品数量 * 商品单价(需判断选中状态)</li><li>只要依赖项修改, 计算属性都会重新计算总价</li></ol></li></ol><h2 id="练习时间：7m"><a href="#练习时间：7m" class="headerlink" title="&#x3D;&#x3D;练习时间：7m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：7m&#x3D;&#x3D;</h2>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue 生命周期 </tag>
            
            <tag> Created </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue通信组件核心问题</title>
      <link href="/2022/07/03/Vue%E9%80%9A%E4%BF%A1%E7%BB%84%E4%BB%B6%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/03/Vue%E9%80%9A%E4%BF%A1%E7%BB%84%E4%BB%B6%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>上一篇文章地址：<a href="/2024/07/03/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/" title="Vue组件通信基础">Vue组件通信基础</a><br>承接上一篇文章，这次讲解了Vue组件通信基础的一些核心问题</p></blockquote><h2 id="01-为什么要使用组件"><a href="#01-为什么要使用组件" class="headerlink" title="01_为什么要使用组件"></a>01_为什么要使用组件</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>遇到重复标签想复用?</li><li>组件好处?</li></ol><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><ol><li>遇到重复标签想复用?<ol><li>封装成组件</li></ol></li><li>组件好处?<ol><li>各自独立, 便于复用</li></ol></li></ol><h2 id="02-组件基本概念"><a href="#02-组件基本概念" class="headerlink" title="02_组件基本概念"></a>02_组件基本概念</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ol><li>组件是什么?</li><li>什么时候封装组件?</li><li>组件好处?</li></ol><h3 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h3><ol><li>组件是什么?<ol><li>可复用的vue实例, 封装标签, 样式, JS</li></ol></li><li>什么时候封装组件?<ol><li>遇到重复标签, 可复用的时候</li></ol></li><li>组件好处?<ol><li>各自独立, 互不影响</li></ol></li></ol><h2 id="03-组件-基本使用4步"><a href="#03-组件-基本使用4步" class="headerlink" title="03_组件_基本使用4步"></a>03_组件_基本使用4步</h2><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><ol><li>创建和使用组件步骤?</li><li>组件运行结果?</li></ol><h3 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h3><ol><li>创建和使用组件步骤?<ol><li>创建.vue文件–标签–样式–JS进去</li><li>导入组件(import xxx from ‘path&#x2F;to&#x2F;components&#x2F;xxx.vue’)</li><li>注册组件(全局&#x2F; 局部)</li><li>使用组件(组件名用作标签)</li></ol></li><li>组件运行结果?<ol><li>把组件标签最终替换成, 封装的组件内标签</li></ol></li></ol><h2 id="练习时间：5m"><a href="#练习时间：5m" class="headerlink" title="&#x3D;&#x3D;练习时间：5m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：5m&#x3D;&#x3D;</h2><h2 id="04-scoped作用过程"><a href="#04-scoped作用过程" class="headerlink" title="04_scoped作用过程"></a>04_scoped作用过程</h2><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><ol><li>Vue组件内样式, 只针对当前组件内标签生效如何做?</li><li>原理和过程是什么?</li></ol><h3 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h3><ol><li>Vue组件内样式, 只针对当前组件内标签生效如何做?<ol><li>给style上添加scoped</li></ol></li><li>原理和过程是什么?<ol><li>会自动给标签添加data-v-hash值属性, 所有选择都带属性选择</li></ol></li></ol><h2 id="05-组件通信-父向子"><a href="#05-组件通信-父向子" class="headerlink" title="05_组件通信_父向子"></a>05_组件通信_父向子</h2><h3 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h3><ol><li>什么时候需要父传子技术?</li><li>父传子口诀(步骤)是什么?</li></ol><h3 id="答案-4"><a href="#答案-4" class="headerlink" title="答案"></a>答案</h3><ol><li>什么时候需要父传子技术?<ol><li>从一个vue组件里把值传给另一个vue组件(父-&gt;子)</li></ol></li><li>父传子口诀(步骤)是什么?<ol><li>子组件内, props定义变量, 在子组件使用变量</li><li>父组件内, 使用子组件, 属性方式给props变量传值</li></ol></li></ol><h2 id="06-组件通信-父向子-配合循环"><a href="#06-组件通信-父向子-配合循环" class="headerlink" title="06_组件通信_父向子_配合循环"></a>06_组件通信_父向子_配合循环</h2><h3 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h3><ol><li>循环使用组件注意事项?</li></ol><h3 id="答案-5"><a href="#答案-5" class="headerlink" title="答案"></a>答案</h3><ol><li>循环使用组件注意事项?<ol><li>每次循环, 变量和组件, 都是独立的</li></ol></li></ol><h2 id="练习时间：3m"><a href="#练习时间：3m" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="07-组件通信-单向数据流"><a href="#07-组件通信-单向数据流" class="headerlink" title="07_组件通信_单向数据流"></a>07_组件通信_单向数据流</h2><h3 id="问题-6"><a href="#问题-6" class="headerlink" title="问题"></a>问题</h3><ol><li>为何不建议, 子组件修改父组件传过来的值?</li><li>什么是单向数据流?</li><li>props里定义的变量能修改吗?</li></ol><h3 id="答案-6"><a href="#答案-6" class="headerlink" title="答案"></a>答案</h3><ol><li>为何不建议, 子组件修改父组件传过来的值?<ol><li>父子数据不一致, 而且子组件是依赖父传入的值</li></ol></li><li>什么是单向数据流?<ol><li>从父到子的数据流向, 叫单向数据流</li></ol></li><li>props里定义的变量能修改吗?<ol><li>不能, props里的变量本身是只读的</li></ol></li></ol><h2 id="08-组件通信-子向父"><a href="#08-组件通信-子向父" class="headerlink" title="08_组件通信_子向父"></a>08_组件通信_子向父</h2><h3 id="问题-7"><a href="#问题-7" class="headerlink" title="问题"></a>问题</h3><ol><li>什么时候使用子传父技术?</li><li>子传父如何实现?</li></ol><h3 id="答案-7"><a href="#答案-7" class="headerlink" title="答案"></a>答案</h3><ol><li>什么时候使用子传父技术?<ol><li>当子想要去改变父里的数据</li></ol></li><li>子传父如何实现?<ol><li>父组件内, 给组件@自定义事件&#x3D;”父methods函数”</li><li>子组件内, 恰当时机this.$emit(‘自定义事件名’, 值)</li></ol></li></ol><h2 id="练习时间：3m-1"><a href="#练习时间：3m-1" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="09-组件通信-跨组件传值"><a href="#09-组件通信-跨组件传值" class="headerlink" title="09_组件通信_跨组件传值"></a>09_组件通信_跨组件传值</h2><h3 id="问题-8"><a href="#问题-8" class="headerlink" title="问题"></a>问题</h3><ol><li>什么时候使用eventBus技术?</li><li>eventBus技术本质是什么?</li></ol><h3 id="答案-8"><a href="#答案-8" class="headerlink" title="答案"></a>答案</h3><ol><li>什么时候使用eventBus技术?<ol><li>当2个没有引用关系的组件之间要通信传值</li></ol></li><li>eventBus技术本质是什么?<ol><li>空白Vue对象, 只负责$on和$emit</li></ol></li></ol><h2 id="练习时间：5m-1"><a href="#练习时间：5m-1" class="headerlink" title="&#x3D;&#x3D;练习时间：5m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：5m&#x3D;&#x3D;</h2><h2 id="10-todo案例-项目创建-静态页面准备"><a href="#10-todo案例-项目创建-静态页面准备" class="headerlink" title="10_todo案例_项目创建_静态页面准备"></a>10_todo案例_项目创建_静态页面准备</h2><h3 id="问题-9"><a href="#问题-9" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及到了哪些技术点?</li></ol><h3 id="答案-9"><a href="#答案-9" class="headerlink" title="答案"></a>答案</h3><ol><li>涉及到了哪些技术点?<ol><li>组件创建</li><li>组件引入</li><li>组件注册</li><li>组件使用</li></ol></li></ol><h2 id="练习时间：30s（输入命令初始化项目）"><a href="#练习时间：30s（输入命令初始化项目）" class="headerlink" title="&#x3D;&#x3D;练习时间：30s（输入命令初始化项目）&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：30s（输入命令初始化项目）&#x3D;&#x3D;</h2><h2 id="11-todo案例-铺设待办任务"><a href="#11-todo案例-铺设待办任务" class="headerlink" title="11_todo案例_铺设待办任务"></a>11_todo案例_铺设待办任务</h2><h3 id="问题-10"><a href="#问题-10" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及到了哪些技术点?</li></ol><h3 id="答案-10"><a href="#答案-10" class="headerlink" title="答案"></a>答案</h3><ol><li>涉及到了哪些技术点?<ol><li>父传子技术</li><li>v-for循环</li><li>v-model绑定</li><li>动态class使用</li></ol></li></ol><h2 id="练习时间：3m-2"><a href="#练习时间：3m-2" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="12-todo案例-添加任务"><a href="#12-todo案例-添加任务" class="headerlink" title="12_todo案例_添加任务"></a>12_todo案例_添加任务</h2><h3 id="问题-11"><a href="#问题-11" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及到了哪些技术点?</li></ol><h3 id="答案-11"><a href="#答案-11" class="headerlink" title="答案"></a>答案</h3><ol><li>涉及到了哪些技术点?<ol><li>键盘事件, enter修饰符</li><li>子传父技术</li></ol></li></ol><h2 id="练习时间：3m-3"><a href="#练习时间：3m-3" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="13-todo案例-删除任务"><a href="#13-todo案例-删除任务" class="headerlink" title="13_todo案例_删除任务"></a>13_todo案例_删除任务</h2><h3 id="问题-12"><a href="#问题-12" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及到了哪些技术点?</li></ol><h3 id="答案-12"><a href="#答案-12" class="headerlink" title="答案"></a>答案</h3><ol><li>涉及到了哪些技术点?<ol><li>点击事件, 传索引</li><li>子传父</li><li>数组删除某个元素, v-for更新</li></ol></li></ol><h2 id="练习时间：3m-4"><a href="#练习时间：3m-4" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="14-todo案例-统计任务数量"><a href="#14-todo案例-统计任务数量" class="headerlink" title="14_todo案例_统计任务数量"></a>14_todo案例_统计任务数量</h2><h3 id="问题-13"><a href="#问题-13" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及到了哪些技术点?</li></ol><h3 id="答案-13"><a href="#答案-13" class="headerlink" title="答案"></a>答案</h3><ol><li>涉及到了哪些技术点?<ol><li>父传子</li><li>计算属性</li><li>数组更新 – 所有地方受影响</li></ol></li></ol><h2 id="练习时间：3m-5"><a href="#练习时间：3m-5" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="15-todo案例-筛选显示任务"><a href="#15-todo案例-筛选显示任务" class="headerlink" title="15_todo案例_筛选显示任务"></a>15_todo案例_筛选显示任务</h2><h3 id="问题-14"><a href="#问题-14" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及到了哪些技术点?</li></ol><h3 id="答案-14"><a href="#答案-14" class="headerlink" title="答案"></a>答案</h3><ol><li>涉及到了哪些技术点?<ol><li>动态class – 配合判断</li><li>子传父技术</li><li>计算属性 + 数组过滤方法</li></ol></li></ol><h2 id="练习时间：3m-6"><a href="#练习时间：3m-6" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="16-todo案例-清除已完成"><a href="#16-todo案例-清除已完成" class="headerlink" title="16_todo案例_清除已完成"></a>16_todo案例_清除已完成</h2><h3 id="问题-15"><a href="#问题-15" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及到了哪些技术点?</li></ol><h3 id="答案-15"><a href="#答案-15" class="headerlink" title="答案"></a>答案</h3><ol><li>涉及到了哪些技术点?<ol><li>子传父技术</li><li>数组过滤方法</li></ol></li></ol><h2 id="练习时间：3m-7"><a href="#练习时间：3m-7" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="17-todo案例-数据缓存"><a href="#17-todo案例-数据缓存" class="headerlink" title="17_todo案例_数据缓存"></a>17_todo案例_数据缓存</h2><h3 id="问题-16"><a href="#问题-16" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及到了哪些技术点?</li></ol><h3 id="答案-16"><a href="#答案-16" class="headerlink" title="答案"></a>答案</h3><ol><li>涉及到了哪些技术点?<ol><li>深度侦听</li><li>数据缓存</li><li>序列化和反序列化</li></ol></li></ol><h2 id="练习时间：3m-8"><a href="#练习时间：3m-8" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2><h2 id="18-todo案例-全选"><a href="#18-todo案例-全选" class="headerlink" title="18_todo案例_全选"></a>18_todo案例_全选</h2><h3 id="问题-17"><a href="#问题-17" class="headerlink" title="问题"></a>问题</h3><ol><li>涉及到了哪些技术点?</li></ol><h3 id="答案-17"><a href="#答案-17" class="headerlink" title="答案"></a>答案</h3><ol><li>涉及到了哪些技术点?<ol><li>计算属性完整写法</li><li>every方法如果不遍历返回true</li></ol></li></ol><h2 id="练习时间：3m-9"><a href="#练习时间：3m-9" class="headerlink" title="&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;"></a>&#x3D;&#x3D;练习时间：3m&#x3D;&#x3D;</h2>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue 组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
